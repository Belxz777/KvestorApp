/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/layout"],{

/***/ "(app-pages-browser)/./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5Ccode%5CTelegram-App%5Cminiapp%5Cnode_modules%5C.pnpm%5Cnext%4014.0.4_react-dom%4018.2.0_react%4018.2.0%5Cnode_modules%5Cnext%5Cfont%5Cgoogle%5Ctarget.css%3F%7B%22path%22%3A%22src%5C%5Capp%5C%5Clayout.tsx%22%2C%22import%22%3A%22Inter%22%2C%22arguments%22%3A%5B%7B%22subsets%22%3A%5B%22latin%22%5D%7D%5D%2C%22variableName%22%3A%22inter%22%7D&modules=C%3A%5Ccode%5CTelegram-App%5Cminiapp%5Csrc%5Capp%5Cglobals.css&modules=C%3A%5Ccode%5CTelegram-App%5Cminiapp%5Csrc%5Capp%5CTmaSDKLoader.tsx&server=false!":

  !*** ./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5Ccode%5CTelegram-App%5Cminiapp%5Cnode_modules%5C.pnpm%5Cnext%4014.0.4_react-dom%4018.2.0_react%4018.2.0%5Cnode_modules%5Cnext%5Cfont%5Cgoogle%5Ctarget.css%3F%7B%22path%22%3A%22src%5C%5Capp%5C%5Clayout.tsx%22%2C%22import%22%3A%22Inter%22%2C%22arguments%22%3A%5B%7B%22subsets%22%3A%5B%22latin%22%5D%7D%5D%2C%22variableName%22%3A%22inter%22%7D&modules=C%3A%5Ccode%5CTelegram-App%5Cminiapp%5Csrc%5Capp%5Cglobals.css&modules=C%3A%5Ccode%5CTelegram-App%5Cminiapp%5Csrc%5Capp%5CTmaSDKLoader.tsx&server=false! ***!

/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/next/font/google/target.css?{\"path\":\"src\\\\app\\\\layout.tsx\",\"import\":\"Inter\",\"arguments\":[{\"subsets\":[\"latin\"]}],\"variableName\":\"inter\"} */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/next/font/google/target.css?{\\\"path\\\":\\\"src\\\\\\\\app\\\\\\\\layout.tsx\\\",\\\"import\\\":\\\"Inter\\\",\\\"arguments\\\":[{\\\"subsets\\\":[\\\"latin\\\"]}],\\\"variableName\\\":\\\"inter\\\"}\", 23));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/globals.css */ \"(app-pages-browser)/./src/app/globals.css\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/TmaSDKLoader.tsx */ \"(app-pages-browser)/./src/app/TmaSDKLoader.tsx\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE0LjAuNF9yZWFjdC1kb21AMTguMi4wX3JlYWN0QDE4LjIuMC9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWZsaWdodC1jbGllbnQtZW50cnktbG9hZGVyLmpzP21vZHVsZXM9QyUzQSU1Q2NvZGUlNUNUZWxlZ3JhbS1BcHAlNUNtaW5pYXBwJTVDbm9kZV9tb2R1bGVzJTVDLnBucG0lNUNuZXh0JTQwMTQuMC40X3JlYWN0LWRvbSU0MDE4LjIuMF9yZWFjdCU0MDE4LjIuMCU1Q25vZGVfbW9kdWxlcyU1Q25leHQlNUNmb250JTVDZ29vZ2xlJTVDdGFyZ2V0LmNzcyUzRiU3QiUyMnBhdGglMjIlM0ElMjJzcmMlNUMlNUNhcHAlNUMlNUNsYXlvdXQudHN4JTIyJTJDJTIyaW1wb3J0JTIyJTNBJTIySW50ZXIlMjIlMkMlMjJhcmd1bWVudHMlMjIlM0ElNUIlN0IlMjJzdWJzZXRzJTIyJTNBJTVCJTIybGF0aW4lMjIlNUQlN0QlNUQlMkMlMjJ2YXJpYWJsZU5hbWUlMjIlM0ElMjJpbnRlciUyMiU3RCZtb2R1bGVzPUMlM0ElNUNjb2RlJTVDVGVsZWdyYW0tQXBwJTVDbWluaWFwcCU1Q3NyYyU1Q2FwcCU1Q2dsb2JhbHMuY3NzJm1vZHVsZXM9QyUzQSU1Q2NvZGUlNUNUZWxlZ3JhbS1BcHAlNUNtaW5pYXBwJTVDc3JjJTVDYXBwJTVDVG1hU0RLTG9hZGVyLnRzeCZzZXJ2ZXI9ZmFsc2UhIiwibWFwcGluZ3MiOiJBQUFBLDRqQkFBb1Q7QUFDcFQsb0tBQTJGO0FBQzNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8/ZDFmMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkM6XFxcXGNvZGVcXFxcVGVsZWdyYW0tQXBwXFxcXG1pbmlhcHBcXFxcbm9kZV9tb2R1bGVzXFxcXC5wbnBtXFxcXG5leHRAMTQuMC40X3JlYWN0LWRvbUAxOC4yLjBfcmVhY3RAMTguMi4wXFxcXG5vZGVfbW9kdWxlc1xcXFxuZXh0XFxcXGZvbnRcXFxcZ29vZ2xlXFxcXHRhcmdldC5jc3M/e1xcXCJwYXRoXFxcIjpcXFwic3JjXFxcXFxcXFxhcHBcXFxcXFxcXGxheW91dC50c3hcXFwiLFxcXCJpbXBvcnRcXFwiOlxcXCJJbnRlclxcXCIsXFxcImFyZ3VtZW50c1xcXCI6W3tcXFwic3Vic2V0c1xcXCI6W1xcXCJsYXRpblxcXCJdfV0sXFxcInZhcmlhYmxlTmFtZVxcXCI6XFxcImludGVyXFxcIn1cIik7XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkM6XFxcXGNvZGVcXFxcVGVsZWdyYW0tQXBwXFxcXG1pbmlhcHBcXFxcc3JjXFxcXGFwcFxcXFxnbG9iYWxzLmNzc1wiKTtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiQzpcXFxcY29kZVxcXFxUZWxlZ3JhbS1BcHBcXFxcbWluaWFwcFxcXFxzcmNcXFxcYXBwXFxcXFRtYVNES0xvYWRlci50c3hcIikiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5Ccode%5CTelegram-App%5Cminiapp%5Cnode_modules%5C.pnpm%5Cnext%4014.0.4_react-dom%4018.2.0_react%4018.2.0%5Cnode_modules%5Cnext%5Cfont%5Cgoogle%5Ctarget.css%3F%7B%22path%22%3A%22src%5C%5Capp%5C%5Clayout.tsx%22%2C%22import%22%3A%22Inter%22%2C%22arguments%22%3A%5B%7B%22subsets%22%3A%5B%22latin%22%5D%7D%5D%2C%22variableName%22%3A%22inter%22%7D&modules=C%3A%5Ccode%5CTelegram-App%5Cminiapp%5Csrc%5Capp%5Cglobals.css&modules=C%3A%5Ccode%5CTelegram-App%5Cminiapp%5Csrc%5Capp%5CTmaSDKLoader.tsx&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/globals.css":
/*!*****************************!*\
  !*** ./src/app/globals.css ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"9276ae47fb44\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvZ2xvYmFscy5jc3MiLCJtYXBwaW5ncyI6IjtBQUFBLCtEQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9hcHAvZ2xvYmFscy5jc3M/ZWViOCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjkyNzZhZTQ3ZmI0NFwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/TmaSDKLoader.tsx":
/*!**********************************!*\
  !*** ./src/app/TmaSDKLoader.tsx ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TmaSDKLoader: function() { return /* binding */ TmaSDKLoader; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var _tma_js_sdk_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tma.js/sdk-react */ \"(app-pages-browser)/./node_modules/.pnpm/@tma.js+sdk-react@1.1.0_@types+react@18.2.45_react@18.2.0/node_modules/@tma.js/sdk-react/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ TmaSDKLoader auto */ \n\nfunction SDKProviderError(param) {\n    let { error } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                className: \" text-center font-extrabold text-scin-base text-xl  \",\n                children: [\n                    \"Ууп что то пошло не так  ... \",\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                        fileName: \"C:\\\\code\\\\Telegram-App\\\\miniapp\\\\src\\\\app\\\\TmaSDKLoader.tsx\",\n                        lineNumber: 15,\n                        columnNumber: 30\n                    }, this),\n                    \"Если что приложение запукается только через telegram)\"\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\code\\\\Telegram-App\\\\miniapp\\\\src\\\\app\\\\TmaSDKLoader.tsx\",\n                lineNumber: 14,\n                columnNumber: 3\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"blockquote\", {\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"code\", {\n                    className: \" text-center font-extrabold text-scin-base text-xl  \",\n                    children: error instanceof Error ? error.message : JSON.stringify(error)\n                }, void 0, false, {\n                    fileName: \"C:\\\\code\\\\Telegram-App\\\\miniapp\\\\src\\\\app\\\\TmaSDKLoader.tsx\",\n                    lineNumber: 20,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"C:\\\\code\\\\Telegram-App\\\\miniapp\\\\src\\\\app\\\\TmaSDKLoader.tsx\",\n                lineNumber: 19,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\code\\\\Telegram-App\\\\miniapp\\\\src\\\\app\\\\TmaSDKLoader.tsx\",\n        lineNumber: 12,\n        columnNumber: 5\n    }, this);\n}\n_c = SDKProviderError;\nfunction SDKProviderLoading() {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n        className: \" text-center font-extrabold text-scin-base text-xl  \",\n        children: \"Загрузка ...\"\n    }, void 0, false, {\n        fileName: \"C:\\\\code\\\\Telegram-App\\\\miniapp\\\\src\\\\app\\\\TmaSDKLoader.tsx\",\n        lineNumber: 32,\n        columnNumber: 5\n    }, this);\n}\n_c1 = SDKProviderLoading;\nfunction SDKInitialState() {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n        className: \" text-center font-extrabold text-scin-base text-xl  \",\n        children: \"Ждем инициализации для начала ...\"\n    }, void 0, false, {\n        fileName: \"C:\\\\code\\\\Telegram-App\\\\miniapp\\\\src\\\\app\\\\TmaSDKLoader.tsx\",\n        lineNumber: 39,\n        columnNumber: 3\n    }, this);\n}\n_c2 = SDKInitialState;\n/**\r\n * Root component of the whole project.\r\n */ function TmaSDKLoader(param) {\n    let { children } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_tma_js_sdk_react__WEBPACK_IMPORTED_MODULE_1__.SDKProvider, {\n        options: {\n            cssVars: true,\n            acceptCustomStyles: true,\n            async: true\n        },\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_tma_js_sdk_react__WEBPACK_IMPORTED_MODULE_1__.DisplayGate, {\n            error: SDKProviderError,\n            loading: SDKProviderLoading,\n            initial: SDKInitialState,\n            children: children\n        }, void 0, false, {\n            fileName: \"C:\\\\code\\\\Telegram-App\\\\miniapp\\\\src\\\\app\\\\TmaSDKLoader.tsx\",\n            lineNumber: 50,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"C:\\\\code\\\\Telegram-App\\\\miniapp\\\\src\\\\app\\\\TmaSDKLoader.tsx\",\n        lineNumber: 49,\n        columnNumber: 5\n    }, this);\n}\n_c3 = TmaSDKLoader;\nvar _c, _c1, _c2, _c3;\n$RefreshReg$(_c, \"SDKProviderError\");\n$RefreshReg$(_c1, \"SDKProviderLoading\");\n$RefreshReg$(_c2, \"SDKInitialState\");\n$RefreshReg$(_c3, \"TmaSDKLoader\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvVG1hU0RLTG9hZGVyLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRzZEO0FBTTdELFNBQVNFLGlCQUFpQixLQUFnQztRQUFoQyxFQUFFQyxLQUFLLEVBQXlCLEdBQWhDO0lBQ3hCLHFCQUNFLDhEQUFDQzs7MEJBRUgsOERBQUNDO2dCQUFHQyxXQUFVOztvQkFBdUQ7a0NBQzFDLDhEQUFDQzs7Ozs7b0JBQUk7Ozs7Ozs7MEJBSTVCLDhEQUFDQzswQkFDQyw0RUFBQ0M7b0JBQUtILFdBQVU7OEJBQ2JILGlCQUFpQk8sUUFDZFAsTUFBTVEsT0FBTyxHQUNiQyxLQUFLQyxTQUFTLENBQUNWOzs7Ozs7Ozs7Ozs7Ozs7OztBQUs3QjtLQWxCU0Q7QUFvQlQsU0FBU1k7SUFDUCxxQkFDRSw4REFBQ1Q7UUFBR0MsV0FBVTtrQkFBdUQ7Ozs7OztBQUd6RTtNQUxTUTtBQU9ULFNBQVNDO0lBQ1AscUJBQ0EsOERBQUNWO1FBQUdDLFdBQVU7a0JBQXVEOzs7Ozs7QUFHdkU7TUFMU1M7QUFPVDs7Q0FFQyxHQUNNLFNBQVNDLGFBQWEsS0FBK0I7UUFBL0IsRUFBRUMsUUFBUSxFQUFxQixHQUEvQjtJQUMzQixxQkFDRSw4REFBQ2pCLDBEQUFXQTtRQUFDa0IsU0FBUztZQUFFQyxTQUFTO1lBQU1DLG9CQUFvQjtZQUFNQyxPQUFPO1FBQUs7a0JBQzNFLDRFQUFDcEIsMERBQVdBO1lBQ1ZFLE9BQU9EO1lBQ1BvQixTQUFTUjtZQUNUUyxTQUFTUjtzQkFFUkU7Ozs7Ozs7Ozs7O0FBSVQ7TUFaZ0JEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9hcHAvVG1hU0RLTG9hZGVyLnRzeD9lMjgxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcclxuXHJcbmltcG9ydCB0eXBlIHsgUHJvcHNXaXRoQ2hpbGRyZW4gfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFNES1Byb3ZpZGVyLCBEaXNwbGF5R2F0ZSB9IGZyb20gJ0B0bWEuanMvc2RrLXJlYWN0JztcclxuXHJcbmludGVyZmFjZSBTREtQcm92aWRlckVycm9yUHJvcHMge1xyXG4gIGVycm9yOiB1bmtub3duO1xyXG59XHJcblxyXG5mdW5jdGlvbiBTREtQcm92aWRlckVycm9yKHsgZXJyb3IgfTogU0RLUHJvdmlkZXJFcnJvclByb3BzKSB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXY+XHJcblxyXG4gIDxoMSBjbGFzc05hbWU9JyB0ZXh0LWNlbnRlciBmb250LWV4dHJhYm9sZCB0ZXh0LXNjaW4tYmFzZSB0ZXh0LXhsICAnPlxyXG7Qo9GD0L8g0YfRgtC+INGC0L4g0L/QvtGI0LvQviDQvdC1INGC0LDQuiAgLi4uIDxici8+XHJcbtCV0YHQu9C4INGH0YLQviDQv9GA0LjQu9C+0LbQtdC90LjQtSDQt9Cw0L/Rg9C60LDQtdGC0YHRjyDRgtC+0LvRjNC60L4g0YfQtdGA0LXQtyB0ZWxlZ3JhbSlcclxuXHJcbjwvaDE+XHJcbiAgICAgIDxibG9ja3F1b3RlPlxyXG4gICAgICAgIDxjb2RlIGNsYXNzTmFtZT0nIHRleHQtY2VudGVyIGZvbnQtZXh0cmFib2xkIHRleHQtc2Npbi1iYXNlIHRleHQteGwgICc+XHJcbiAgICAgICAgICB7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvclxyXG4gICAgICAgICAgICA/IGVycm9yLm1lc3NhZ2VcclxuICAgICAgICAgICAgOiBKU09OLnN0cmluZ2lmeShlcnJvcil9XHJcbiAgICAgICAgPC9jb2RlPlxyXG4gICAgICA8L2Jsb2NrcXVvdGU+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBTREtQcm92aWRlckxvYWRpbmcoKSB7XHJcbiAgcmV0dXJuKFxyXG4gICAgPGgxIGNsYXNzTmFtZT0nIHRleHQtY2VudGVyIGZvbnQtZXh0cmFib2xkIHRleHQtc2Npbi1iYXNlIHRleHQteGwgICc+XHJcbiAgICAgINCX0LDQs9GA0YPQt9C60LAgLi4uXHJcbiAgPC9oMT4pXHJcbn1cclxuXHJcbmZ1bmN0aW9uIFNES0luaXRpYWxTdGF0ZSgpIHtcclxuICByZXR1cm4oXHJcbiAgPGgxIGNsYXNzTmFtZT0nIHRleHQtY2VudGVyIGZvbnQtZXh0cmFib2xkIHRleHQtc2Npbi1iYXNlIHRleHQteGwgICc+XHJcbtCW0LTQtdC8INC40L3QuNGG0LjQsNC70LjQt9Cw0YbQuNC4INC00LvRjyDQvdCw0YfQsNC70LAgLi4uXHJcbjwvaDE+KVxyXG59XHJcblxyXG4vKipcclxuICogUm9vdCBjb21wb25lbnQgb2YgdGhlIHdob2xlIHByb2plY3QuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gVG1hU0RLTG9hZGVyKHsgY2hpbGRyZW4gfTogUHJvcHNXaXRoQ2hpbGRyZW4pIHtcclxuICByZXR1cm4gKFxyXG4gICAgPFNES1Byb3ZpZGVyIG9wdGlvbnM9e3sgY3NzVmFyczogdHJ1ZSwgYWNjZXB0Q3VzdG9tU3R5bGVzOiB0cnVlLCBhc3luYzogdHJ1ZSB9fT5cclxuICAgICAgPERpc3BsYXlHYXRlXHJcbiAgICAgICAgZXJyb3I9e1NES1Byb3ZpZGVyRXJyb3J9XHJcbiAgICAgICAgbG9hZGluZz17U0RLUHJvdmlkZXJMb2FkaW5nfVxyXG4gICAgICAgIGluaXRpYWw9e1NES0luaXRpYWxTdGF0ZX1cclxuICAgICAgPlxyXG4gICAgICAgIHtjaGlsZHJlbn1cclxuICAgICAgPC9EaXNwbGF5R2F0ZT5cclxuICAgIDwvU0RLUHJvdmlkZXI+XHJcbiAgKTtcclxufVxyXG4iXSwibmFtZXMiOlsiU0RLUHJvdmlkZXIiLCJEaXNwbGF5R2F0ZSIsIlNES1Byb3ZpZGVyRXJyb3IiLCJlcnJvciIsImRpdiIsImgxIiwiY2xhc3NOYW1lIiwiYnIiLCJibG9ja3F1b3RlIiwiY29kZSIsIkVycm9yIiwibWVzc2FnZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJTREtQcm92aWRlckxvYWRpbmciLCJTREtJbml0aWFsU3RhdGUiLCJUbWFTREtMb2FkZXIiLCJjaGlsZHJlbiIsIm9wdGlvbnMiLCJjc3NWYXJzIiwiYWNjZXB0Q3VzdG9tU3R5bGVzIiwiYXN5bmMiLCJsb2FkaW5nIiwiaW5pdGlhbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/TmaSDKLoader.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js":
/*!**********************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js ***!
  \**********************************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(()=>{\"use strict\";var e={686:(e,r,t)=>{var n=t(808);var i=Object.create(null);var a=typeof document===\"undefined\";var o=Array.prototype.forEach;function debounce(e,r){var t=0;return function(){var n=this;var i=arguments;var a=function functionCall(){return e.apply(n,i)};clearTimeout(t);t=setTimeout(a,r)}}function noop(){}function getCurrentScriptUrl(e){var r=i[e];if(!r){if(document.currentScript){r=document.currentScript.src}else{var t=document.getElementsByTagName(\"script\");var a=t[t.length-1];if(a){r=a.src}}i[e]=r}return function(e){if(!r){return null}var t=r.split(/([^\\\\/]+)\\.js$/);var i=t&&t[1];if(!i){return[r.replace(\".js\",\".css\")]}if(!e){return[r.replace(\".js\",\".css\")]}return e.split(\",\").map((function(e){var t=new RegExp(\"\".concat(i,\"\\\\.js$\"),\"g\");return n(r.replace(t,\"\".concat(e.replace(/{fileName}/g,i),\".css\")))}))}}function updateCss(e,r){if(!r){if(!e.href){return}r=e.href.split(\"?\")[0]}if(!isUrlRequest(r)){return}if(e.isLoaded===false){return}if(!r||!(r.indexOf(\".css\")>-1)){return}e.visited=true;var t=e.cloneNode();t.isLoaded=false;t.addEventListener(\"load\",(function(){if(t.isLoaded){return}t.isLoaded=true;e.parentNode.removeChild(e)}));t.addEventListener(\"error\",(function(){if(t.isLoaded){return}t.isLoaded=true;e.parentNode.removeChild(e)}));t.href=\"\".concat(r,\"?\").concat(Date.now());if(e.nextSibling){e.parentNode.insertBefore(t,e.nextSibling)}else{e.parentNode.appendChild(t)}}function getReloadUrl(e,r){var t;e=n(e,{stripWWW:false});r.some((function(n){if(e.indexOf(r)>-1){t=n}}));return t}function reloadStyle(e){if(!e){return false}var r=document.querySelectorAll(\"link\");var t=false;o.call(r,(function(r){if(!r.href){return}var n=getReloadUrl(r.href,e);if(!isUrlRequest(n)){return}if(r.visited===true){return}if(n){updateCss(r,n);t=true}}));return t}function reloadAll(){var e=document.querySelectorAll(\"link\");o.call(e,(function(e){if(e.visited===true){return}updateCss(e)}))}function isUrlRequest(e){if(!/^[a-zA-Z][a-zA-Z\\d+\\-.]*:/.test(e)){return false}return true}e.exports=function(e,r){if(a){console.log(\"no window.document found, will not HMR CSS\");return noop}var t=getCurrentScriptUrl(e);function update(){var e=t(r.filename);var n=reloadStyle(e);if(r.locals){console.log(\"[HMR] Detected local css modules. Reload all css\");reloadAll();return}if(n){console.log(\"[HMR] css reload %s\",e.join(\" \"))}else{console.log(\"[HMR] Reload all css\");reloadAll()}}return debounce(update,50)}},808:e=>{function normalizeUrl(e){return e.reduce((function(e,r){switch(r){case\"..\":e.pop();break;case\".\":break;default:e.push(r)}return e}),[]).join(\"/\")}e.exports=function(e){e=e.trim();if(/^data:/i.test(e)){return e}var r=e.indexOf(\"//\")!==-1?e.split(\"//\")[0]+\"//\":\"\";var t=e.replace(new RegExp(r,\"i\"),\"\").split(\"/\");var n=t[0].toLowerCase().replace(/\\.$/,\"\");t[0]=\"\";var i=normalizeUrl(t);return r+n+i}}};var r={};function __nccwpck_require__(t){var n=r[t];if(n!==undefined){return n.exports}var i=r[t]={exports:{}};var a=true;try{e[t](i,i.exports,__nccwpck_require__);a=false}finally{if(a)delete r[t]}return i.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var t=__nccwpck_require__(686);module.exports=t})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE0LjAuNF9yZWFjdC1kb21AMTguMi4wX3JlYWN0QDE4LjIuMC9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxhQUFhLE9BQU8sY0FBYyxhQUFhLDBCQUEwQixvQ0FBb0MsOEJBQThCLHVCQUF1QixRQUFRLGtCQUFrQixXQUFXLGdCQUFnQiw4QkFBOEIscUJBQXFCLGdCQUFnQixtQkFBbUIsaUJBQWlCLGdDQUFnQyxXQUFXLE9BQU8sMkJBQTJCLDZCQUE2QixLQUFLLDhDQUE4QyxvQkFBb0IsTUFBTSxTQUFTLE9BQU8sbUJBQW1CLE9BQU8sWUFBWSxnQ0FBZ0MsY0FBYyxPQUFPLGdDQUFnQyxPQUFPLGdDQUFnQyxxQ0FBcUMsNENBQTRDLDJDQUEyQyxTQUFTLGdCQUFnQixJQUFJLHdCQUF3QixPQUFPLFlBQVksT0FBTyx1QkFBdUIscUJBQXFCLE9BQU8sdUJBQXVCLE9BQU8sZ0NBQWdDLE9BQU8sZUFBZSxvQkFBb0IsaUJBQWlCLHNDQUFzQyxlQUFlLE9BQU8sZ0JBQWdCLDRCQUE0QixHQUFHLHVDQUF1QyxlQUFlLE9BQU8sZ0JBQWdCLDRCQUE0QixHQUFHLDJDQUEyQyxrQkFBa0IsMkNBQTJDLEtBQUssNkJBQTZCLDJCQUEyQixNQUFNLE9BQU8sZUFBZSxFQUFFLG9CQUFvQixvQkFBb0IsS0FBSyxHQUFHLFNBQVMsd0JBQXdCLE9BQU8sYUFBYSx3Q0FBd0MsWUFBWSxzQkFBc0IsWUFBWSxPQUFPLDZCQUE2QixxQkFBcUIsT0FBTyxxQkFBcUIsT0FBTyxNQUFNLGVBQWUsUUFBUSxHQUFHLFNBQVMscUJBQXFCLHdDQUF3QyxzQkFBc0IscUJBQXFCLE9BQU8sYUFBYSxHQUFHLHlCQUF5Qix5Q0FBeUMsYUFBYSxZQUFZLHdCQUF3QixNQUFNLDBEQUEwRCxZQUFZLDZCQUE2QixrQkFBa0Isb0JBQW9CLHFCQUFxQixhQUFhLGdFQUFnRSxZQUFZLE9BQU8sTUFBTSwrQ0FBK0MsS0FBSyxvQ0FBb0MsYUFBYSw0QkFBNEIsU0FBUyx5QkFBeUIsK0JBQStCLFVBQVUsaUJBQWlCLE1BQU0sY0FBYyxrQkFBa0IsU0FBUyxnQkFBZ0Isc0JBQXNCLFdBQVcsc0JBQXNCLFNBQVMsb0RBQW9ELGlEQUFpRCwyQ0FBMkMsUUFBUSxzQkFBc0IsZ0JBQWdCLFNBQVMsZ0NBQWdDLFdBQVcsa0JBQWtCLGlCQUFpQixZQUFZLFlBQVksV0FBVyxJQUFJLHNDQUFzQyxRQUFRLFFBQVEsaUJBQWlCLGlCQUFpQixtRUFBbUUsU0FBUyxLQUFLLCtCQUErQixpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL25leHRAMTQuMC40X3JlYWN0LWRvbUAxOC4yLjBfcmVhY3RAMTguMi4wL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzPzc1OTEiXSwic291cmNlc0NvbnRlbnQiOlsiKCgpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIGU9ezY4NjooZSxyLHQpPT57dmFyIG49dCg4MDgpO3ZhciBpPU9iamVjdC5jcmVhdGUobnVsbCk7dmFyIGE9dHlwZW9mIGRvY3VtZW50PT09XCJ1bmRlZmluZWRcIjt2YXIgbz1BcnJheS5wcm90b3R5cGUuZm9yRWFjaDtmdW5jdGlvbiBkZWJvdW5jZShlLHIpe3ZhciB0PTA7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIG49dGhpczt2YXIgaT1hcmd1bWVudHM7dmFyIGE9ZnVuY3Rpb24gZnVuY3Rpb25DYWxsKCl7cmV0dXJuIGUuYXBwbHkobixpKX07Y2xlYXJUaW1lb3V0KHQpO3Q9c2V0VGltZW91dChhLHIpfX1mdW5jdGlvbiBub29wKCl7fWZ1bmN0aW9uIGdldEN1cnJlbnRTY3JpcHRVcmwoZSl7dmFyIHI9aVtlXTtpZighcil7aWYoZG9jdW1lbnQuY3VycmVudFNjcmlwdCl7cj1kb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY31lbHNle3ZhciB0PWRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO3ZhciBhPXRbdC5sZW5ndGgtMV07aWYoYSl7cj1hLnNyY319aVtlXT1yfXJldHVybiBmdW5jdGlvbihlKXtpZighcil7cmV0dXJuIG51bGx9dmFyIHQ9ci5zcGxpdCgvKFteXFxcXC9dKylcXC5qcyQvKTt2YXIgaT10JiZ0WzFdO2lmKCFpKXtyZXR1cm5bci5yZXBsYWNlKFwiLmpzXCIsXCIuY3NzXCIpXX1pZighZSl7cmV0dXJuW3IucmVwbGFjZShcIi5qc1wiLFwiLmNzc1wiKV19cmV0dXJuIGUuc3BsaXQoXCIsXCIpLm1hcCgoZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IFJlZ0V4cChcIlwiLmNvbmNhdChpLFwiXFxcXC5qcyRcIiksXCJnXCIpO3JldHVybiBuKHIucmVwbGFjZSh0LFwiXCIuY29uY2F0KGUucmVwbGFjZSgve2ZpbGVOYW1lfS9nLGkpLFwiLmNzc1wiKSkpfSkpfX1mdW5jdGlvbiB1cGRhdGVDc3MoZSxyKXtpZighcil7aWYoIWUuaHJlZil7cmV0dXJufXI9ZS5ocmVmLnNwbGl0KFwiP1wiKVswXX1pZighaXNVcmxSZXF1ZXN0KHIpKXtyZXR1cm59aWYoZS5pc0xvYWRlZD09PWZhbHNlKXtyZXR1cm59aWYoIXJ8fCEoci5pbmRleE9mKFwiLmNzc1wiKT4tMSkpe3JldHVybn1lLnZpc2l0ZWQ9dHJ1ZTt2YXIgdD1lLmNsb25lTm9kZSgpO3QuaXNMb2FkZWQ9ZmFsc2U7dC5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLChmdW5jdGlvbigpe2lmKHQuaXNMb2FkZWQpe3JldHVybn10LmlzTG9hZGVkPXRydWU7ZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUpfSkpO3QuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsKGZ1bmN0aW9uKCl7aWYodC5pc0xvYWRlZCl7cmV0dXJufXQuaXNMb2FkZWQ9dHJ1ZTtlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSl9KSk7dC5ocmVmPVwiXCIuY29uY2F0KHIsXCI/XCIpLmNvbmNhdChEYXRlLm5vdygpKTtpZihlLm5leHRTaWJsaW5nKXtlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHQsZS5uZXh0U2libGluZyl9ZWxzZXtlLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQodCl9fWZ1bmN0aW9uIGdldFJlbG9hZFVybChlLHIpe3ZhciB0O2U9bihlLHtzdHJpcFdXVzpmYWxzZX0pO3Iuc29tZSgoZnVuY3Rpb24obil7aWYoZS5pbmRleE9mKHIpPi0xKXt0PW59fSkpO3JldHVybiB0fWZ1bmN0aW9uIHJlbG9hZFN0eWxlKGUpe2lmKCFlKXtyZXR1cm4gZmFsc2V9dmFyIHI9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImxpbmtcIik7dmFyIHQ9ZmFsc2U7by5jYWxsKHIsKGZ1bmN0aW9uKHIpe2lmKCFyLmhyZWYpe3JldHVybn12YXIgbj1nZXRSZWxvYWRVcmwoci5ocmVmLGUpO2lmKCFpc1VybFJlcXVlc3Qobikpe3JldHVybn1pZihyLnZpc2l0ZWQ9PT10cnVlKXtyZXR1cm59aWYobil7dXBkYXRlQ3NzKHIsbik7dD10cnVlfX0pKTtyZXR1cm4gdH1mdW5jdGlvbiByZWxvYWRBbGwoKXt2YXIgZT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwibGlua1wiKTtvLmNhbGwoZSwoZnVuY3Rpb24oZSl7aWYoZS52aXNpdGVkPT09dHJ1ZSl7cmV0dXJufXVwZGF0ZUNzcyhlKX0pKX1mdW5jdGlvbiBpc1VybFJlcXVlc3QoZSl7aWYoIS9eW2EtekEtWl1bYS16QS1aXFxkK1xcLS5dKjovLnRlc3QoZSkpe3JldHVybiBmYWxzZX1yZXR1cm4gdHJ1ZX1lLmV4cG9ydHM9ZnVuY3Rpb24oZSxyKXtpZihhKXtjb25zb2xlLmxvZyhcIm5vIHdpbmRvdy5kb2N1bWVudCBmb3VuZCwgd2lsbCBub3QgSE1SIENTU1wiKTtyZXR1cm4gbm9vcH12YXIgdD1nZXRDdXJyZW50U2NyaXB0VXJsKGUpO2Z1bmN0aW9uIHVwZGF0ZSgpe3ZhciBlPXQoci5maWxlbmFtZSk7dmFyIG49cmVsb2FkU3R5bGUoZSk7aWYoci5sb2NhbHMpe2NvbnNvbGUubG9nKFwiW0hNUl0gRGV0ZWN0ZWQgbG9jYWwgY3NzIG1vZHVsZXMuIFJlbG9hZCBhbGwgY3NzXCIpO3JlbG9hZEFsbCgpO3JldHVybn1pZihuKXtjb25zb2xlLmxvZyhcIltITVJdIGNzcyByZWxvYWQgJXNcIixlLmpvaW4oXCIgXCIpKX1lbHNle2NvbnNvbGUubG9nKFwiW0hNUl0gUmVsb2FkIGFsbCBjc3NcIik7cmVsb2FkQWxsKCl9fXJldHVybiBkZWJvdW5jZSh1cGRhdGUsNTApfX0sODA4OmU9PntmdW5jdGlvbiBub3JtYWxpemVVcmwoZSl7cmV0dXJuIGUucmVkdWNlKChmdW5jdGlvbihlLHIpe3N3aXRjaChyKXtjYXNlXCIuLlwiOmUucG9wKCk7YnJlYWs7Y2FzZVwiLlwiOmJyZWFrO2RlZmF1bHQ6ZS5wdXNoKHIpfXJldHVybiBlfSksW10pLmpvaW4oXCIvXCIpfWUuZXhwb3J0cz1mdW5jdGlvbihlKXtlPWUudHJpbSgpO2lmKC9eZGF0YTovaS50ZXN0KGUpKXtyZXR1cm4gZX12YXIgcj1lLmluZGV4T2YoXCIvL1wiKSE9PS0xP2Uuc3BsaXQoXCIvL1wiKVswXStcIi8vXCI6XCJcIjt2YXIgdD1lLnJlcGxhY2UobmV3IFJlZ0V4cChyLFwiaVwiKSxcIlwiKS5zcGxpdChcIi9cIik7dmFyIG49dFswXS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xcLiQvLFwiXCIpO3RbMF09XCJcIjt2YXIgaT1ub3JtYWxpemVVcmwodCk7cmV0dXJuIHIrbitpfX19O3ZhciByPXt9O2Z1bmN0aW9uIF9fbmNjd3Bja19yZXF1aXJlX18odCl7dmFyIG49clt0XTtpZihuIT09dW5kZWZpbmVkKXtyZXR1cm4gbi5leHBvcnRzfXZhciBpPXJbdF09e2V4cG9ydHM6e319O3ZhciBhPXRydWU7dHJ5e2VbdF0oaSxpLmV4cG9ydHMsX19uY2N3cGNrX3JlcXVpcmVfXyk7YT1mYWxzZX1maW5hbGx5e2lmKGEpZGVsZXRlIHJbdF19cmV0dXJuIGkuZXhwb3J0c31pZih0eXBlb2YgX19uY2N3cGNrX3JlcXVpcmVfXyE9PVwidW5kZWZpbmVkXCIpX19uY2N3cGNrX3JlcXVpcmVfXy5hYj1fX2Rpcm5hbWUrXCIvXCI7dmFyIHQ9X19uY2N3cGNrX3JlcXVpcmVfXyg2ODYpO21vZHVsZS5leHBvcnRzPXR9KSgpOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/next/font/google/target.css?{\"path\":\"src\\\\app\\\\layout.tsx\",\"import\":\"Inter\",\"arguments\":[{\"subsets\":[\"latin\"]}],\"variableName\":\"inter\"}":
/*!***************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/next/font/google/target.css?{"path":"src\\app\\layout.tsx","import":"Inter","arguments":[{"subsets":["latin"]}],"variableName":"inter"} ***!
  \***************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("// extracted by mini-css-extract-plugin\nmodule.exports = {\"style\":{\"fontFamily\":\"'__Inter_e66fe9', '__Inter_Fallback_e66fe9'\",\"fontStyle\":\"normal\"},\"className\":\"__className_e66fe9\"};\n    if(true) {\n      // 1703705633788\n      var cssReload = __webpack_require__(/*! ./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js\")(module.id, {\"publicPath\":\"/_next/\",\"esModule\":false,\"locals\":true});\n      module.hot.dispose(cssReload);\n      \n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE0LjAuNF9yZWFjdC1kb21AMTguMi4wX3JlYWN0QDE4LjIuMC9ub2RlX21vZHVsZXMvbmV4dC9mb250L2dvb2dsZS90YXJnZXQuY3NzP3tcInBhdGhcIjpcInNyY1xcXFxhcHBcXFxcbGF5b3V0LnRzeFwiLFwiaW1wb3J0XCI6XCJJbnRlclwiLFwiYXJndW1lbnRzXCI6W3tcInN1YnNldHNcIjpbXCJsYXRpblwiXX1dLFwidmFyaWFibGVOYW1lXCI6XCJpbnRlclwifSIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGtCQUFrQixTQUFTLGdGQUFnRjtBQUMzRyxPQUFPLElBQVU7QUFDakI7QUFDQSxzQkFBc0IsbUJBQU8sQ0FBQyxrVUFBK0ssY0FBYyxzREFBc0Q7QUFDalIsTUFBTSxVQUFVO0FBQ2hCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxNC4wLjRfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL25leHQvZm9udC9nb29nbGUvdGFyZ2V0LmNzcz8xZDUwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJzdHlsZVwiOntcImZvbnRGYW1pbHlcIjpcIidfX0ludGVyX2U2NmZlOScsICdfX0ludGVyX0ZhbGxiYWNrX2U2NmZlOSdcIixcImZvbnRTdHlsZVwiOlwibm9ybWFsXCJ9LFwiY2xhc3NOYW1lXCI6XCJfX2NsYXNzTmFtZV9lNjZmZTlcIn07XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTcwMzcwNTYzMzc4OFxuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCJDOi9jb2RlL1RlbGVncmFtLUFwcC9taW5pYXBwL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE0LjAuNF9yZWFjdC1kb21AMTguMi4wX3JlYWN0QDE4LjIuMC9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcInB1YmxpY1BhdGhcIjpcIi9fbmV4dC9cIixcImVzTW9kdWxlXCI6ZmFsc2UsXCJsb2NhbHNcIjp0cnVlfSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIFxuICAgIH1cbiAgIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/next/font/google/target.css?{\"path\":\"src\\\\app\\\\layout.tsx\",\"import\":\"Inter\",\"arguments\":[{\"subsets\":[\"latin\"]}],\"variableName\":\"inter\"}\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!*****************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \*****************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/index.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar REACT_CACHE_TYPE = Symbol.for('react.cache');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n\nvar REACT_CLIENT_REFERENCE$1 = Symbol.for('react.client.reference');\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n    case REACT_CACHE_TYPE:\n      {\n        return 'Cache';\n      }\n\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n\n    }\n  }\n\n  return null;\n}\n\nvar assign = Object.assign;\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n/**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */\n\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n  /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */\n\n\n  var RunInRootFrame = {\n    DetermineComponentFrameRoot: function () {\n      var control;\n\n      try {\n        // This should throw.\n        if (construct) {\n          // Something should be setting the props in the constructor.\n          var Fake = function () {\n            throw Error();\n          }; // $FlowFixMe[prop-missing]\n\n\n          Object.defineProperty(Fake.prototype, 'props', {\n            set: function () {\n              // We use a throwing setter instead of frozen or non-writable props\n              // because that won't throw in a non-strict mode function.\n              throw Error();\n            }\n          });\n\n          if (typeof Reflect === 'object' && Reflect.construct) {\n            // We construct a different control for this case to include any extra\n            // frames added by the construct call.\n            try {\n              Reflect.construct(Fake, []);\n            } catch (x) {\n              control = x;\n            }\n\n            Reflect.construct(fn, [], Fake);\n          } else {\n            try {\n              Fake.call();\n            } catch (x) {\n              control = x;\n            } // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\n            fn.call(Fake.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch (x) {\n            control = x;\n          } // TODO(luna): This will currently only throw if the function component\n          // tries to access React/ReactDOM/props. We should probably make this throw\n          // in simple components too\n\n\n          var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n          // component, which we don't yet support. Attach a noop catch handler to\n          // silence the error.\n          // TODO: Implement component stacks for async client components?\n\n          if (maybePromise && typeof maybePromise.catch === 'function') {\n            maybePromise.catch(function () {});\n          }\n        }\n      } catch (sample) {\n        // This is inlined manually because closure doesn't do it for us.\n        if (sample && control && typeof sample.stack === 'string') {\n          return [sample.stack, control.stack];\n        }\n      }\n\n      return [null, null];\n    }\n  }; // $FlowFixMe[prop-missing]\n\n  RunInRootFrame.DetermineComponentFrameRoot.displayName = 'DetermineComponentFrameRoot';\n  var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, 'name'); // Before ES6, the `name` property was not configurable.\n\n  if (namePropDescriptor && namePropDescriptor.configurable) {\n    // V8 utilizes a function's `name` property when generating a stack trace.\n    Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // Configurable properties can be updated even if its writable descriptor\n    // is set to `false`.\n    // $FlowFixMe[cannot-write]\n    'name', {\n      value: 'DetermineComponentFrameRoot'\n    });\n  }\n\n  try {\n    var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(),\n        sampleStack = _RunInRootFrame$Deter[0],\n        controlStack = _RunInRootFrame$Deter[1];\n\n    if (sampleStack && controlStack) {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sampleStack.split('\\n');\n      var controlLines = controlStack.split('\\n');\n      var s = 0;\n      var c = 0;\n\n      while (s < sampleLines.length && !sampleLines[s].includes('DetermineComponentFrameRoot')) {\n        s++;\n      }\n\n      while (c < controlLines.length && !controlLines[c].includes('DetermineComponentFrameRoot')) {\n        c++;\n      } // We couldn't find our intentionally injected common root frame, attempt\n      // to find another common root frame by search from the bottom of the\n      // control stack...\n\n\n      if (s === sampleLines.length || c === controlLines.length) {\n        s = sampleLines.length - 1;\n        c = controlLines.length - 1;\n\n        while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n          // We expect at least one stack frame to be shared.\n          // Typically this will be the root most one. However, stack frames may be\n          // cut off due to maximum stack limits. In this case, one maybe cut off\n          // earlier than the other. We assume that the sample is longer or the same\n          // and there for cut off earlier. So we should find the root most frame in\n          // the sample somewhere in the control.\n          c--;\n        }\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                if (true) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\n// $FlowFixMe[method-unbinding]\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement$1(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n    var has = Function.call.bind(hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement$1(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement$1(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement$1(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement$1(null);\n        }\n      }\n    }\n  }\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n/*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object'; // $FlowFixMe[incompatible-return]\n\n    return type;\n  }\n} // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner$1.current && self && ReactCurrentOwner$1.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner$1.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingRef = function () {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingRef.isReactWarning = true;\n    Object.defineProperty(props, 'ref', {\n      get: warnAboutAccessingRef,\n      configurable: true\n    });\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nfunction ReactElement(type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n}\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV$1(type, config, maybeKey, source, self) {\n  {\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      ref = config.ref;\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    return ReactElement(type, key, ref, self, source, ReactCurrentOwner$1.current, props);\n  }\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\nvar REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference');\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  {\n    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  {\n    if (source !== undefined) {\n      var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n      var lineNumber = source.lineNumber;\n      return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n    }\n\n    return '';\n  }\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement(null);\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object' || !node) {\n      return;\n    }\n\n    if (node.$$typeof === REACT_CLIENT_REFERENCE) ; else if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n      return;\n    }\n\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      var name = getComponentNameFromType(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n      var _name = getComponentNameFromType(type);\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement(null);\n    }\n  }\n}\n\nvar didWarnAboutKeySpread = {};\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n  {\n    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n\n    if (!validType) {\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var sourceInfo = getSourceInfoErrorAddendum(source);\n\n      if (sourceInfo) {\n        info += sourceInfo;\n      } else {\n        info += getDeclarationErrorAddendum();\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n\n    var element = jsxDEV$1(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n\n    if (element == null) {\n      return element;\n    } // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing errors.\n    // We don't want exception behavior to differ between dev and prod.\n    // (Rendering will throw with a helpful message and as soon as the type is\n    // fixed, the key warnings will appear.)\n\n\n    if (validType) {\n      var children = props.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    }\n\n    if (hasOwnProperty.call(props, 'key')) {\n      var componentName = getComponentNameFromType(type);\n      var keys = Object.keys(props).filter(function (k) {\n        return k !== 'key';\n      });\n      var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';\n\n      if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n        var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';\n\n        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + '  let props = %s;\\n' + '  <%s {...props} />\\n' + 'React keys must be passed directly to JSX without using spread:\\n' + '  let props = %s;\\n' + '  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);\n\n        didWarnAboutKeySpread[componentName + beforeExample] = true;\n      }\n    }\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    } else {\n      validatePropTypes(element);\n    }\n\n    return element;\n  }\n} // These two functions exist to still get child warnings in dev\n\nvar jsxDEV = jsxWithValidation ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsxDEV = jsxDEV;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \*******************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE0LjAuNF9yZWFjdC1kb21AMTguMi4wX3JlYWN0QDE4LjIuMC9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJLEtBQXFDLEVBQUUsRUFFMUMsQ0FBQztBQUNGLEVBQUUsMlBBQXNFO0FBQ3hFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE0LjAuNF9yZWFjdC1kb21AMTguMi4wX3JlYWN0QDE4LjIuMC9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcz81NDRiIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@tma.js+sdk-react@1.1.0_@types+react@18.2.45_react@18.2.0/node_modules/@tma.js/sdk-react/dist/index.mjs":
/*!************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tma.js+sdk-react@1.1.0_@types+react@18.2.45_react@18.2.0/node_modules/@tma.js/sdk-react/dist/index.mjs ***!
  \************************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DisplayGate: function() { return /* binding */ pt; },\n/* harmony export */   SDKProvider: function() { return /* binding */ G; },\n/* harmony export */   useBackButton: function() { return /* binding */ k; },\n/* harmony export */   useClosingBehavior: function() { return /* binding */ x; },\n/* harmony export */   useCloudStorage: function() { return /* binding */ I; },\n/* harmony export */   useHapticFeedback: function() { return /* binding */ O; },\n/* harmony export */   useInitData: function() { return /* binding */ A; },\n/* harmony export */   useInitDataRaw: function() { return /* binding */ M; },\n/* harmony export */   useInvoice: function() { return /* binding */ j; },\n/* harmony export */   useLaunchParams: function() { return /* binding */ F; },\n/* harmony export */   useMainButton: function() { return /* binding */ H; },\n/* harmony export */   useMiniApp: function() { return /* binding */ K; },\n/* harmony export */   usePopup: function() { return /* binding */ L; },\n/* harmony export */   usePostEvent: function() { return /* binding */ U; },\n/* harmony export */   useQRScanner: function() { return /* binding */ W; },\n/* harmony export */   useSDKContext: function() { return /* binding */ w; },\n/* harmony export */   useSettingsButton: function() { return /* binding */ V; },\n/* harmony export */   useThemeParams: function() { return /* binding */ $; },\n/* harmony export */   useUtils: function() { return /* binding */ q; },\n/* harmony export */   useViewport: function() { return /* binding */ Q; },\n/* harmony export */   withBackButton: function() { return /* binding */ J; },\n/* harmony export */   withClosingBehavior: function() { return /* binding */ X; },\n/* harmony export */   withCloudStorage: function() { return /* binding */ Y; },\n/* harmony export */   withHapticFeedback: function() { return /* binding */ Z; },\n/* harmony export */   withInitData: function() { return /* binding */ _; },\n/* harmony export */   withInitDataRaw: function() { return /* binding */ tt; },\n/* harmony export */   withInvoice: function() { return /* binding */ et; },\n/* harmony export */   withLaunchParams: function() { return /* binding */ nt; },\n/* harmony export */   withMainButton: function() { return /* binding */ ot; },\n/* harmony export */   withMiniApp: function() { return /* binding */ rt; },\n/* harmony export */   withPopup: function() { return /* binding */ it; },\n/* harmony export */   withPostEvent: function() { return /* binding */ ct; },\n/* harmony export */   withQRScanner: function() { return /* binding */ at; },\n/* harmony export */   withSDKContext: function() { return /* binding */ N; },\n/* harmony export */   withSettingsButton: function() { return /* binding */ st; },\n/* harmony export */   withThemeParams: function() { return /* binding */ ut; },\n/* harmony export */   withUtils: function() { return /* binding */ lt; },\n/* harmony export */   withViewport: function() { return /* binding */ ht; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _tma_js_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tma.js/sdk */ \"(app-pages-browser)/./node_modules/.pnpm/@tma.js+sdk@1.2.0/node_modules/@tma.js/sdk/dist/index.mjs\");\n\n\nfunction o(t, e) {\n  return (i) => {\n    function n(s) {\n      const l = {\n        ...s,\n        [t]: e()\n      };\n      return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(i, { ...l });\n    }\n    return Object.defineProperty(n, \"name\", {\n      value: `With${t[0].toUpperCase()}${t.slice(1)}`\n    }), n;\n  };\n}\nconst u = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n  loading: !1\n});\nu.displayName = \"SDKContext\";\nfunction C({ options: t, children: e }) {\n  const [i, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [s, l] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), [h, D] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    n(!0), (0,_tma_js_sdk__WEBPACK_IMPORTED_MODULE_1__.init)({ ...t, async: !0 }).then(D).catch(l).finally(() => n(!1));\n  }, []);\n  const S = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    const p = { loading: i };\n    return s && (p.error = s), h && (p.initResult = h), p;\n  }, [i, h, s]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(u.Provider, { value: S }, e);\n}\nfunction R({ options: t = {}, children: e }) {\n  const i = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    const n = { loading: !1 };\n    try {\n      n.initResult = (0,_tma_js_sdk__WEBPACK_IMPORTED_MODULE_1__.init)({ ...t, async: !1 });\n    } catch (s) {\n      n.error = s;\n    }\n    return n;\n  }, []);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(u.Provider, { value: i }, e);\n}\nfunction G(t) {\n  var e;\n  return (e = t.options) != null && e.async ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(C, { ...t }) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(R, { ...t });\n}\nfunction w() {\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(u);\n}\nfunction P(t) {\n  const { initResult: e } = w();\n  if (!e)\n    throw new Error(`Unable to get init result key \"${t}\" as long as SDK is not initialized`);\n  return e[t];\n}\nfunction m(t) {\n  return Object.create(\n    Object.getPrototypeOf(t),\n    Object.getOwnPropertyDescriptors(t)\n  );\n}\nfunction b(t) {\n  const e = P(t), [i, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(m(e));\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => e.on(\"change\", () => {\n    n(m(e));\n  }), [e]), i;\n}\nfunction N(t) {\n  return function(i) {\n    const n = {\n      ...i,\n      sdk: w()\n    };\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(t, { ...n });\n  };\n}\nfunction r(t, e) {\n  return e ? () => b(t) : () => P(t);\n}\nconst k = r(\"backButton\", !0), J = o(\"backButton\", k), x = r(\"closingBehavior\", !0), X = o(\"closingBehavior\", x), I = r(\"cloudStorage\"), Y = o(\"cloudStorage\", I), O = r(\"hapticFeedback\"), Z = o(\"hapticFeedback\", O), A = r(\"initData\"), _ = o(\"initData\", A), M = r(\"initDataRaw\"), tt = o(\"initDataRaw\", M), j = r(\"invoice\", !0), et = o(\"invoice\", j);\nfunction F() {\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => (0,_tma_js_sdk__WEBPACK_IMPORTED_MODULE_1__.retrieveLaunchData)().launchParams, []);\n}\nfunction nt(t) {\n  return function(i) {\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(t, { ...i, launchParams: F() });\n  };\n}\nconst H = r(\"mainButton\", !0), ot = o(\"mainButton\", H), K = r(\"miniApp\", !0), rt = o(\"miniApp\", K), L = r(\"popup\", !0), it = o(\"popup\", L), U = r(\"postEvent\"), ct = o(\"postEvent\", U), V = r(\"settingsButton\", !0), st = o(\"settingsButton\", V), W = r(\"qrScanner\", !0), at = o(\"qrScanner\", W), $ = r(\"themeParams\", !0), ut = o(\"themeParams\", $), q = r(\"utils\"), lt = o(\"utils\", q), Q = r(\"viewport\", !0), ht = o(\"viewport\", Q);\nfunction d(t, e = {}) {\n  return typeof t == \"function\" ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(t, { ...e }) : t;\n}\nfunction pt(t) {\n  const { loading: e, initResult: i, error: n } = w();\n  return i ? t.children : n ? d(t.error, { error: n }) : d(e ? t.loading : t.initial);\n}\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AdG1hLmpzK3Nkay1yZWFjdEAxLjEuMF9AdHlwZXMrcmVhY3RAMTguMi40NV9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL0B0bWEuanMvc2RrLXJlYWN0L2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNEc7QUFDM0M7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsZ0RBQWUsTUFBTSxNQUFNO0FBQ3hEO0FBQ0E7QUFDQSxvQkFBb0IsbUJBQW1CLEVBQUUsV0FBVztBQUNwRCxLQUFLO0FBQ0w7QUFDQTtBQUNBLFVBQVUsb0RBQUM7QUFDWDtBQUNBLENBQUM7QUFDRDtBQUNBLGFBQWEseUJBQXlCO0FBQ3RDLGlCQUFpQiwrQ0FBQyxlQUFlLCtDQUFDLGFBQWEsK0NBQUM7QUFDaEQsRUFBRSxnREFBQztBQUNILFdBQVcsaURBQUMsR0FBRyxpQkFBaUI7QUFDaEMsR0FBRztBQUNILFlBQVksOENBQUM7QUFDYixnQkFBZ0I7QUFDaEI7QUFDQSxHQUFHO0FBQ0gseUJBQXlCLGdEQUFlLGVBQWUsVUFBVTtBQUNqRTtBQUNBLGFBQWEsZUFBZSxlQUFlO0FBQzNDLFlBQVksOENBQUM7QUFDYixnQkFBZ0I7QUFDaEI7QUFDQSxxQkFBcUIsaURBQUMsR0FBRyxpQkFBaUI7QUFDMUMsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCx5QkFBeUIsZ0RBQWUsZUFBZSxVQUFVO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RCxnREFBZSxNQUFNLE1BQU0sb0JBQW9CLGdEQUFlLE1BQU0sTUFBTTtBQUN4STtBQUNBO0FBQ0EsU0FBUyxpREFBQztBQUNWO0FBQ0E7QUFDQSxVQUFVLGdCQUFnQjtBQUMxQjtBQUNBLHNEQUFzRCxFQUFFO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiwrQ0FBQztBQUM1QixTQUFTLGdEQUFDO0FBQ1Y7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsZ0RBQWUsTUFBTSxNQUFNO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyw4Q0FBQyxPQUFPLCtEQUFDO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixnREFBZSxNQUFNLHlCQUF5QjtBQUN6RTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIsa0RBQWtELGdEQUFlLE1BQU0sTUFBTTtBQUM3RTtBQUNBO0FBQ0EsVUFBVSxzQ0FBc0M7QUFDaEQsMkNBQTJDLFVBQVU7QUFDckQ7QUF3Q0U7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRtYS5qcytzZGstcmVhY3RAMS4xLjBfQHR5cGVzK3JlYWN0QDE4LjIuNDVfcmVhY3RAMTguMi4wL25vZGVfbW9kdWxlcy9AdG1hLmpzL3Nkay1yZWFjdC9kaXN0L2luZGV4Lm1qcz83YjMwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjLCB7IGNyZWF0ZUNvbnRleHQgYXMgQiwgdXNlU3RhdGUgYXMgYSwgdXNlRWZmZWN0IGFzIGcsIHVzZU1lbW8gYXMgZiwgdXNlQ29udGV4dCBhcyBFIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBpbml0IGFzIHYsIHJldHJpZXZlTGF1bmNoRGF0YSBhcyB5IH0gZnJvbSBcIkB0bWEuanMvc2RrXCI7XG5mdW5jdGlvbiBvKHQsIGUpIHtcbiAgcmV0dXJuIChpKSA9PiB7XG4gICAgZnVuY3Rpb24gbihzKSB7XG4gICAgICBjb25zdCBsID0ge1xuICAgICAgICAuLi5zLFxuICAgICAgICBbdF06IGUoKVxuICAgICAgfTtcbiAgICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gYy5jcmVhdGVFbGVtZW50KGksIHsgLi4ubCB9KTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCBcIm5hbWVcIiwge1xuICAgICAgdmFsdWU6IGBXaXRoJHt0WzBdLnRvVXBwZXJDYXNlKCl9JHt0LnNsaWNlKDEpfWBcbiAgICB9KSwgbjtcbiAgfTtcbn1cbmNvbnN0IHUgPSBCKHtcbiAgbG9hZGluZzogITFcbn0pO1xudS5kaXNwbGF5TmFtZSA9IFwiU0RLQ29udGV4dFwiO1xuZnVuY3Rpb24gQyh7IG9wdGlvbnM6IHQsIGNoaWxkcmVuOiBlIH0pIHtcbiAgY29uc3QgW2ksIG5dID0gYSghMSksIFtzLCBsXSA9IGEoKSwgW2gsIERdID0gYSgpO1xuICBnKCgpID0+IHtcbiAgICBuKCEwKSwgdih7IC4uLnQsIGFzeW5jOiAhMCB9KS50aGVuKEQpLmNhdGNoKGwpLmZpbmFsbHkoKCkgPT4gbighMSkpO1xuICB9LCBbXSk7XG4gIGNvbnN0IFMgPSBmKCgpID0+IHtcbiAgICBjb25zdCBwID0geyBsb2FkaW5nOiBpIH07XG4gICAgcmV0dXJuIHMgJiYgKHAuZXJyb3IgPSBzKSwgaCAmJiAocC5pbml0UmVzdWx0ID0gaCksIHA7XG4gIH0sIFtpLCBoLCBzXSk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gYy5jcmVhdGVFbGVtZW50KHUuUHJvdmlkZXIsIHsgdmFsdWU6IFMgfSwgZSk7XG59XG5mdW5jdGlvbiBSKHsgb3B0aW9uczogdCA9IHt9LCBjaGlsZHJlbjogZSB9KSB7XG4gIGNvbnN0IGkgPSBmKCgpID0+IHtcbiAgICBjb25zdCBuID0geyBsb2FkaW5nOiAhMSB9O1xuICAgIHRyeSB7XG4gICAgICBuLmluaXRSZXN1bHQgPSB2KHsgLi4udCwgYXN5bmM6ICExIH0pO1xuICAgIH0gY2F0Y2ggKHMpIHtcbiAgICAgIG4uZXJyb3IgPSBzO1xuICAgIH1cbiAgICByZXR1cm4gbjtcbiAgfSwgW10pO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIGMuY3JlYXRlRWxlbWVudCh1LlByb3ZpZGVyLCB7IHZhbHVlOiBpIH0sIGUpO1xufVxuZnVuY3Rpb24gRyh0KSB7XG4gIHZhciBlO1xuICByZXR1cm4gKGUgPSB0Lm9wdGlvbnMpICE9IG51bGwgJiYgZS5hc3luYyA/IC8qIEBfX1BVUkVfXyAqLyBjLmNyZWF0ZUVsZW1lbnQoQywgeyAuLi50IH0pIDogLyogQF9fUFVSRV9fICovIGMuY3JlYXRlRWxlbWVudChSLCB7IC4uLnQgfSk7XG59XG5mdW5jdGlvbiB3KCkge1xuICByZXR1cm4gRSh1KTtcbn1cbmZ1bmN0aW9uIFAodCkge1xuICBjb25zdCB7IGluaXRSZXN1bHQ6IGUgfSA9IHcoKTtcbiAgaWYgKCFlKVxuICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIGdldCBpbml0IHJlc3VsdCBrZXkgXCIke3R9XCIgYXMgbG9uZyBhcyBTREsgaXMgbm90IGluaXRpYWxpemVkYCk7XG4gIHJldHVybiBlW3RdO1xufVxuZnVuY3Rpb24gbSh0KSB7XG4gIHJldHVybiBPYmplY3QuY3JlYXRlKFxuICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZih0KSxcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh0KVxuICApO1xufVxuZnVuY3Rpb24gYih0KSB7XG4gIGNvbnN0IGUgPSBQKHQpLCBbaSwgbl0gPSBhKG0oZSkpO1xuICByZXR1cm4gZygoKSA9PiBlLm9uKFwiY2hhbmdlXCIsICgpID0+IHtcbiAgICBuKG0oZSkpO1xuICB9KSwgW2VdKSwgaTtcbn1cbmZ1bmN0aW9uIE4odCkge1xuICByZXR1cm4gZnVuY3Rpb24oaSkge1xuICAgIGNvbnN0IG4gPSB7XG4gICAgICAuLi5pLFxuICAgICAgc2RrOiB3KClcbiAgICB9O1xuICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gYy5jcmVhdGVFbGVtZW50KHQsIHsgLi4ubiB9KTtcbiAgfTtcbn1cbmZ1bmN0aW9uIHIodCwgZSkge1xuICByZXR1cm4gZSA/ICgpID0+IGIodCkgOiAoKSA9PiBQKHQpO1xufVxuY29uc3QgayA9IHIoXCJiYWNrQnV0dG9uXCIsICEwKSwgSiA9IG8oXCJiYWNrQnV0dG9uXCIsIGspLCB4ID0gcihcImNsb3NpbmdCZWhhdmlvclwiLCAhMCksIFggPSBvKFwiY2xvc2luZ0JlaGF2aW9yXCIsIHgpLCBJID0gcihcImNsb3VkU3RvcmFnZVwiKSwgWSA9IG8oXCJjbG91ZFN0b3JhZ2VcIiwgSSksIE8gPSByKFwiaGFwdGljRmVlZGJhY2tcIiksIFogPSBvKFwiaGFwdGljRmVlZGJhY2tcIiwgTyksIEEgPSByKFwiaW5pdERhdGFcIiksIF8gPSBvKFwiaW5pdERhdGFcIiwgQSksIE0gPSByKFwiaW5pdERhdGFSYXdcIiksIHR0ID0gbyhcImluaXREYXRhUmF3XCIsIE0pLCBqID0gcihcImludm9pY2VcIiwgITApLCBldCA9IG8oXCJpbnZvaWNlXCIsIGopO1xuZnVuY3Rpb24gRigpIHtcbiAgcmV0dXJuIGYoKCkgPT4geSgpLmxhdW5jaFBhcmFtcywgW10pO1xufVxuZnVuY3Rpb24gbnQodCkge1xuICByZXR1cm4gZnVuY3Rpb24oaSkge1xuICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gYy5jcmVhdGVFbGVtZW50KHQsIHsgLi4uaSwgbGF1bmNoUGFyYW1zOiBGKCkgfSk7XG4gIH07XG59XG5jb25zdCBIID0gcihcIm1haW5CdXR0b25cIiwgITApLCBvdCA9IG8oXCJtYWluQnV0dG9uXCIsIEgpLCBLID0gcihcIm1pbmlBcHBcIiwgITApLCBydCA9IG8oXCJtaW5pQXBwXCIsIEspLCBMID0gcihcInBvcHVwXCIsICEwKSwgaXQgPSBvKFwicG9wdXBcIiwgTCksIFUgPSByKFwicG9zdEV2ZW50XCIpLCBjdCA9IG8oXCJwb3N0RXZlbnRcIiwgVSksIFYgPSByKFwic2V0dGluZ3NCdXR0b25cIiwgITApLCBzdCA9IG8oXCJzZXR0aW5nc0J1dHRvblwiLCBWKSwgVyA9IHIoXCJxclNjYW5uZXJcIiwgITApLCBhdCA9IG8oXCJxclNjYW5uZXJcIiwgVyksICQgPSByKFwidGhlbWVQYXJhbXNcIiwgITApLCB1dCA9IG8oXCJ0aGVtZVBhcmFtc1wiLCAkKSwgcSA9IHIoXCJ1dGlsc1wiKSwgbHQgPSBvKFwidXRpbHNcIiwgcSksIFEgPSByKFwidmlld3BvcnRcIiwgITApLCBodCA9IG8oXCJ2aWV3cG9ydFwiLCBRKTtcbmZ1bmN0aW9uIGQodCwgZSA9IHt9KSB7XG4gIHJldHVybiB0eXBlb2YgdCA9PSBcImZ1bmN0aW9uXCIgPyAvKiBAX19QVVJFX18gKi8gYy5jcmVhdGVFbGVtZW50KHQsIHsgLi4uZSB9KSA6IHQ7XG59XG5mdW5jdGlvbiBwdCh0KSB7XG4gIGNvbnN0IHsgbG9hZGluZzogZSwgaW5pdFJlc3VsdDogaSwgZXJyb3I6IG4gfSA9IHcoKTtcbiAgcmV0dXJuIGkgPyB0LmNoaWxkcmVuIDogbiA/IGQodC5lcnJvciwgeyBlcnJvcjogbiB9KSA6IGQoZSA/IHQubG9hZGluZyA6IHQuaW5pdGlhbCk7XG59XG5leHBvcnQge1xuICBwdCBhcyBEaXNwbGF5R2F0ZSxcbiAgRyBhcyBTREtQcm92aWRlcixcbiAgayBhcyB1c2VCYWNrQnV0dG9uLFxuICB4IGFzIHVzZUNsb3NpbmdCZWhhdmlvcixcbiAgSSBhcyB1c2VDbG91ZFN0b3JhZ2UsXG4gIE8gYXMgdXNlSGFwdGljRmVlZGJhY2ssXG4gIEEgYXMgdXNlSW5pdERhdGEsXG4gIE0gYXMgdXNlSW5pdERhdGFSYXcsXG4gIGogYXMgdXNlSW52b2ljZSxcbiAgRiBhcyB1c2VMYXVuY2hQYXJhbXMsXG4gIEggYXMgdXNlTWFpbkJ1dHRvbixcbiAgSyBhcyB1c2VNaW5pQXBwLFxuICBMIGFzIHVzZVBvcHVwLFxuICBVIGFzIHVzZVBvc3RFdmVudCxcbiAgVyBhcyB1c2VRUlNjYW5uZXIsXG4gIHcgYXMgdXNlU0RLQ29udGV4dCxcbiAgViBhcyB1c2VTZXR0aW5nc0J1dHRvbixcbiAgJCBhcyB1c2VUaGVtZVBhcmFtcyxcbiAgcSBhcyB1c2VVdGlscyxcbiAgUSBhcyB1c2VWaWV3cG9ydCxcbiAgSiBhcyB3aXRoQmFja0J1dHRvbixcbiAgWCBhcyB3aXRoQ2xvc2luZ0JlaGF2aW9yLFxuICBZIGFzIHdpdGhDbG91ZFN0b3JhZ2UsXG4gIFogYXMgd2l0aEhhcHRpY0ZlZWRiYWNrLFxuICBfIGFzIHdpdGhJbml0RGF0YSxcbiAgdHQgYXMgd2l0aEluaXREYXRhUmF3LFxuICBldCBhcyB3aXRoSW52b2ljZSxcbiAgbnQgYXMgd2l0aExhdW5jaFBhcmFtcyxcbiAgb3QgYXMgd2l0aE1haW5CdXR0b24sXG4gIHJ0IGFzIHdpdGhNaW5pQXBwLFxuICBpdCBhcyB3aXRoUG9wdXAsXG4gIGN0IGFzIHdpdGhQb3N0RXZlbnQsXG4gIGF0IGFzIHdpdGhRUlNjYW5uZXIsXG4gIE4gYXMgd2l0aFNES0NvbnRleHQsXG4gIHN0IGFzIHdpdGhTZXR0aW5nc0J1dHRvbixcbiAgdXQgYXMgd2l0aFRoZW1lUGFyYW1zLFxuICBsdCBhcyB3aXRoVXRpbHMsXG4gIGh0IGFzIHdpdGhWaWV3cG9ydFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@tma.js+sdk-react@1.1.0_@types+react@18.2.45_react@18.2.0/node_modules/@tma.js/sdk-react/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@tma.js+sdk@1.2.0/node_modules/@tma.js/sdk/dist/index.mjs":
/*!**************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tma.js+sdk@1.2.0/node_modules/@tma.js/sdk/dist/index.mjs ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BackButton: function() { return /* binding */ ve; },\n/* harmony export */   ClosingBehavior: function() { return /* binding */ ke; },\n/* harmony export */   CloudStorage: function() { return /* binding */ xe; },\n/* harmony export */   HapticFeedback: function() { return /* binding */ qe; },\n/* harmony export */   HashNavigator: function() { return /* binding */ Lt; },\n/* harmony export */   InitData: function() { return /* binding */ Ut; },\n/* harmony export */   Invoice: function() { return /* binding */ ze; },\n/* harmony export */   MainButton: function() { return /* binding */ Ie; },\n/* harmony export */   MethodUnsupportedError: function() { return /* binding */ tt; },\n/* harmony export */   MiniApp: function() { return /* binding */ Te; },\n/* harmony export */   Navigator: function() { return /* binding */ Xe; },\n/* harmony export */   ParameterUnsupportedError: function() { return /* binding */ et; },\n/* harmony export */   Popup: function() { return /* binding */ Qe; },\n/* harmony export */   QRScanner: function() { return /* binding */ Ze; },\n/* harmony export */   SettingsButton: function() { return /* binding */ We; },\n/* harmony export */   ThemeParams: function() { return /* binding */ Ft; },\n/* harmony export */   TimeoutError: function() { return /* binding */ J; },\n/* harmony export */   Utils: function() { return /* binding */ Ke; },\n/* harmony export */   Viewport: function() { return /* binding */ G; },\n/* harmony export */   chatParser: function() { return /* binding */ Ht; },\n/* harmony export */   classNames: function() { return /* binding */ Pe; },\n/* harmony export */   compareVersions: function() { return /* binding */ me; },\n/* harmony export */   createPostEvent: function() { return /* binding */ ye; },\n/* harmony export */   getHash: function() { return /* binding */ pr; },\n/* harmony export */   init: function() { return /* binding */ ur; },\n/* harmony export */   initDataParser: function() { return /* binding */ wt; },\n/* harmony export */   invokeCustomMethod: function() { return /* binding */ N; },\n/* harmony export */   isColorDark: function() { return /* binding */ ft; },\n/* harmony export */   isIframe: function() { return /* binding */ vt; },\n/* harmony export */   isRGB: function() { return /* binding */ lt; },\n/* harmony export */   isRGBShort: function() { return /* binding */ Ot; },\n/* harmony export */   isRecord: function() { return /* binding */ H; },\n/* harmony export */   isTMA: function() { return /* binding */ sr; },\n/* harmony export */   isTimeoutError: function() { return /* binding */ cr; },\n/* harmony export */   launchParamsParser: function() { return /* binding */ mt; },\n/* harmony export */   mergeClassNames: function() { return /* binding */ hr; },\n/* harmony export */   off: function() { return /* binding */ I; },\n/* harmony export */   on: function() { return /* binding */ y; },\n/* harmony export */   once: function() { return /* binding */ or; },\n/* harmony export */   parseInitData: function() { return /* binding */ er; },\n/* harmony export */   parseLaunchParams: function() { return /* binding */ yt; },\n/* harmony export */   parseThemeParams: function() { return /* binding */ bt; },\n/* harmony export */   postEvent: function() { return /* binding */ f; },\n/* harmony export */   request: function() { return /* binding */ m; },\n/* harmony export */   requestThemeParams: function() { return /* binding */ rr; },\n/* harmony export */   requestViewport: function() { return /* binding */ At; },\n/* harmony export */   retrieveLaunchData: function() { return /* binding */ Ct; },\n/* harmony export */   serializeLaunchParams: function() { return /* binding */ Zt; },\n/* harmony export */   serializeThemeParams: function() { return /* binding */ Gt; },\n/* harmony export */   setDebug: function() { return /* binding */ nr; },\n/* harmony export */   setTargetOrigin: function() { return /* binding */ ir; },\n/* harmony export */   subscribe: function() { return /* binding */ ar; },\n/* harmony export */   supports: function() { return /* binding */ A; },\n/* harmony export */   themeParamsParser: function() { return /* binding */ _t; },\n/* harmony export */   toRGB: function() { return /* binding */ dt; },\n/* harmony export */   unsubscribe: function() { return /* binding */ be; },\n/* harmony export */   userParser: function() { return /* binding */ rt; },\n/* harmony export */   withTimeout: function() { return /* binding */ xt; }\n/* harmony export */ });\nvar $t = Object.defineProperty;\nvar Tt = (r, t, e) => t in r ? $t(r, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) : r[t] = e;\nvar o = (r, t, e) => (Tt(r, typeof t != \"symbol\" ? t + \"\" : t, e), e);\nfunction H(r) {\n  return typeof r == \"object\" && r !== null && !Array.isArray(r);\n}\nfunction ht() {\n  return performance.getEntriesByType(\"navigation\")[0] || null;\n}\nfunction Bt() {\n  const r = ht();\n  return r ? r.type === \"reload\" : null;\n}\nfunction R() {\n  return new TypeError(\"Value has unexpected type\");\n}\nclass F extends Error {\n  constructor(e, { cause: s, type: n } = {}) {\n    super(`Unable to parse value${n ? ` as ${n}` : \"\"}`, { cause: s });\n    /**\n     * Parser name.\n     */\n    o(this, \"type\");\n    this.value = e, Object.setPrototypeOf(this, F.prototype), this.type = n;\n  }\n}\nclass z {\n  constructor(t, e, s) {\n    this.parser = t, this.isOptional = e, this.type = s;\n  }\n  parse(t) {\n    if (!(this.isOptional && t === void 0))\n      try {\n        return this.parser(t);\n      } catch (e) {\n        throw new F(t, { type: this.type, cause: e });\n      }\n  }\n  optional() {\n    return this.isOptional = !0, this;\n  }\n}\nfunction Dt(r) {\n  if (Array.isArray(r))\n    return r;\n  if (typeof r == \"string\")\n    try {\n      const t = JSON.parse(r);\n      if (Array.isArray(t))\n        return t;\n    } catch {\n    }\n  throw R();\n}\nclass Wt extends z {\n  constructor(e, s, n) {\n    super(Dt, s, n);\n    o(this, \"itemParser\");\n    this.itemParser = typeof e == \"function\" ? e : e.parse.bind(e);\n  }\n  parse(e) {\n    const s = super.parse(e);\n    return s === void 0 ? s : s.map(this.itemParser);\n  }\n  of(e) {\n    return this.itemParser = typeof e == \"function\" ? e : e.parse.bind(e), this;\n  }\n}\nfunction V(r, t) {\n  return () => new z(r, !1, t);\n}\nclass j extends Error {\n  constructor(t, { cause: e, type: s } = {}) {\n    super(`Unable to parse field \"${t}\"${s ? ` as ${s}` : \"\"}`, { cause: e }), Object.setPrototypeOf(this, j.prototype);\n  }\n}\nfunction ut(r, t) {\n  const e = {};\n  for (const s in r) {\n    const n = r[s];\n    if (!n)\n      continue;\n    let i, a;\n    if (typeof n == \"function\" || \"parse\" in n)\n      i = s, a = typeof n == \"function\" ? n : n.parse.bind(n);\n    else {\n      const { type: p } = n;\n      i = n.from || s, a = typeof p == \"function\" ? p : p.parse.bind(p);\n    }\n    let c;\n    const u = t(i);\n    try {\n      c = a(u);\n    } catch (p) {\n      throw p instanceof F ? new j(i, {\n        type: p.type,\n        cause: p\n      }) : new j(i, { cause: p });\n    }\n    c !== void 0 && (e[s] = c);\n  }\n  return e;\n}\nfunction Nt(r) {\n  return new Wt((t) => t, !1, r);\n}\nconst P = V((r) => {\n  if (typeof r == \"boolean\")\n    return r;\n  const t = String(r);\n  if (t === \"1\" || t === \"true\")\n    return !0;\n  if (t === \"0\" || t === \"false\")\n    return !1;\n  throw R();\n}, \"boolean\"), k = V((r) => {\n  if (typeof r == \"number\")\n    return r;\n  if (typeof r == \"string\") {\n    const t = Number(r);\n    if (!Number.isNaN(t))\n      return t;\n  }\n  throw R();\n}, \"number\"), pt = V((r) => r instanceof Date ? r : new Date(k().parse(r) * 1e3), \"Date\");\nfunction Y(r) {\n  let t = r;\n  if (typeof t == \"string\" && (t = JSON.parse(t)), typeof t != \"object\" || t === null || Array.isArray(t))\n    throw R();\n  return t;\n}\nfunction g(r, t) {\n  return new z((e) => {\n    const s = Y(e);\n    return ut(r, (n) => s[n]);\n  }, !1, t);\n}\nfunction lt(r) {\n  return /^#[\\da-f]{6}$/i.test(r);\n}\nfunction Ot(r) {\n  return /^#[\\da-f]{3}$/i.test(r);\n}\nfunction dt(r) {\n  const t = r.replace(/\\s/g, \"\").toLowerCase();\n  if (lt(t))\n    return t;\n  if (Ot(t)) {\n    let s = \"#\";\n    for (let n = 0; n < 3; n += 1)\n      s += t[1 + n].repeat(2);\n    return s;\n  }\n  const e = t.match(/^rgb\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3})\\)$/) || t.match(/^rgba\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3}),\\d{1,3}\\)$/);\n  if (e === null)\n    throw new Error(`Value \"${r}\" does not satisfy any of known RGB formats.`);\n  return e.slice(1).reduce((s, n) => {\n    const i = parseInt(n, 10).toString(16);\n    return s + (i.length === 1 ? \"0\" : \"\") + i;\n  }, \"#\");\n}\nfunction ft(r) {\n  const t = dt(r);\n  return Math.sqrt(\n    [0.299, 0.587, 0.114].reduce((s, n, i) => {\n      const a = parseInt(t.slice(1 + i * 2, 1 + (i + 1) * 2), 16);\n      return s + a * a * n;\n    }, 0)\n  ) < 120;\n}\nconst h = V((r) => {\n  if (typeof r == \"string\" || typeof r == \"number\")\n    return r.toString();\n  throw R();\n}, \"string\"), gt = V((r) => dt(h().parse(r)), \"rgb\");\nfunction X(r, t) {\n  return new z((e) => {\n    if (typeof e != \"string\" && !(e instanceof URLSearchParams))\n      throw R();\n    const s = typeof e == \"string\" ? new URLSearchParams(e) : e;\n    return ut(r, (n) => {\n      const i = s.get(n);\n      return i === null ? void 0 : i;\n    });\n  }, !1, t);\n}\nfunction Ht() {\n  return g({\n    id: k(),\n    type: h(),\n    title: h(),\n    photoUrl: {\n      type: h().optional(),\n      from: \"photo_url\"\n    },\n    username: h().optional()\n  }, \"Chat\");\n}\nclass Ut {\n  constructor(t) {\n    this.initData = t;\n  }\n  /**\n   * @see InitDataParsed.authDate\n   */\n  get authDate() {\n    return this.initData.authDate;\n  }\n  /**\n   * @see InitDataParsed.canSendAfter\n   */\n  get canSendAfter() {\n    return this.initData.canSendAfter;\n  }\n  /**\n   * Date after which it is allowed to call\n   * the [answerWebAppQuery](https://core.telegram.org/bots/api#answerwebappquery) method.\n   */\n  get canSendAfterDate() {\n    const { canSendAfter: t } = this;\n    return t === void 0 ? void 0 : new Date(this.authDate.getTime() + t * 1e3);\n  }\n  /**\n   * @see InitDataParsed.chat\n   */\n  get chat() {\n    return this.initData.chat;\n  }\n  /**\n   * @see InitDataParsed.chatType\n   */\n  get chatType() {\n    return this.initData.chatType;\n  }\n  /**\n   * @see InitDataParsed.chatInstance\n   */\n  get chatInstance() {\n    return this.initData.chatInstance;\n  }\n  /**\n   * @see InitDataParsed.hash\n   */\n  get hash() {\n    return this.initData.hash;\n  }\n  /**\n   * @see InitDataParsed.queryId\n   */\n  get queryId() {\n    return this.initData.queryId;\n  }\n  /**\n   * @see InitDataParsed.receiver\n   */\n  get receiver() {\n    return this.initData.receiver;\n  }\n  /**\n   * @see InitDataParsed.startParam\n   */\n  get startParam() {\n    return this.initData.startParam;\n  }\n  /**\n   * @see InitDataParsed.user\n   */\n  get user() {\n    return this.initData.user;\n  }\n}\nfunction rt() {\n  return g({\n    addedToAttachmentMenu: {\n      type: P().optional(),\n      from: \"added_to_attachment_menu\"\n    },\n    allowsWriteToPm: {\n      type: P().optional(),\n      from: \"allows_write_to_pm\"\n    },\n    firstName: {\n      type: h(),\n      from: \"first_name\"\n    },\n    id: k(),\n    isBot: {\n      type: P().optional(),\n      from: \"is_bot\"\n    },\n    isPremium: {\n      type: P().optional(),\n      from: \"is_premium\"\n    },\n    languageCode: {\n      type: h().optional(),\n      from: \"language_code\"\n    },\n    lastName: {\n      type: h().optional(),\n      from: \"last_name\"\n    },\n    photoUrl: {\n      type: h().optional(),\n      from: \"photo_url\"\n    },\n    username: h().optional()\n  }, \"User\");\n}\nfunction wt() {\n  return X({\n    authDate: {\n      type: pt(),\n      from: \"auth_date\"\n    },\n    canSendAfter: {\n      type: k().optional(),\n      from: \"can_send_after\"\n    },\n    chat: Ht().optional(),\n    chatInstance: {\n      type: h().optional(),\n      from: \"chat_instance\"\n    },\n    chatType: {\n      type: h().optional(),\n      from: \"chat_type\"\n    },\n    hash: h(),\n    queryId: {\n      type: h().optional(),\n      from: \"query_id\"\n    },\n    receiver: rt().optional(),\n    startParam: {\n      type: h().optional(),\n      from: \"start_param\"\n    },\n    user: rt().optional()\n  }, \"InitData\");\n}\nfunction er(r) {\n  return wt().parse(r);\n}\nfunction Mt(r) {\n  return r.replace(/(^|_)bg/, (t, e) => `${e}background`).replace(/_([a-z])/g, (t, e) => e.toUpperCase());\n}\nfunction jt(r) {\n  return r.replace(/[A-Z]/g, (t) => `_${t.toLowerCase()}`).replace(/(^|_)background/, (t, e) => `${e}bg`);\n}\nconst _t = V(\n  (r) => {\n    const t = gt().optional();\n    return Object.entries(Y(r)).reduce((e, [s, n]) => (e[Mt(s)] = t.parse(n), e), {});\n  },\n  \"ThemeParams\"\n);\nfunction bt(r) {\n  return _t().parse(r);\n}\nfunction rr(r = {}) {\n  return m(\"web_app_request_theme\", \"theme_changed\", r).then(bt);\n}\nfunction Gt(r) {\n  return JSON.stringify(\n    Object.entries(r).reduce((t, [e, s]) => (s && (t[jt(e)] = s), t), {})\n  );\n}\nclass w {\n  constructor() {\n    o(this, \"listeners\", /* @__PURE__ */ new Map());\n    o(this, \"subscribeListeners\", []);\n  }\n  /**\n   * Adds specified event listener.\n   * @param event - event name.\n   * @param listener - event listener.\n   * @param once - should listener called only once.\n   */\n  addListener(t, e, s) {\n    let n = this.listeners.get(t);\n    return n || (n = [], this.listeners.set(t, n)), n.push([e, s]), () => this.off(t, e);\n  }\n  emit(t, ...e) {\n    this.subscribeListeners.forEach((n) => n(t, ...e));\n    const s = this.listeners.get(t);\n    s && s.forEach(([n, i], a) => {\n      n(...e), i && s.splice(a, 1);\n    });\n  }\n  /**\n   * Adds event listener.\n   * @param event - event name.\n   * @param listener - event listener.\n   * @returns Function to remove event listener.\n   */\n  on(t, e) {\n    return this.addListener(t, e, !1);\n  }\n  /**\n   * Adds event listener following the logic, described in `on` method, but calls specified\n   * listener only once, removing it after.\n   * @param event - event name.\n   * @param listener - event listener.\n   * @returns Function to remove event listener.\n   * @see on\n   */\n  once(t, e) {\n    return this.addListener(t, e, !0);\n  }\n  /**\n   * Removes event listener. In case, specified listener was bound several times, it removes\n   * only a single one.\n   * @param event - event name.\n   * @param listener - event listener.\n   */\n  off(t, e) {\n    const s = this.listeners.get(t);\n    if (s) {\n      for (let n = 0; n < s.length; n += 1)\n        if (e === s[n][0]) {\n          s.splice(n, 1);\n          return;\n        }\n    }\n  }\n  /**\n   * Adds event listener to all events.\n   * @param listener - events listener.\n   * @returns Function to remove event listener.\n   * @see on\n   * @see once\n   */\n  subscribe(t) {\n    return this.subscribeListeners.push(t), () => this.unsubscribe(t);\n  }\n  /**\n   * Removes global event listener. In case, specified listener was bound several times, it removes\n   * only a single one.\n   * @param listener - events listener.\n   * @returns Function to remove event listener.\n   */\n  unsubscribe(t) {\n    for (let e = 0; e < this.subscribeListeners.length; e += 1)\n      if (this.subscribeListeners[e] === t) {\n        this.subscribeListeners.splice(e, 1);\n        return;\n      }\n  }\n}\nclass _ {\n  constructor(t, e) {\n    this.state = t, this.ee = e;\n  }\n  internalSet(t, e) {\n    return this.state[t] === e || e === void 0 ? !1 : (this.state[t] = e, this.ee.emit(`change:${t}`, e), !0);\n  }\n  /**\n   * Returns copy of current state.\n   */\n  clone() {\n    return { ...this.state };\n  }\n  set(t, e) {\n    let s = !1;\n    if (typeof t == \"string\")\n      s = this.internalSet(t, e);\n    else\n      for (const n in t)\n        this.internalSet(n, t[n]) && (s = !0);\n    s && this.ee.emit(\"change\");\n  }\n  /**\n   * Returns value by specified key.\n   * @param key - state key.\n   */\n  get(t) {\n    return this.state[t];\n  }\n}\nclass Ft {\n  constructor(t) {\n    o(this, \"ee\", new w());\n    o(this, \"state\");\n    /**\n     * Adds new event listener.\n     */\n    o(this, \"on\", this.ee.on.bind(this.ee));\n    /**\n     * Removes event listener.\n     */\n    o(this, \"off\", this.ee.off.bind(this.ee));\n    this.state = new _(t, this.ee);\n  }\n  /**\n   * @since v6.10\n   */\n  get accentTextColor() {\n    return this.get(\"accentTextColor\");\n  }\n  get backgroundColor() {\n    return this.get(\"backgroundColor\");\n  }\n  get buttonColor() {\n    return this.get(\"buttonColor\");\n  }\n  get buttonTextColor() {\n    return this.get(\"buttonTextColor\");\n  }\n  get destructiveTextColor() {\n    return this.get(\"destructiveTextColor\");\n  }\n  /**\n   * Retrieves palette color value by its name.\n   * @param key - palette key name.\n   */\n  get(t) {\n    return this.state.get(t);\n  }\n  /**\n   * Returns the copy of the internal state of the current component instance.\n   */\n  getState() {\n    return this.state.clone();\n  }\n  /**\n   * @since v6.10\n   */\n  get headerBackgroundColor() {\n    return this.get(\"headerBackgroundColor\");\n  }\n  get hintColor() {\n    return this.get(\"hintColor\");\n  }\n  /**\n   * Returns true in case, current color scheme is recognized as dark. This\n   * value is calculated according to theme background color.\n   */\n  get isDark() {\n    return !this.backgroundColor || ft(this.backgroundColor);\n  }\n  get linkColor() {\n    return this.get(\"linkColor\");\n  }\n  get secondaryBackgroundColor() {\n    return this.get(\"secondaryBackgroundColor\");\n  }\n  /**\n   * @since v6.10\n   */\n  get sectionBackgroundColor() {\n    return this.get(\"sectionBackgroundColor\");\n  }\n  /**\n   * @since v6.10\n   */\n  get sectionHeaderTextColor() {\n    return this.get(\"sectionHeaderTextColor\");\n  }\n  /**\n   * Starts listening to theme changes and applies them.\n   * @returns Function to stop listening.\n   */\n  listen() {\n    return y(\"theme_changed\", (t) => {\n      this.state.set(bt(t.theme_params));\n    });\n  }\n  /**\n   * @since v6.10\n   */\n  get subtitleTextColor() {\n    return this.get(\"subtitleTextColor\");\n  }\n  get textColor() {\n    return this.get(\"textColor\");\n  }\n}\nfunction mt() {\n  return X({\n    botInline: {\n      type: P().optional(),\n      from: \"tgWebAppBotInline\"\n    },\n    initData: {\n      type: wt().optional(),\n      from: \"tgWebAppData\"\n    },\n    initDataRaw: {\n      type: h().optional(),\n      from: \"tgWebAppData\"\n    },\n    platform: {\n      type: h(),\n      from: \"tgWebAppPlatform\"\n    },\n    showSettings: {\n      type: P().optional(),\n      from: \"tgWebAppShowSettings\"\n    },\n    themeParams: {\n      type: _t(),\n      from: \"tgWebAppThemeParams\"\n    },\n    version: {\n      type: h(),\n      from: \"tgWebAppVersion\"\n    }\n  }, \"LaunchParams\");\n}\nfunction yt(r) {\n  return mt().parse(r);\n}\nfunction zt() {\n  return yt(window.location.hash.slice(1));\n}\nfunction Jt() {\n  const r = ht();\n  if (!r)\n    throw new Error(\"Unable to get first navigation entry.\");\n  const t = r.name.match(/#(.*)/);\n  if (!t)\n    throw new Error(\"First navigation entry does not contain hash part.\");\n  return yt(t[1]);\n}\nfunction Qt() {\n  try {\n    return Jt();\n  } catch {\n  }\n  try {\n    return zt();\n  } catch {\n  }\n  return null;\n}\nfunction Zt(r) {\n  const {\n    initDataRaw: t,\n    themeParams: e,\n    platform: s,\n    version: n,\n    showSettings: i,\n    botInline: a\n  } = r, c = new URLSearchParams();\n  return t && c.set(\"tgWebAppData\", t), c.set(\"tgWebAppPlatform\", s), c.set(\"tgWebAppThemeParams\", Gt(e)), c.set(\"tgWebAppVersion\", n), typeof i == \"boolean\" && c.set(\"tgWebAppShowSettings\", i ? \"1\" : \"0\"), typeof a == \"boolean\" && c.set(\"tgWebAppBotInline\", a ? \"1\" : \"0\"), c.toString();\n}\nconst Et = \"telegram-mini-apps-launch-params\";\nfunction Kt() {\n  const r = sessionStorage.getItem(Et);\n  return r ? mt().parse(r) : null;\n}\nfunction Yt(r) {\n  sessionStorage.setItem(Et, Zt(r));\n}\nfunction Xt() {\n  try {\n    return window.self !== window.top;\n  } catch {\n    return !0;\n  }\n}\nfunction te() {\n  const r = Kt(), t = Qt(), e = Bt();\n  if (r) {\n    if (t)\n      return {\n        launchParams: t,\n        isPageReload: Xt() ? e || r.initDataRaw === t.initDataRaw : !0\n      };\n    if (e)\n      return {\n        launchParams: r,\n        isPageReload: e\n      };\n    throw new Error(\"Unable to retrieve current launch parameters, which must exist.\");\n  }\n  if (t)\n    return {\n      launchParams: t,\n      isPageReload: !1\n    };\n  throw new Error(\"Unable to retrieve any launch parameters.\");\n}\nconst st = \"tmajsLaunchData\";\nfunction Ct() {\n  const r = window[st];\n  if (r)\n    return r;\n  const t = te();\n  return window[st] = t, Yt(t.launchParams), t;\n}\nfunction sr() {\n  try {\n    return Ct(), !0;\n  } catch {\n    return !1;\n  }\n}\nfunction ee(r) {\n  return \"external\" in r && H(r.external) && \"notify\" in r.external && typeof r.external.notify == \"function\";\n}\nfunction re(r) {\n  return \"TelegramWebviewProxy\" in r && H(r.TelegramWebviewProxy) && \"postEvent\" in r.TelegramWebviewProxy && typeof r.TelegramWebviewProxy.postEvent == \"function\";\n}\nfunction vt() {\n  try {\n    return window.self !== window.top;\n  } catch {\n    return !0;\n  }\n}\nclass tt extends Error {\n  constructor(t, e) {\n    super(`Method \"${t}\" is unsupported in the Mini Apps version ${e}.`), Object.setPrototypeOf(this, tt.prototype);\n  }\n}\nclass et extends Error {\n  constructor(t, e, s) {\n    super(`Parameter \"${e}\" in method \"${t}\" is unsupported in the Mini Apps version ${s}.`), Object.setPrototypeOf(this, et.prototype);\n  }\n}\nclass Pt {\n  constructor(t, e) {\n    this.prefix = t, this.enabled = e;\n  }\n  /**\n   * Prints message into a console in case, logger is currently enabled.\n   * @param level - log level.\n   * @param args - arguments.\n   */\n  print(t, ...e) {\n    if (!this.enabled)\n      return;\n    const s = /* @__PURE__ */ new Date(), n = Intl.DateTimeFormat(\"en-GB\", {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n      fractionalSecondDigits: 3,\n      timeZone: \"UTC\"\n    }).format(s);\n    console[t](`[${n}]`, this.prefix, ...e);\n  }\n  /**\n   * Disables the logger.\n   */\n  disable() {\n    this.enabled = !1;\n  }\n  /**\n   * Prints error message into a console.\n   * @param args\n   */\n  error(...t) {\n    this.print(\"error\", ...t);\n  }\n  /**\n   * Enables the logger.\n   */\n  enable() {\n    this.enabled = !0;\n  }\n  /**\n   * Prints log message into a console.\n   * @param args\n   */\n  log(...t) {\n    this.print(\"log\", ...t);\n  }\n  /**\n   * Prints warning message into a console.\n   * @param args\n   */\n  warn(...t) {\n    this.print(\"warn\", ...t);\n  }\n}\nlet St = \"https://web.telegram.org\";\nconst q = new Pt(\"[SDK]\", !1);\nfunction nr(r) {\n  if (r) {\n    q.enable();\n    return;\n  }\n  q.disable();\n}\nfunction ir(r) {\n  St = r;\n}\nfunction se() {\n  return St;\n}\nconst ne = g({\n  eventType: h(),\n  eventData: (r) => r\n});\nfunction ie(r, t) {\n  window.dispatchEvent(new MessageEvent(\"message\", {\n    data: JSON.stringify({ eventType: r, eventData: t })\n  }));\n}\nfunction oe() {\n  const r = window;\n  \"TelegramGameProxy_receiveEvent\" in r || [\n    [\"TelegramGameProxy_receiveEvent\"],\n    // Windows Phone.\n    [\"TelegramGameProxy\", \"receiveEvent\"],\n    // Desktop.\n    [\"Telegram\", \"WebView\", \"receiveEvent\"]\n    // Android and iOS.\n  ].forEach((t) => {\n    let e = r;\n    t.forEach((s, n, i) => {\n      if (n === i.length - 1) {\n        e[s] = ie;\n        return;\n      }\n      s in e || (e[s] = {}), e = e[s];\n    });\n  });\n}\nfunction ae(r) {\n  oe(), window.addEventListener(\"message\", (t) => {\n    try {\n      const { eventType: e, eventData: s } = ne.parse(t.data);\n      r(e, s);\n    } catch {\n    }\n  });\n}\nfunction ce() {\n  return g({\n    req_id: h(),\n    data: (r) => r === null ? r : h().optional().parse(r)\n  });\n}\nfunction he() {\n  return g({\n    req_id: h(),\n    result: (r) => r,\n    error: h().optional()\n  });\n}\nfunction ue() {\n  return g({\n    slug: h(),\n    status: h()\n  });\n}\nfunction pe() {\n  return g({ status: h() });\n}\nfunction le() {\n  return g({\n    button_id: (r) => r == null ? void 0 : h().parse(r)\n  });\n}\nfunction de() {\n  return g({\n    data: h().optional()\n  });\n}\nfunction fe() {\n  return g({\n    theme_params: (r) => {\n      const t = gt().optional();\n      return Object.entries(Y(r)).reduce((e, [s, n]) => (e[s] = t.parse(n), e), {});\n    }\n  });\n}\nfunction ge() {\n  return g({\n    height: k(),\n    width: (r) => r == null ? window.innerWidth : k().parse(r),\n    is_state_stable: P(),\n    is_expanded: P()\n  });\n}\nfunction we() {\n  return g({ status: h() });\n}\nfunction _e() {\n  const r = new w(), t = (e, ...s) => {\n    q.log(\"Emitting processed event:\", e, ...s), r.emit(e, ...s);\n  };\n  return window.addEventListener(\"resize\", () => {\n    t(\"viewport_changed\", {\n      width: window.innerWidth,\n      height: window.innerHeight,\n      is_state_stable: !0,\n      is_expanded: !0\n    });\n  }), ae((e, s) => {\n    q.log(\"Received raw event:\", e, s);\n    try {\n      switch (e) {\n        case \"viewport_changed\":\n          return t(e, ge().parse(s));\n        case \"theme_changed\":\n          return t(e, fe().parse(s));\n        case \"popup_closed\":\n          return (\n            // Sent on desktop.\n            s == null ? t(e, {}) : t(e, le().parse(s))\n          );\n        case \"set_custom_style\":\n          return t(e, h().parse(s));\n        case \"qr_text_received\":\n          return t(e, de().parse(s));\n        case \"clipboard_text_received\":\n          return t(e, ce().parse(s));\n        case \"invoice_closed\":\n          return t(e, ue().parse(s));\n        case \"phone_requested\":\n          return t(\"phone_requested\", pe().parse(s));\n        case \"custom_method_invoked\":\n          return t(\"custom_method_invoked\", he().parse(s));\n        case \"write_access_requested\":\n          return t(\"write_access_requested\", we().parse(s));\n        case \"main_button_pressed\":\n        case \"back_button_pressed\":\n        case \"settings_button_pressed\":\n        case \"scan_qr_popup_closed\":\n        case \"reload_iframe\":\n          return t(e);\n        default:\n          return t(e, s);\n      }\n    } catch (n) {\n      q.error(\"Error processing event:\", n);\n    }\n  }), r;\n}\nconst Q = \"telegram-mini-apps-cached-emitter\";\nfunction U() {\n  const r = window;\n  return r[Q] === void 0 && (r[Q] = _e()), r[Q];\n}\nfunction I(r, t) {\n  U().off(r, t);\n}\nfunction y(r, t) {\n  return U().on(r, t), () => I(r, t);\n}\nfunction or(r, t) {\n  return U().once(r, t), () => I(r, t);\n}\nfunction be(r) {\n  U().unsubscribe(r);\n}\nfunction ar(r) {\n  return U().subscribe(r), () => be(r);\n}\nfunction me(r, t) {\n  const e = r.split(\".\"), s = t.split(\".\"), n = Math.max(e.length, s.length);\n  for (let i = 0; i < n; i += 1) {\n    const a = parseInt(e[i] || \"0\", 10), c = parseInt(s[i] || \"0\", 10);\n    if (a !== c)\n      return a > c ? 1 : -1;\n  }\n  return 0;\n}\nfunction v(r, t) {\n  return me(r, t) <= 0;\n}\nfunction A(r, t, e) {\n  if (typeof e == \"string\") {\n    if (r === \"web_app_open_link\" && t === \"try_instant_view\")\n      return v(\"6.4\", e);\n    if (r === \"web_app_set_header_color\" && t === \"color\")\n      return v(\"6.9\", e);\n  }\n  switch (r) {\n    case \"web_app_open_tg_link\":\n    case \"web_app_open_invoice\":\n    case \"web_app_setup_back_button\":\n    case \"web_app_set_background_color\":\n    case \"web_app_set_header_color\":\n    case \"web_app_trigger_haptic_feedback\":\n      return v(\"6.1\", t);\n    case \"web_app_open_popup\":\n      return v(\"6.2\", t);\n    case \"web_app_close_scan_qr_popup\":\n    case \"web_app_open_scan_qr_popup\":\n    case \"web_app_read_text_from_clipboard\":\n      return v(\"6.4\", t);\n    case \"web_app_switch_inline_query\":\n      return v(\"6.7\", t);\n    case \"web_app_invoke_custom_method\":\n    case \"web_app_request_write_access\":\n    case \"web_app_request_phone\":\n      return v(\"6.9\", t);\n    case \"web_app_setup_settings_button\":\n      return v(\"6.10\", t);\n    default:\n      return !0;\n  }\n}\nfunction E(r, t) {\n  return (e) => A(t[e], r);\n}\nfunction kt(r, t) {\n  return (e) => {\n    const [s, n] = t[e];\n    return A(s, n, r);\n  };\n}\nfunction f(r, t, e) {\n  let s = {}, n;\n  t === void 0 && e === void 0 ? s = {} : t !== void 0 && e !== void 0 ? (s = e, n = t) : t !== void 0 && (\"targetOrigin\" in t ? s = t : n = t);\n  const { targetOrigin: i = se() } = s;\n  if (q.log(`Calling method \"${r}\"`, n), vt()) {\n    window.parent.postMessage(JSON.stringify({\n      eventType: r,\n      eventData: n\n    }), i);\n    return;\n  }\n  if (ee(window)) {\n    window.external.notify(JSON.stringify({ eventType: r, eventData: n }));\n    return;\n  }\n  if (re(window)) {\n    window.TelegramWebviewProxy.postEvent(r, JSON.stringify(n));\n    return;\n  }\n  throw new Error(\n    \"Unable to determine current environment and possible way to send event.\"\n  );\n}\nfunction ye(r) {\n  return (t, e) => {\n    if (!A(t, r))\n      throw new tt(t, r);\n    if (H(e)) {\n      let s;\n      if (t === \"web_app_open_link\" && \"try_instant_view\" in e ? s = \"try_instant_view\" : t === \"web_app_set_header_color\" && \"color\" in e && (s = \"color\"), s && !A(t, s, r))\n        throw new et(t, s, r);\n    }\n    return f(t, e);\n  };\n}\nclass J extends Error {\n  constructor(t) {\n    super(`Async call timeout exceeded. Timeout: ${t}`), Object.setPrototypeOf(this, J.prototype);\n  }\n}\nfunction cr(r) {\n  return r instanceof J;\n}\nfunction Ee(r) {\n  return new Promise((t) => {\n    setTimeout(t, r);\n  });\n}\nfunction Ce(r) {\n  return new Promise((t, e) => {\n    setTimeout(e, r, new J(r));\n  });\n}\nfunction xt(r, t) {\n  return Promise.race([\n    r(),\n    Ce(t)\n  ]);\n}\nfunction m(r, t, e, s) {\n  let n, i, a, c;\n  typeof t == \"string\" || Array.isArray(t) ? (a = Array.isArray(t) ? t : [t], n = e) : (i = t, a = Array.isArray(e) ? e : [e], n = s), H(i) && typeof i.req_id == \"string\" && (c = i.req_id);\n  const { postEvent: u = f, timeout: p } = n || {}, l = n && \"capture\" in n ? n.capture : null, b = () => new Promise((d, C) => {\n    const x = a.map((B) => y(B, (M) => {\n      c && (!H(M) || M.req_id !== c) || typeof l == \"function\" && !l(M) || (T(), d(M));\n    })), T = () => x.forEach((B) => B());\n    try {\n      u(r, i);\n    } catch (B) {\n      T(), C(B);\n    }\n  });\n  return typeof p == \"number\" ? xt(b, p) : b();\n}\nasync function N(r, t, e, s = {}) {\n  const { result: n, error: i } = await m(\n    \"web_app_invoke_custom_method\",\n    {\n      method: r,\n      params: t,\n      req_id: e\n    },\n    \"custom_method_invoked\",\n    s\n  );\n  if (i)\n    throw new Error(i);\n  return n;\n}\nclass ve {\n  constructor(t, e, s = f) {\n    o(this, \"ee\", new w());\n    o(this, \"state\");\n    /**\n     * Adds event listener.\n     * @param event - event name.\n     * @param listener - event listener.\n     */\n    o(this, \"on\", (t, e) => t === \"click\" ? y(\"back_button_pressed\", e) : this.ee.on(t, e));\n    /**\n     * Removes event listener.\n     * @param event - event name.\n     * @param listener - event listener.\n     */\n    o(this, \"off\", (t, e) => t === \"click\" ? I(\"back_button_pressed\", e) : this.ee.off(t, e));\n    /**\n     * Checks if specified method is supported by current component.\n     */\n    o(this, \"supports\");\n    this.postEvent = s, this.state = new _({ isVisible: t }, this.ee), this.supports = E(e, {\n      show: \"web_app_setup_back_button\",\n      hide: \"web_app_setup_back_button\"\n    });\n  }\n  set isVisible(t) {\n    this.state.set(\"isVisible\", t), this.postEvent(\"web_app_setup_back_button\", { is_visible: t });\n  }\n  /**\n   * True if BackButton is currently visible.\n   */\n  get isVisible() {\n    return this.state.get(\"isVisible\");\n  }\n  /**\n   * Hides the BackButton.\n   */\n  hide() {\n    this.isVisible = !1;\n  }\n  /**\n   * Shows the BackButton.\n   */\n  show() {\n    this.isVisible = !0;\n  }\n}\nfunction nt(r, t) {\n  return r + (r.length > 0 && t.length > 0 ? ` ${t}` : t);\n}\nfunction Pe(...r) {\n  return r.reduce((t, e) => {\n    let s = \"\";\n    return typeof e == \"string\" ? s = e : typeof e == \"object\" && e !== null && (s = Object.entries(e).reduce((n, [i, a]) => a ? nt(n, i) : n, \"\")), nt(t, s);\n  }, \"\");\n}\nfunction Se(r) {\n  return typeof r == \"object\" && r !== null && !Array.isArray(null);\n}\nfunction hr(...r) {\n  return r.reduce((t, e) => (Se(e) && Object.entries(e).forEach(([s, n]) => {\n    const i = Pe(t[s], n);\n    i.length > 0 && (t[s] = i);\n  }), t), {});\n}\nclass ke {\n  constructor(t, e = f) {\n    o(this, \"ee\", new w());\n    o(this, \"state\");\n    /**\n     * Adds new event listener.\n     */\n    o(this, \"on\", this.ee.on.bind(this.ee));\n    /**\n     * Removes event listener.\n     */\n    o(this, \"off\", this.ee.off.bind(this.ee));\n    this.postEvent = e, this.state = new _({ isConfirmationNeeded: t }, this.ee);\n  }\n  set isConfirmationNeeded(t) {\n    this.state.set(\"isConfirmationNeeded\", t), this.postEvent(\"web_app_setup_closing_behavior\", { need_confirmation: t });\n  }\n  /**\n   * Returns true, if the confirmation dialog enabled while the user is trying\n   * to close the Mini App.\n   */\n  get isConfirmationNeeded() {\n    return this.state.get(\"isConfirmationNeeded\");\n  }\n  /**\n   * Disables the confirmation dialog while the user is trying to close the\n   * Mini App.\n   */\n  disableConfirmation() {\n    this.isConfirmationNeeded = !1;\n  }\n  /**\n   * Enables the confirmation dialog while the user is trying to close the\n   * Mini App.\n   */\n  enableConfirmation() {\n    this.isConfirmationNeeded = !0;\n  }\n}\nfunction it(r, t) {\n  return r.reduce((e, s) => (e[s] = t, e), {});\n}\nclass xe {\n  constructor(t, e, s = f) {\n    /**\n     * Checks if specified method is supported by current component.\n     */\n    o(this, \"supports\");\n    this.createRequestId = e, this.postEvent = s, this.supports = E(t, {\n      delete: \"web_app_invoke_custom_method\",\n      get: \"web_app_invoke_custom_method\",\n      getKeys: \"web_app_invoke_custom_method\",\n      set: \"web_app_invoke_custom_method\"\n    });\n  }\n  /**\n   * Deletes specified key or keys from the cloud storage.\n   * @param keyOrKeys - key or keys to delete.\n   * @param options - request execution options.\n   */\n  async delete(t, e = {}) {\n    const s = Array.isArray(t) ? t : [t];\n    s.length !== 0 && await N(\n      \"deleteStorageValues\",\n      { keys: s },\n      this.createRequestId(),\n      { ...e, postEvent: this.postEvent }\n    );\n  }\n  /**\n   * Returns list of all keys presented in the cloud storage.\n   * @param options - request execution options.\n   */\n  async getKeys(t = {}) {\n    const e = await N(\n      \"getStorageKeys\",\n      {},\n      this.createRequestId(),\n      { ...t, postEvent: this.postEvent }\n    );\n    return Nt().of(h()).parse(e);\n  }\n  async get(t, e = {}) {\n    const s = Array.isArray(t) ? t : [t];\n    if (s.length === 0)\n      return it(s, \"\");\n    const n = g(\n      it(s, h())\n    ), i = await N(\n      \"getStorageValues\",\n      { keys: s },\n      this.createRequestId(),\n      { ...e, postEvent: this.postEvent }\n    ).then((a) => n.parse(a));\n    return Array.isArray(t) ? i : i[t];\n  }\n  /**\n   * Saves specified value by key.\n   * @param key - storage key.\n   * @param value - storage value.\n   * @param options - request execution options.\n   */\n  async set(t, e, s = {}) {\n    await N(\n      \"saveStorageValue\",\n      { key: t, value: e },\n      this.createRequestId(),\n      { ...s, postEvent: this.postEvent }\n    );\n  }\n}\nclass qe {\n  constructor(t, e = f) {\n    /**\n     * Checks if specified method is supported by current component.\n     */\n    o(this, \"supports\");\n    this.postEvent = e, this.supports = E(t, {\n      impactOccurred: \"web_app_trigger_haptic_feedback\",\n      notificationOccurred: \"web_app_trigger_haptic_feedback\",\n      selectionChanged: \"web_app_trigger_haptic_feedback\"\n    });\n  }\n  /**\n   * A method tells that an impact occurred. The Telegram app may play the\n   * appropriate haptics based on style value passed.\n   * @param style - impact style.\n   */\n  impactOccurred(t) {\n    this.postEvent(\"web_app_trigger_haptic_feedback\", {\n      type: \"impact\",\n      impact_style: t\n    });\n  }\n  /**\n   * A method tells that a task or action has succeeded, failed, or produced\n   * a warning. The Telegram app may play the appropriate haptics based on\n   * type value passed.\n   * @param type - notification type.\n   */\n  notificationOccurred(t) {\n    this.postEvent(\"web_app_trigger_haptic_feedback\", {\n      type: \"notification\",\n      notification_type: t\n    });\n  }\n  /**\n   * A method tells that the user has changed a selection. The Telegram app\n   * may play the appropriate haptics.\n   *\n   * Do not use this feedback when the user makes or confirms a selection;\n   * use it only when the selection changes.\n   */\n  selectionChanged() {\n    this.postEvent(\"web_app_trigger_haptic_feedback\", { type: \"selection_change\" });\n  }\n}\nfunction Ae() {\n  const r = document.createElement(\"style\");\n  r.id = \"telegram-custom-styles\", document.head.appendChild(r), y(\"set_custom_style\", (t) => {\n    r.innerHTML = t;\n  });\n}\nfunction qt(r) {\n  return `telegram-mini-apps-${r}`;\n}\nfunction L(r, t) {\n  sessionStorage.setItem(qt(r), JSON.stringify(t));\n}\nfunction $(r) {\n  const t = sessionStorage.getItem(qt(r));\n  return t ? JSON.parse(t) : null;\n}\nfunction Re(r, t, e) {\n  const { isVisible: s = !1 } = r ? $(\"back-button\") || {} : {}, n = new ve(s, t, e);\n  return n.on(\"change\", () => {\n    L(\"back-button\", { isVisible: n.isVisible });\n  }), n;\n}\nfunction Ve(r, t) {\n  const { isConfirmationNeeded: e = !1 } = r ? $(\"closing-behavior\") || {} : {}, s = new ke(e, t);\n  return s.on(\"change\", () => L(\"closing-behavior\", {\n    isConfirmationNeeded: s.isConfirmationNeeded\n  })), s;\n}\nclass Ie {\n  constructor(t) {\n    o(this, \"ee\", new w());\n    o(this, \"state\");\n    o(this, \"postEvent\");\n    /**\n     * Adds new event listener.\n     * @param event - event name.\n     * @param listener - event listener.\n     */\n    o(this, \"on\", (t, e) => (\n      // FIXME: Event 'main_button_pressed' is still being received on Android\n      //  even if the main button is disabled.\n      //  Issue: https://github.com/Telegram-Mini-Apps/tma.js/issues/3\n      t === \"click\" ? y(\"main_button_pressed\", e) : this.ee.on(t, e)\n    ));\n    /**\n     * Removes event listener.\n     * @param event - event name.\n     * @param listener - event listener.\n     */\n    o(this, \"off\", (t, e) => t === \"click\" ? I(\"main_button_pressed\", e) : this.ee.off(t, e));\n    const {\n      postEvent: e = f,\n      text: s,\n      textColor: n,\n      backgroundColor: i,\n      isEnabled: a,\n      isVisible: c,\n      isLoaderVisible: u\n    } = t;\n    this.postEvent = e, this.state = new _({\n      backgroundColor: i,\n      isEnabled: a,\n      isVisible: c,\n      isLoaderVisible: u,\n      text: s,\n      textColor: n\n    }, this.ee);\n  }\n  /**\n   * Sends current local state to Telegram application.\n   */\n  commit() {\n    this.text !== \"\" && this.postEvent(\"web_app_setup_main_button\", {\n      is_visible: this.isVisible,\n      is_active: this.isEnabled,\n      is_progress_visible: this.isLoaderVisible,\n      text: this.text,\n      color: this.backgroundColor,\n      text_color: this.textColor\n    });\n  }\n  set isEnabled(t) {\n    this.setParams({ isEnabled: t });\n  }\n  /**\n   * True if the Main Button is currently enabled.\n   */\n  get isEnabled() {\n    return this.state.get(\"isEnabled\");\n  }\n  set isLoaderVisible(t) {\n    this.setParams({ isLoaderVisible: t });\n  }\n  /**\n   * True if the Main Button loader is currently visible.\n   */\n  get isLoaderVisible() {\n    return this.state.get(\"isLoaderVisible\");\n  }\n  set isVisible(t) {\n    this.setParams({ isVisible: t });\n  }\n  /**\n   * True if the Main Button is currently visible.\n   */\n  get isVisible() {\n    return this.state.get(\"isVisible\");\n  }\n  /**\n   * The Main Button background color.\n   */\n  get backgroundColor() {\n    return this.state.get(\"backgroundColor\");\n  }\n  /**\n   * The Main Button text.\n   */\n  get text() {\n    return this.state.get(\"text\");\n  }\n  /**\n   * The Main Button text color.\n   */\n  get textColor() {\n    return this.state.get(\"textColor\");\n  }\n  /**\n   * Disables the Main Button.\n   */\n  disable() {\n    return this.isEnabled = !1, this;\n  }\n  /**\n   * Enables the Main Button.\n   */\n  enable() {\n    return this.isEnabled = !0, this;\n  }\n  /**\n   * Hides the Main Button.\n   */\n  hide() {\n    return this.isVisible = !1, this;\n  }\n  /**\n   * Hides the Main Button loader.\n   */\n  hideLoader() {\n    return this.isLoaderVisible = !1, this;\n  }\n  /**\n   * Shows the Main Button. Note that opening the Mini App from the attachment menu hides the\n   * main button until the user interacts with the Mini App interface.\n   */\n  show() {\n    return this.isVisible = !0, this;\n  }\n  /**\n   * A method to show a loading indicator on the Main Button. It is recommended to display\n   * loader if the action tied to the button may take a long time.\n   */\n  showLoader() {\n    return this.isLoaderVisible = !0, this;\n  }\n  /**\n   * Sets new Main Button text. Minimal length for text is 1 symbol, and maximum is 64 symbols.\n   * @param text - new text.\n   */\n  setText(t) {\n    return this.setParams({ text: t });\n  }\n  /**\n   * Sets new Main Button text color.\n   * @param textColor - new text color.\n   */\n  setTextColor(t) {\n    return this.setParams({ textColor: t });\n  }\n  /**\n   * Updates current Main Button color.\n   * @param backgroundColor - color to set.\n   */\n  setBackgroundColor(t) {\n    return this.setParams({ backgroundColor: t });\n  }\n  /**\n   * Allows setting multiple Main Button parameters.\n   * @param params - Main Button parameters.\n   */\n  setParams(t) {\n    return this.state.set(t), this.commit(), this;\n  }\n}\nfunction Le(r, t, e, s) {\n  const {\n    backgroundColor: n = t,\n    isEnabled: i = !1,\n    isVisible: a = !1,\n    isLoaderVisible: c = !1,\n    textColor: u = e,\n    text: p = \"\"\n  } = r ? $(\"main-button\") || {} : {}, l = new Ie({\n    backgroundColor: n,\n    isEnabled: i,\n    isLoaderVisible: c,\n    isVisible: a,\n    postEvent: s,\n    text: p,\n    textColor: u\n  }), b = () => L(\"main-button\", {\n    backgroundColor: l.backgroundColor,\n    isEnabled: l.isEnabled,\n    isLoaderVisible: l.isLoaderVisible,\n    isVisible: l.isVisible,\n    text: l.text,\n    textColor: l.textColor\n  });\n  return l.on(\"change\", b), l;\n}\nconst $e = X({\n  contact: g({\n    userId: {\n      type: k(),\n      from: \"user_id\"\n    },\n    phoneNumber: {\n      type: h(),\n      from: \"phone_number\"\n    },\n    firstName: {\n      type: h(),\n      from: \"first_name\"\n    },\n    lastName: {\n      type: h(),\n      from: \"last_name\"\n    }\n  }),\n  authDate: {\n    type: pt(),\n    from: \"auth_date\"\n  },\n  hash: h()\n});\nclass Te {\n  constructor(t) {\n    o(this, \"ee\", new w());\n    o(this, \"state\");\n    o(this, \"botInline\");\n    o(this, \"postEvent\");\n    o(this, \"createRequestId\");\n    o(this, \"requestingPhoneAccess\", !1);\n    o(this, \"requestingWriteAccess\", !1);\n    /**\n     * Adds new event listener.\n     */\n    o(this, \"on\", this.ee.on.bind(this.ee));\n    /**\n     * Removes event listener.\n     */\n    o(this, \"off\", this.ee.off.bind(this.ee));\n    /**\n     * Checks if specified method is supported by current component.\n     */\n    o(this, \"supports\");\n    /**\n     * Checks if specified method parameter is supported by current component.\n     */\n    o(this, \"supportsParam\");\n    const {\n      postEvent: e = f,\n      headerColor: s,\n      backgroundColor: n,\n      version: i,\n      botInline: a,\n      createRequestId: c\n    } = t, u = E(i, {\n      requestPhoneAccess: \"web_app_request_phone\",\n      requestWriteAccess: \"web_app_request_write_access\",\n      switchInlineQuery: \"web_app_switch_inline_query\",\n      setHeaderColor: \"web_app_set_header_color\",\n      setBackgroundColor: \"web_app_set_background_color\"\n    });\n    this.postEvent = e, this.botInline = a, this.createRequestId = c, this.supports = (p) => !(!u(p) || p === \"switchInlineQuery\" && !a), this.state = new _({ backgroundColor: n, headerColor: s }, this.ee), this.supportsParam = kt(i, {\n      \"setHeaderColor.color\": [\"web_app_set_header_color\", \"color\"]\n    });\n  }\n  /**\n   * Attempts to get requested contact.\n   */\n  async getRequestedContact() {\n    return N(\n      \"getRequestedContact\",\n      {},\n      this.createRequestId(),\n      {\n        postEvent: this.postEvent,\n        timeout: 1e4\n      }\n    ).then((t) => $e.parse(t));\n  }\n  /**\n   * The Mini App background color.\n   */\n  get backgroundColor() {\n    return this.state.get(\"backgroundColor\");\n  }\n  /**\n   * Closes the Mini App.\n   */\n  close() {\n    this.postEvent(\"web_app_close\");\n  }\n  /**\n   * The Mini App header color. Could either be a header color key or RGB color.\n   */\n  get headerColor() {\n    return this.state.get(\"headerColor\");\n  }\n  /**\n   * True if Mini App is currently launched in bot inline mode.\n   */\n  get isBotInline() {\n    return this.botInline;\n  }\n  /**\n   * True if current Mini App background color recognized as dark.\n   */\n  get isDark() {\n    return ft(this.backgroundColor);\n  }\n  /**\n   * True if phone access is currently being requested.\n   */\n  get isRequestingPhoneAccess() {\n    return this.requestingPhoneAccess;\n  }\n  /**\n   * True if write access is currently being requested.\n   */\n  get isRequestingWriteAccess() {\n    return this.requestingWriteAccess;\n  }\n  /**\n   * Informs the Telegram app that the Mini App is ready to be displayed.\n   *\n   * It is recommended to call this method as early as possible, as soon as all essential\n   * interface elements loaded. Once this method called, the loading placeholder is hidden\n   * and the Mini App shown.\n   *\n   * If the method not called, the placeholder will be hidden only when the page fully loaded.\n   */\n  ready() {\n    this.postEvent(\"web_app_ready\");\n  }\n  /**\n   * Requests current user contact information. In contrary to requestPhoneAccess, this method\n   * returns promise with contact information that rejects in case, user denied access, or request\n   * failed.\n   * @param options - additional options.\n   */\n  async requestContact({ timeout: t = 5e3 } = {}) {\n    try {\n      return await this.getRequestedContact();\n    } catch {\n    }\n    if (await this.requestPhoneAccess() !== \"sent\")\n      throw new Error(\"Access denied.\");\n    const s = Date.now() + t;\n    let n = 50;\n    return xt(async () => {\n      for (; Date.now() < s; ) {\n        try {\n          return await this.getRequestedContact();\n        } catch {\n        }\n        await Ee(n), n += 50;\n      }\n      throw new Error(\"Unable to retrieve requested contact.\");\n    }, t);\n  }\n  /**\n   * Requests current user phone access. Method returns promise, which resolves\n   * status of the request. In case, user accepted the request, Mini App bot will receive\n   * the according notification.\n   *\n   * To obtain the retrieved information instead, utilize the requestContact method.\n   * @param options - additional options.\n   * @see requestContact\n   */\n  requestPhoneAccess(t = {}) {\n    if (this.requestingPhoneAccess)\n      throw new Error(\"Phone access is already being requested.\");\n    return this.requestingPhoneAccess = !0, m(\"web_app_request_phone\", \"phone_requested\", {\n      ...t,\n      postEvent: this.postEvent\n    }).then((e) => e.status).finally(() => {\n      this.requestingPhoneAccess = !1;\n    });\n  }\n  /**\n   * Requests write message access to current user.\n   * @param options - additional options.\n   */\n  requestWriteAccess(t = {}) {\n    if (this.requestingWriteAccess)\n      throw new Error(\"Write access is already being requested.\");\n    return this.requestingWriteAccess = !0, m(\"web_app_request_write_access\", \"write_access_requested\", {\n      ...t,\n      postEvent: this.postEvent\n    }).then((e) => e.status).finally(() => {\n      this.requestingWriteAccess = !1;\n    });\n  }\n  /**\n   * A method used to send data to the bot. When this method called, a service message sent to\n   * the bot containing the data of the length up to 4096 bytes, and the Mini App closed. See the\n   * field `web_app_data` in the class [Message](https://core.telegram.org/bots/api#message).\n   *\n   * This method is only available for Mini Apps launched via a Keyboard button.\n   * @param data - data to send to bot.\n   * @throws {Error} data has incorrect size.\n   */\n  sendData(t) {\n    const { size: e } = new Blob([t]);\n    if (e === 0 || e > 4096)\n      throw new Error(`Passed data has incorrect size: ${e}`);\n    this.postEvent(\"web_app_data_send\", { data: t });\n  }\n  /**\n   * Updates current Mini App header color.\n   * @param color - color key or RGB color.\n   */\n  setHeaderColor(t) {\n    this.postEvent(\"web_app_set_header_color\", lt(t) ? { color: t } : { color_key: t }), this.state.set(\"headerColor\", t);\n  }\n  /**\n   * Updates current Mini App background color.\n   * @param color - RGB color.\n   */\n  setBackgroundColor(t) {\n    this.postEvent(\"web_app_set_background_color\", { color: t }), this.state.set(\"backgroundColor\", t);\n  }\n  /**\n   * Inserts the bot's username and the specified inline query in the current chat's input field.\n   * Query may be empty, in which case only the bot's username will be inserted. The client prompts\n   * the user to choose a specific chat, then opens that chat and inserts the bot's username and\n   * the specified inline query in the input field.\n   * @param text - text which should be inserted in the input after the current bot name. Max\n   * length is 256 symbols.\n   * @param chatTypes - List of chat types which could be chosen to send the message. Could be\n   * empty list.\n   */\n  switchInlineQuery(t, e = []) {\n    if (!this.supports(\"switchInlineQuery\") && !this.isBotInline)\n      throw new Error(\"Method is unsupported because Mini App should be launched in inline mode.\");\n    this.postEvent(\"web_app_switch_inline_query\", {\n      query: t,\n      chat_types: e\n    });\n  }\n}\nfunction Be(r, t, e, s, n, i) {\n  const {\n    backgroundColor: a = t,\n    headerColor: c = \"bg_color\"\n  } = r ? $(\"mini-app\") || {} : {}, u = new Te({\n    headerColor: c,\n    backgroundColor: a,\n    version: e,\n    botInline: s,\n    createRequestId: n,\n    postEvent: i\n  }), p = () => L(\"mini-app\", {\n    backgroundColor: u.backgroundColor,\n    headerColor: u.headerColor\n  });\n  return u.on(\"change\", p), u;\n}\nfunction De() {\n  let r = 0;\n  return () => (r += 1, r.toString());\n}\nclass We {\n  constructor(t, e, s = f) {\n    o(this, \"ee\", new w());\n    o(this, \"state\");\n    /**\n     * Adds event listener.\n     * @param event - event name.\n     * @param listener - event listener.\n     */\n    o(this, \"on\", (t, e) => t === \"click\" ? y(\"settings_button_pressed\", e) : this.ee.on(t, e));\n    /**\n     * Removes event listener.\n     * @param event - event name.\n     * @param listener - event listener.\n     */\n    o(this, \"off\", (t, e) => t === \"click\" ? I(\"settings_button_pressed\", e) : this.ee.off(t, e));\n    /**\n     * Checks if specified method is supported by current component.\n     */\n    o(this, \"supports\");\n    this.postEvent = s, this.state = new _({ isVisible: t }, this.ee), this.supports = E(e, {\n      show: \"web_app_setup_settings_button\",\n      hide: \"web_app_setup_settings_button\"\n    });\n  }\n  set isVisible(t) {\n    this.state.set(\"isVisible\", t), this.postEvent(\"web_app_setup_settings_button\", { is_visible: t });\n  }\n  /**\n   * True if SettingsButton is currently visible.\n   */\n  get isVisible() {\n    return this.state.get(\"isVisible\");\n  }\n  /**\n   * Hides the SettingsButton.\n   */\n  hide() {\n    this.isVisible = !1;\n  }\n  /**\n   * Shows the SettingsButton.\n   */\n  show() {\n    this.isVisible = !0;\n  }\n}\nfunction Ne(r, t, e) {\n  const { isVisible: s = !1 } = r ? $(\"settings-button\") || {} : {}, n = new We(s, t, e);\n  return n.on(\"change\", () => {\n    L(\"settings-button\", { isVisible: n.isVisible });\n  }), n;\n}\nfunction Oe(r) {\n  const t = new Ft(r);\n  return t.listen(), t;\n}\nasync function At(r) {\n  const t = await m(\"web_app_request_viewport\", \"viewport_changed\", r);\n  return {\n    height: t.height,\n    width: t.width,\n    isExpanded: t.is_expanded,\n    isStateStable: t.is_state_stable\n  };\n}\nfunction D(r) {\n  return r < 0 ? 0 : r;\n}\nclass G {\n  constructor(t) {\n    o(this, \"ee\", new w());\n    o(this, \"state\");\n    o(this, \"postEvent\");\n    /**\n     * Adds new event listener.\n     */\n    o(this, \"on\", this.ee.on.bind(this.ee));\n    /**\n     * Removes event listener.\n     */\n    o(this, \"off\", this.ee.off.bind(this.ee));\n    const {\n      height: e,\n      isExpanded: s,\n      width: n,\n      stableHeight: i,\n      postEvent: a = f\n    } = t;\n    this.postEvent = a, this.state = new _({\n      height: D(e),\n      isExpanded: s,\n      stableHeight: D(i),\n      width: D(n)\n    }, this.ee);\n  }\n  /**\n   * Request viewport information from the Telegram application and updates current Viewport\n   * instance.\n   * @param options - options to request fresh data.\n   */\n  sync(t) {\n    return At(t).then(({ height: e, isExpanded: s, width: n, isStateStable: i }) => {\n      this.state.set({\n        height: e,\n        width: n,\n        isExpanded: s,\n        stableHeight: i ? e : this.state.get(\"stableHeight\")\n      });\n    });\n  }\n  /**\n   * The current height of the visible area of the Mini App.\n   *\n   * The application can display just the top part of the Mini App, with its\n   * lower part remaining outside the screen area. From this position, the\n   * user can \"pull\" the Mini App to its maximum height, while the bot can do\n   * the same by calling `expand` method. As the position of the Mini App\n   * changes, the current height value of the visible area will be updated\n   * in real time.\n   *\n   * Please note that the refresh rate of this value is not sufficient\n   * to smoothly follow the lower border of the window. It should not be\n   * used to pin interface elements to the bottom of the visible area. It's\n   * more appropriate to use the value of the `stableHeight`\n   * field for this purpose.\n   */\n  get height() {\n    return this.state.get(\"height\");\n  }\n  /**\n   * The height of the visible area of the Mini App in its last stable state.\n   *\n   * The application can display just the top part of the Mini App, with its\n   * lower part remaining outside the screen area. From this position,\n   * the user can \"pull\" the Mini App to its maximum height, while the bot can\n   * do the same by calling `expand` method.\n   *\n   * Unlike the value of `height`, the value of `stableHeight`\n   * does not change as the position of the Mini App changes with user\n   * gestures or during animations. The value of `stableHeight`\n   * will be updated after all gestures and animations are completed and\n   * the Mini App reaches its final size.\n   */\n  get stableHeight() {\n    return this.state.get(\"stableHeight\");\n  }\n  /**\n   * Starts listening to viewport changes and applies them.\n   * @returns Function to stop listening.\n   */\n  listen() {\n    return y(\"viewport_changed\", (t) => {\n      const {\n        height: e,\n        width: s,\n        is_expanded: n,\n        is_state_stable: i\n      } = t, a = {\n        height: D(e),\n        isExpanded: n,\n        width: D(s)\n      };\n      i && (a.stableHeight = a.height), this.state.set(a);\n    });\n  }\n  /**\n   * Returns true if the Mini App is expanded to the maximum available height.\n   * Otherwise, if the Mini App occupies part of the screen and can be expanded\n   * to the full height using `expand` method.\n   * @see expand\n   */\n  get isExpanded() {\n    return this.state.get(\"isExpanded\");\n  }\n  /**\n   * Current viewport width.\n   */\n  get width() {\n    return this.state.get(\"width\");\n  }\n  /**\n   * A method that expands the Mini App to the maximum available height. To\n   * find out if the Mini App is expanded to the maximum height, refer to the\n   * value of the `isExpanded`.\n   * @see isExpanded\n   */\n  expand() {\n    this.postEvent(\"web_app_expand\"), this.state.set(\"isExpanded\", !0);\n  }\n  /**\n   * Returns true in case current viewport height is stable and is not going to\n   * change in the next moment.\n   */\n  get isStable() {\n    return this.stableHeight === this.height;\n  }\n}\nfunction Rt(r) {\n  return ![\"macos\", \"web\", \"weba\"].includes(r);\n}\nfunction Vt(r, t, e) {\n  if (r || !Rt(t))\n    return new G({\n      height: window.innerHeight,\n      isExpanded: !0,\n      postEvent: e,\n      stableHeight: window.innerHeight,\n      width: window.innerWidth\n    });\n  const s = $(\"viewport\");\n  return s ? new G({ ...s, postEvent: e }) : null;\n}\nfunction It(r) {\n  return r.listen(), r.on(\"change\", () => L(\"viewport\", {\n    height: r.height,\n    isExpanded: r.isExpanded,\n    stableHeight: r.stableHeight,\n    width: r.width\n  })), r;\n}\nfunction He(r, t, e) {\n  const s = It(\n    Vt(r, t, e) || new G({\n      width: 0,\n      height: 0,\n      isExpanded: !1,\n      postEvent: e,\n      stableHeight: 0\n    })\n  );\n  return Rt(t) && s.sync({ postEvent: e, timeout: 100 }).catch((n) => {\n    console.error(\"Unable to actualize viewport state\", n);\n  }), s;\n}\nasync function Ue(r, t, e) {\n  return It(\n    Vt(r, t, e) || await At({ postEvent: e, timeout: 100 }).then(({ height: s, isStateStable: n, ...i }) => new G({\n      ...i,\n      height: s,\n      stableHeight: n ? s : 0\n    }))\n  );\n}\nfunction S(r, t) {\n  document.documentElement.style.setProperty(r, t);\n}\nfunction Me(r, t) {\n  const e = () => {\n    S(\"--tg-background-color\", r.backgroundColor);\n  }, s = () => {\n    const {\n      backgroundColor: n,\n      secondaryBackgroundColor: i\n    } = t;\n    r.headerColor === \"bg_color\" ? n && S(\"--tg-header-color\", n) : r.headerColor === \"secondary_bg_color\" ? i && S(\"--tg-header-color\", i) : S(\"--tg-header-color\", r.headerColor);\n  };\n  t.on(\"change\", s), r.on(\"change:backgroundColor\", e), r.on(\"change:headerColor\", s), e(), s();\n}\nfunction je(r) {\n  const t = () => {\n    const e = r.getState();\n    Object.entries(e).forEach(([s, n]) => {\n      if (n) {\n        const i = s.replace(/[A-Z]/g, (a) => `-${a.toLowerCase()}`);\n        S(`--tg-theme-${i}`, n);\n      }\n    });\n  };\n  r.on(\"change\", t), t();\n}\nfunction ot(r) {\n  const t = () => S(\"--tg-viewport-height\", `${r.height}px`), e = () => S(\"--tg-viewport-width\", `${r.width}px`), s = () => S(\"--tg-viewport-height\", `${r.stableHeight}px`);\n  r.on(\"change:height\", t), r.on(\"change:width\", e), r.on(\"change:stableHeight\", s), t(), e(), s();\n}\nfunction Ge(r) {\n  return typeof r == \"object\" ? r : r ? {\n    themeParams: !0,\n    viewport: !0,\n    miniApp: !0\n  } : {};\n}\nfunction at(r, t, e, s) {\n  const n = Ge(r);\n  n.miniApp && Me(t, e), n.themeParams && je(e), n.viewport && (s instanceof Promise ? s.then(ot) : ot(s));\n}\nfunction Fe(r) {\n  const { hostname: t, pathname: e } = new URL(r, window.location.href);\n  if (t !== \"t.me\")\n    throw new Error(`Incorrect hostname: ${t}`);\n  const s = e.match(/^\\/(\\$|invoice\\/)([A-Za-z0-9\\-_=]+)$/);\n  if (s === null)\n    throw new Error('Link pathname has incorrect format. Expected to receive \"/invoice/{slug}\" or \"/${slug}\"');\n  return s[2];\n}\nclass ze {\n  constructor(t, e = f) {\n    o(this, \"ee\", new w());\n    o(this, \"state\");\n    /**\n     * Adds new event listener.\n     */\n    o(this, \"on\", this.ee.on.bind(this.ee));\n    /**\n     * Removes event listener.\n     */\n    o(this, \"off\", this.ee.off.bind(this.ee));\n    /**\n     * Checks if specified method is supported by current component.\n     */\n    o(this, \"supports\");\n    this.postEvent = e, this.state = new _({ isOpened: !1 }, this.ee), this.supports = E(t, { open: \"web_app_open_invoice\" });\n  }\n  set isOpened(t) {\n    this.state.set(\"isOpened\", t);\n  }\n  /**\n   * True if invoice is currently opened.\n   */\n  get isOpened() {\n    return this.state.get(\"isOpened\");\n  }\n  async open(t, e) {\n    if (this.isOpened)\n      throw new Error(\"Invoice is already opened\");\n    const s = e ? Fe(t) : t;\n    this.isOpened = !0;\n    try {\n      return (await m(\n        \"web_app_open_invoice\",\n        { slug: s },\n        \"invoice_closed\",\n        {\n          postEvent: this.postEvent,\n          capture(i) {\n            return s === i.slug;\n          }\n        }\n      )).status;\n    } finally {\n      this.isOpened = !1;\n    }\n  }\n}\nfunction Je(r) {\n  const t = r.message.trim(), e = (r.title || \"\").trim(), s = r.buttons || [];\n  let n;\n  if (e.length > 64)\n    throw new Error(`Title has incorrect size: ${e.length}`);\n  if (t.length === 0 || t.length > 256)\n    throw new Error(`Message has incorrect size: ${t.length}`);\n  if (s.length > 3)\n    throw new Error(`Buttons have incorrect size: ${s.length}`);\n  return s.length === 0 ? n = [{ type: \"close\", id: \"\" }] : n = s.map((i) => {\n    const { id: a = \"\" } = i;\n    if (a.length > 64)\n      throw new Error(`Button ID has incorrect size: ${a}`);\n    if (i.type === void 0 || i.type === \"default\" || i.type === \"destructive\") {\n      const c = i.text.trim();\n      if (c.length === 0 || c.length > 64) {\n        const u = i.type || \"default\";\n        throw new Error(`Button text with type \"${u}\" has incorrect size: ${i.text.length}`);\n      }\n      return { ...i, text: c, id: a };\n    }\n    return { ...i, id: a };\n  }), { title: e, message: t, buttons: n };\n}\nclass Qe {\n  constructor(t, e = f) {\n    o(this, \"ee\", new w());\n    o(this, \"state\");\n    /**\n     * Adds new event listener.\n     */\n    o(this, \"on\", this.ee.on.bind(this.ee));\n    /**\n     * Removes event listener.\n     */\n    o(this, \"off\", this.ee.off.bind(this.ee));\n    /**\n     * Checks if specified method is supported by current component.\n     */\n    o(this, \"supports\");\n    this.postEvent = e, this.state = new _({ isOpened: !1 }, this.ee), this.supports = E(t, { open: \"web_app_open_popup\" });\n  }\n  set isOpened(t) {\n    this.state.set(\"isOpened\", t);\n  }\n  /**\n   * True if popup is currently opened.\n   */\n  get isOpened() {\n    return this.state.get(\"isOpened\");\n  }\n  /**\n   * A method that shows a native popup described by the `params` argument.\n   * Promise will be resolved when popup is closed. Resolved value will have\n   * an identifier of pressed button.\n   *\n   * In case, user clicked outside the popup or clicked top right popup close\n   * button, null will be returned.\n   *\n   * FIXME: In desktop, this function may work incorrectly.\n   *  Issue: https://github.com/Telegram-Mini-Apps/tma.js/issues/7\n   * @param options - popup parameters.\n   * @throws {Error} Popup is already opened.\n   */\n  open(t) {\n    if (this.isOpened)\n      throw new Error(\"Popup is already opened.\");\n    return this.isOpened = !0, m(\n      \"web_app_open_popup\",\n      Je(t),\n      \"popup_closed\",\n      { postEvent: this.postEvent }\n    ).then(({ button_id: e = null }) => e).finally(() => {\n      this.isOpened = !1;\n    });\n  }\n}\nclass Ze {\n  constructor(t, e = f) {\n    o(this, \"ee\", new w());\n    o(this, \"state\");\n    /**\n     * Adds new event listener.\n     */\n    o(this, \"on\", this.ee.on.bind(this.ee));\n    /**\n     * Removes event listener.\n     */\n    o(this, \"off\", this.ee.off.bind(this.ee));\n    /**\n     * Checks if specified method is supported by current component.\n     */\n    o(this, \"supports\");\n    this.postEvent = e, this.state = new _({ isOpened: !1 }, this.ee), this.supports = E(t, {\n      close: \"web_app_close_scan_qr_popup\",\n      open: \"web_app_open_scan_qr_popup\"\n    });\n  }\n  /**\n   * Closes scanner.\n   */\n  close() {\n    this.postEvent(\"web_app_close_scan_qr_popup\"), this.isOpened = !1;\n  }\n  set isOpened(t) {\n    this.state.set(\"isOpened\", t);\n  }\n  /**\n   * Returns true in case, QR scanner is currently opened.\n   */\n  get isOpened() {\n    return this.state.get(\"isOpened\");\n  }\n  /**\n   * Opens scanner with specified title shown to user. Method returns promise\n   * with scanned QR content in case, it was scanned. It will contain null in\n   * case, scanner was closed.\n   * @param text - title to display.\n   */\n  async open(t) {\n    if (this.isOpened)\n      throw new Error(\"QR scanner is already opened.\");\n    this.isOpened = !0;\n    try {\n      const e = await m(\n        \"web_app_open_scan_qr_popup\",\n        { text: t },\n        [\"qr_text_received\", \"scan_qr_popup_closed\"],\n        { postEvent: this.postEvent }\n      );\n      return typeof e == \"object\" && typeof e.data == \"string\" ? e.data : null;\n    } finally {\n      this.isOpened = !1;\n    }\n  }\n}\nclass Ke {\n  constructor(t, e, s = f) {\n    /**\n     * Checks if specified method is supported by current component.\n     */\n    o(this, \"supports\");\n    /**\n     * Checks if specified method parameter is supported by current component.\n     */\n    o(this, \"supportsParam\");\n    this.version = t, this.createRequestId = e, this.postEvent = s, this.supports = E(t, {\n      readTextFromClipboard: \"web_app_read_text_from_clipboard\"\n    }), this.supportsParam = kt(t, {\n      \"openLink.tryInstantView\": [\"web_app_open_link\", \"try_instant_view\"]\n    });\n  }\n  /**\n   * Opens a link in an external browser. The Mini App will not be closed.\n   *\n   * Note that this method can be called only in response to the user\n   * interaction with the Mini App interface (e.g. click inside the Mini App\n   * or on the main button).\n   * @param url - URL to be opened.\n   * @param tryInstantView\n   */\n  openLink(t, e) {\n    const s = new URL(t, window.location.href).toString();\n    if (!A(\"web_app_open_link\", this.version)) {\n      window.open(s, \"_blank\");\n      return;\n    }\n    this.postEvent(\"web_app_open_link\", {\n      url: s,\n      ...typeof e == \"boolean\" ? { try_instant_view: e } : {}\n    });\n  }\n  /**\n   * Opens a Telegram link inside Telegram app. The Mini App will be closed. It expects passing\n   * link in full format, with hostname \"t.me\".\n   * @param url - URL to be opened.\n   * @throws {Error} URL has not allowed hostname.\n   */\n  openTelegramLink(t) {\n    const {\n      hostname: e,\n      pathname: s,\n      search: n\n    } = new URL(t, window.location.href);\n    if (e !== \"t.me\")\n      throw new Error(`URL has not allowed hostname: ${e}. Only \"t.me\" is allowed`);\n    if (!A(\"web_app_open_tg_link\", this.version)) {\n      window.location.href = t;\n      return;\n    }\n    this.postEvent(\"web_app_open_tg_link\", { path_full: s + n });\n  }\n  /**\n   * Reads text from clipboard and returns string or null. null is returned\n   * in cases:\n   * - Value in clipboard is not text\n   * - Access to clipboard is not allowed\n   */\n  readTextFromClipboard() {\n    return m(\n      \"web_app_read_text_from_clipboard\",\n      { req_id: this.createRequestId() },\n      \"clipboard_text_received\",\n      { postEvent: this.postEvent }\n    ).then(({ data: t = null }) => t);\n  }\n}\nfunction ur(r = {}) {\n  const {\n    async: t = !1,\n    cssVars: e = !1,\n    acceptCustomStyles: s = !1\n  } = r;\n  try {\n    const {\n      launchParams: {\n        initData: n,\n        initDataRaw: i,\n        version: a,\n        platform: c,\n        themeParams: u,\n        botInline: p = !1\n      },\n      isPageReload: l\n    } = Ct(), b = De(), d = ye(a);\n    vt() && (s && Ae(), d(\"iframe_ready\", { reload_supported: !0 }), y(\"reload_iframe\", () => window.location.reload()));\n    const C = {\n      backButton: Re(l, a, d),\n      closingBehavior: Ve(l, d),\n      cloudStorage: new xe(a, b, d),\n      createRequestId: b,\n      hapticFeedback: new qe(a, d),\n      invoice: new ze(a, d),\n      mainButton: Le(\n        l,\n        u.buttonColor || \"#000000\",\n        u.buttonTextColor || \"#ffffff\",\n        d\n      ),\n      miniApp: Be(\n        l,\n        u.backgroundColor || \"#ffffff\",\n        a,\n        p,\n        b,\n        d\n      ),\n      popup: new Qe(a, d),\n      postEvent: d,\n      qrScanner: new Ze(a, d),\n      settingsButton: Ne(l, a, d),\n      themeParams: Oe(u),\n      utils: new Ke(a, b, d),\n      ...n ? {\n        initData: new Ut(n),\n        initDataRaw: i\n      } : {}\n    }, x = t ? Ue(l, c, d) : He(l, c, d);\n    return x instanceof Promise ? x.then((T) => (at(\n      e,\n      C.miniApp,\n      C.themeParams,\n      T\n    ), {\n      ...C,\n      viewport: T\n    })) : (at(\n      e,\n      C.miniApp,\n      C.themeParams,\n      x\n    ), { ...C, viewport: x });\n  } catch (n) {\n    if (t)\n      return Promise.reject(n);\n    throw n;\n  }\n}\nfunction W(r, t) {\n  return r.startsWith(t) ? r : `${t}${r}`;\n}\nfunction pr(r) {\n  const t = r.match(/#(.+)/);\n  return t ? t[1] : null;\n}\nasync function O(r) {\n  return r === 0 ? !0 : Promise.race([\n    new Promise((t) => {\n      window.addEventListener(\"popstate\", function e() {\n        window.removeEventListener(\"popstate\", e), t(!0);\n      }), window.history.go(r);\n    }),\n    // Usually, it takes about 1ms to emit this event, but we use some buffer.\n    new Promise((t) => {\n      setTimeout(t, 50, !1);\n    })\n  ]);\n}\nasync function Ye() {\n  if (window.history.length <= 1 || (window.history.pushState(null, \"\"), await O(1 - window.history.length)))\n    return;\n  let t = await O(-1);\n  for (; t; )\n    t = await O(-1);\n}\nclass Xe {\n  constructor(t, e, {\n    debug: s = !1,\n    loggerPrefix: n = \"Navigator\"\n  }) {\n    o(this, \"logger\");\n    o(this, \"entries\");\n    if (this.entriesCursor = e, t.length === 0)\n      throw new Error(\"Entries list should not be empty.\");\n    if (e >= t.length)\n      throw new Error(\"Cursor should be less than entries count.\");\n    this.entries = t.map(({ pathname: i = \"\", search: a, hash: c }) => {\n      if (!i.startsWith(\"/\") && i.length > 0)\n        throw new Error('Pathname should start with \"/\"');\n      return {\n        pathname: W(i, \"/\"),\n        search: a ? W(a, \"?\") : \"\",\n        hash: c ? W(c, \"#\") : \"\"\n      };\n    }), this.logger = new Pt(`[${n}]`, s);\n  }\n  /**\n   * Converts entry to the navigation entry.\n   * @param entry - entry data\n   */\n  formatEntry(t) {\n    let e;\n    if (typeof t == \"string\")\n      e = t;\n    else {\n      const {\n        pathname: a = \"\",\n        search: c,\n        hash: u\n      } = t;\n      e = a + (c ? W(c, \"?\") : \"\") + (u ? W(u, \"#\") : \"\");\n    }\n    const {\n      pathname: s,\n      search: n,\n      hash: i\n    } = new URL(e, `https://localhost${this.path}`);\n    return {\n      pathname: s,\n      search: n,\n      hash: i\n    };\n  }\n  /**\n   * Current entry.\n   */\n  get entry() {\n    return this.entries[this.entriesCursor];\n  }\n  /**\n   * Goes back in history.\n   */\n  back() {\n    return this.go(-1);\n  }\n  /**\n   * Current entries cursor.\n   */\n  get cursor() {\n    return this.entriesCursor;\n  }\n  /**\n   * True if navigator can go back.\n   */\n  get canGoBack() {\n    return this.entriesCursor > 0;\n  }\n  /**\n   * True if navigator can go forward.\n   */\n  get canGoForward() {\n    return this.entriesCursor !== this.entries.length - 1;\n  }\n  /**\n   * Goes forward in history.\n   */\n  forward() {\n    return this.go(1);\n  }\n  /**\n   * Moves entries cursor by specified delta.\n   * @param delta - cursor delta.\n   */\n  go(t) {\n    this.logger.log(`called go(${t})`);\n    const e = Math.min(\n      this.entries.length - 1,\n      Math.max(this.entriesCursor + t, 0)\n    );\n    if (this.entriesCursor === e)\n      return this.performGo({\n        updated: !1,\n        delta: t\n      });\n    const s = this.entry;\n    this.entriesCursor = e;\n    const n = this.entry;\n    return this.logger.log(\"State changed\", { before: s, after: n }), this.performGo({\n      updated: !0,\n      delta: t,\n      before: s,\n      after: n\n    });\n  }\n  /**\n   * Returns copy of navigator entries.\n   */\n  getEntries() {\n    return this.entries.map((t) => ({ ...t }));\n  }\n  /**\n   * Current hash.\n   * @example\n   * \"\", \"#\", \"#hash\"\n   */\n  get hash() {\n    return this.entry.hash;\n  }\n  /**\n   * Pushes new entry. Method replaces all entries after the current one with the inserted.\n   * @param entry - entry data.\n   *\n   * @example Pushing absolute pathname.\n   * push(\"/absolute-path\"); // \"/absolute-path\"\n   *\n   * @example Pushing relative pathname.\n   * // Pushing relative path replaces N last path parts, where N is pushed pathname parts count.\n   * // Pushing empty path is recognized as relative, but not replacing the last pathname part.\n   * push(\"relative\"); // \"/home/root\" -> \"/home/relative\"\n   *\n   * @example Pushing query parameters.\n   * push(\"/absolute?my-param=1\"); // \"/home\" -> \"/absolute?my-param=1\"\n   * push(\"relative?my-param=1\"); // \"/home/root\" -> \"/home/relative?my-param=1\"\n   * push(\"?my-param=1\"); // \"/home\" -> \"/home?my-param=1\"\n   *\n   * @example Pushing hash.\n   * push(\"#my-hash\"); // \"/home\" -> \"/home#my-hash\"\n   * push(\"johny#my-hash\"); // \"/home/root\" -> \"/home/johny#my-hash\"\n   */\n  push(t) {\n    this.entriesCursor !== this.entries.length - 1 && this.entries.splice(this.entriesCursor + 1);\n    const e = this.formatEntry(t), s = this.entry;\n    this.entriesCursor += 1, this.entries[this.entriesCursor] = e;\n    const n = this.entry;\n    return this.logger.log(\"State changed\", { before: s, after: n }), this.performPush({\n      before: s,\n      after: n\n    });\n  }\n  /**\n   * Current full path including pathname, query parameters and hash.\n   */\n  get path() {\n    return `${this.pathname}${this.search}${this.hash}`;\n  }\n  /**\n   * Current pathname.\n   * @example\n   * \"/\", \"/abc\"\n   */\n  get pathname() {\n    return this.entry.pathname;\n  }\n  /**\n   * Replaces current entry. Has the same logic as `push` method.\n   * @param entry - entry data.\n   * @see push\n   * @returns True if changes were done.\n   */\n  replace(t) {\n    const e = this.formatEntry(t);\n    if (this.search === e.search && this.pathname === e.pathname && this.hash === e.hash)\n      return this.performReplace({\n        updated: !1,\n        entry: e\n      });\n    const s = this.entry;\n    this.entries[this.entriesCursor] = e;\n    const n = this.entry;\n    return this.logger.log(\"State changed\", { before: s, after: n }), this.performReplace({\n      updated: !0,\n      before: s,\n      after: n\n    });\n  }\n  /**\n   * Current query parameters.\n   * @example\n   * \"\", \"?\", \"?a=1\"\n   */\n  get search() {\n    return this.entry.search;\n  }\n}\nconst ct = 0, Z = 1, K = 2;\nclass Lt extends Xe {\n  constructor(e, s, n = {}) {\n    super(e, s, {\n      ...n,\n      loggerPrefix: \"HashNavigator\"\n    });\n    o(this, \"ee\", new w());\n    o(this, \"attached\", !1);\n    /**\n     * Handles window \"popstate\" event.\n     * @param state - event state.\n     */\n    o(this, \"onPopState\", async ({ state: e }) => {\n      if (this.logger.log('\"popstate\" event received. State:', e), e === null)\n        return this.push(window.location.hash.slice(1));\n      if (e === ct) {\n        this.logger.log(\"Void reached. Moving history forward\"), window.history.forward();\n        return;\n      }\n      if (e === Z)\n        return this.back();\n      if (e === K)\n        return this.forward();\n    });\n    o(this, \"back\", () => super.back());\n    /**\n     * Adds new event listener.\n     */\n    o(this, \"on\", this.ee.on.bind(this.ee));\n    /**\n     * Removes event listener.\n     */\n    o(this, \"off\", this.ee.off.bind(this.ee));\n  }\n  /**\n   * Creates navigator from current window location hash.\n   * @param options - options passed to constructor.\n   */\n  static fromLocation(e) {\n    const {\n      search: s,\n      pathname: n,\n      hash: i\n    } = new URL(\n      window.location.hash.slice(1),\n      window.location.href\n    );\n    return new Lt([{ search: s, pathname: n, hash: i }], 0, e);\n  }\n  async performGo(e) {\n    e.updated && (this.attached && await this.syncHistory(), this.emitChanged(e.before, e.after));\n  }\n  async performPush({ before: e, after: s }) {\n    this.attached && await this.syncHistory(), this.emitChanged(e, s);\n  }\n  async performReplace(e) {\n    e.updated && (this.attached && window.history.replaceState(null, \"\", `#${this.path}`), this.emitChanged(e.before, e.after));\n  }\n  /**\n   * Synchronizes current navigator state with browser history.\n   */\n  async syncHistory() {\n    window.removeEventListener(\"popstate\", this.onPopState);\n    const e = `#${this.path}`;\n    await Ye(), f(\"web_app_setup_back_button\", { is_visible: this.canGoBack }), this.canGoBack && this.canGoForward ? (this.logger.log(\"Setting up history: [<-, *, ->]\"), window.history.replaceState(Z, \"\"), window.history.pushState(null, \"\", e), window.history.pushState(K, \"\"), await O(-1)) : this.canGoBack ? (this.logger.log(\"Setting up history: [<-, *]\"), window.history.replaceState(Z, \"\"), window.history.pushState(null, \"\", e)) : this.canGoForward ? (this.logger.log(\"Setting up history: [*, ->]\"), window.history.replaceState(null, e), window.history.pushState(K, \"\"), await O(-1)) : (this.logger.log(\"Setting up history: [~, *]\"), window.history.replaceState(ct, \"\"), window.history.pushState(null, \"\", e)), window.addEventListener(\"popstate\", this.onPopState);\n  }\n  emitChanged(e, s) {\n    this.ee.emit(\"change\", {\n      navigator: this,\n      from: e,\n      to: s\n    });\n  }\n  /**\n   * Attaches current navigator to the browser history allowing navigator to manipulate it.\n   */\n  async attach() {\n    if (!this.attached)\n      return this.logger.log(\"Attaching\", this), this.attached = !0, y(\"back_button_pressed\", this.back), this.syncHistory();\n  }\n  /**\n   * Detaches current navigator from the browser history.\n   */\n  detach() {\n    this.attached && (this.logger.log(\"Detaching\", this), this.attached = !1, window.removeEventListener(\"popstate\", this.onPopState), I(\"back_button_pressed\", this.back));\n  }\n}\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@tma.js+sdk@1.2.0/node_modules/@tma.js/sdk/dist/index.mjs\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("(app-pages-browser)/./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5Ccode%5CTelegram-App%5Cminiapp%5Cnode_modules%5C.pnpm%5Cnext%4014.0.4_react-dom%4018.2.0_react%4018.2.0%5Cnode_modules%5Cnext%5Cfont%5Cgoogle%5Ctarget.css%3F%7B%22path%22%3A%22src%5C%5Capp%5C%5Clayout.tsx%22%2C%22import%22%3A%22Inter%22%2C%22arguments%22%3A%5B%7B%22subsets%22%3A%5B%22latin%22%5D%7D%5D%2C%22variableName%22%3A%22inter%22%7D&modules=C%3A%5Ccode%5CTelegram-App%5Cminiapp%5Csrc%5Capp%5Cglobals.css&modules=C%3A%5Ccode%5CTelegram-App%5Cminiapp%5Csrc%5Capp%5CTmaSDKLoader.tsx&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);