"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@tma.js+sdk@1.2.0";
exports.ids = ["vendor-chunks/@tma.js+sdk@1.2.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@tma.js+sdk@1.2.0/node_modules/@tma.js/sdk/dist/index.mjs":
/*!**************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tma.js+sdk@1.2.0/node_modules/@tma.js/sdk/dist/index.mjs ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BackButton: () => (/* binding */ ve),\n/* harmony export */   ClosingBehavior: () => (/* binding */ ke),\n/* harmony export */   CloudStorage: () => (/* binding */ xe),\n/* harmony export */   HapticFeedback: () => (/* binding */ qe),\n/* harmony export */   HashNavigator: () => (/* binding */ Lt),\n/* harmony export */   InitData: () => (/* binding */ Ut),\n/* harmony export */   Invoice: () => (/* binding */ ze),\n/* harmony export */   MainButton: () => (/* binding */ Ie),\n/* harmony export */   MethodUnsupportedError: () => (/* binding */ tt),\n/* harmony export */   MiniApp: () => (/* binding */ Te),\n/* harmony export */   Navigator: () => (/* binding */ Xe),\n/* harmony export */   ParameterUnsupportedError: () => (/* binding */ et),\n/* harmony export */   Popup: () => (/* binding */ Qe),\n/* harmony export */   QRScanner: () => (/* binding */ Ze),\n/* harmony export */   SettingsButton: () => (/* binding */ We),\n/* harmony export */   ThemeParams: () => (/* binding */ Ft),\n/* harmony export */   TimeoutError: () => (/* binding */ J),\n/* harmony export */   Utils: () => (/* binding */ Ke),\n/* harmony export */   Viewport: () => (/* binding */ G),\n/* harmony export */   chatParser: () => (/* binding */ Ht),\n/* harmony export */   classNames: () => (/* binding */ Pe),\n/* harmony export */   compareVersions: () => (/* binding */ me),\n/* harmony export */   createPostEvent: () => (/* binding */ ye),\n/* harmony export */   getHash: () => (/* binding */ pr),\n/* harmony export */   init: () => (/* binding */ ur),\n/* harmony export */   initDataParser: () => (/* binding */ wt),\n/* harmony export */   invokeCustomMethod: () => (/* binding */ N),\n/* harmony export */   isColorDark: () => (/* binding */ ft),\n/* harmony export */   isIframe: () => (/* binding */ vt),\n/* harmony export */   isRGB: () => (/* binding */ lt),\n/* harmony export */   isRGBShort: () => (/* binding */ Ot),\n/* harmony export */   isRecord: () => (/* binding */ H),\n/* harmony export */   isTMA: () => (/* binding */ sr),\n/* harmony export */   isTimeoutError: () => (/* binding */ cr),\n/* harmony export */   launchParamsParser: () => (/* binding */ mt),\n/* harmony export */   mergeClassNames: () => (/* binding */ hr),\n/* harmony export */   off: () => (/* binding */ I),\n/* harmony export */   on: () => (/* binding */ y),\n/* harmony export */   once: () => (/* binding */ or),\n/* harmony export */   parseInitData: () => (/* binding */ er),\n/* harmony export */   parseLaunchParams: () => (/* binding */ yt),\n/* harmony export */   parseThemeParams: () => (/* binding */ bt),\n/* harmony export */   postEvent: () => (/* binding */ f),\n/* harmony export */   request: () => (/* binding */ m),\n/* harmony export */   requestThemeParams: () => (/* binding */ rr),\n/* harmony export */   requestViewport: () => (/* binding */ At),\n/* harmony export */   retrieveLaunchData: () => (/* binding */ Ct),\n/* harmony export */   serializeLaunchParams: () => (/* binding */ Zt),\n/* harmony export */   serializeThemeParams: () => (/* binding */ Gt),\n/* harmony export */   setDebug: () => (/* binding */ nr),\n/* harmony export */   setTargetOrigin: () => (/* binding */ ir),\n/* harmony export */   subscribe: () => (/* binding */ ar),\n/* harmony export */   supports: () => (/* binding */ A),\n/* harmony export */   themeParamsParser: () => (/* binding */ _t),\n/* harmony export */   toRGB: () => (/* binding */ dt),\n/* harmony export */   unsubscribe: () => (/* binding */ be),\n/* harmony export */   userParser: () => (/* binding */ rt),\n/* harmony export */   withTimeout: () => (/* binding */ xt)\n/* harmony export */ });\nvar $t = Object.defineProperty;\nvar Tt = (r, t, e)=>t in r ? $t(r, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : r[t] = e;\nvar o = (r, t, e)=>(Tt(r, typeof t != \"symbol\" ? t + \"\" : t, e), e);\nfunction H(r) {\n    return typeof r == \"object\" && r !== null && !Array.isArray(r);\n}\nfunction ht() {\n    return performance.getEntriesByType(\"navigation\")[0] || null;\n}\nfunction Bt() {\n    const r = ht();\n    return r ? r.type === \"reload\" : null;\n}\nfunction R() {\n    return new TypeError(\"Value has unexpected type\");\n}\nclass F extends Error {\n    constructor(e, { cause: s, type: n } = {}){\n        super(`Unable to parse value${n ? ` as ${n}` : \"\"}`, {\n            cause: s\n        });\n        /**\n     * Parser name.\n     */ o(this, \"type\");\n        this.value = e, Object.setPrototypeOf(this, F.prototype), this.type = n;\n    }\n}\nclass z {\n    constructor(t, e, s){\n        this.parser = t, this.isOptional = e, this.type = s;\n    }\n    parse(t) {\n        if (!(this.isOptional && t === void 0)) try {\n            return this.parser(t);\n        } catch (e) {\n            throw new F(t, {\n                type: this.type,\n                cause: e\n            });\n        }\n    }\n    optional() {\n        return this.isOptional = !0, this;\n    }\n}\nfunction Dt(r) {\n    if (Array.isArray(r)) return r;\n    if (typeof r == \"string\") try {\n        const t = JSON.parse(r);\n        if (Array.isArray(t)) return t;\n    } catch  {}\n    throw R();\n}\nclass Wt extends z {\n    constructor(e, s, n){\n        super(Dt, s, n);\n        o(this, \"itemParser\");\n        this.itemParser = typeof e == \"function\" ? e : e.parse.bind(e);\n    }\n    parse(e) {\n        const s = super.parse(e);\n        return s === void 0 ? s : s.map(this.itemParser);\n    }\n    of(e) {\n        return this.itemParser = typeof e == \"function\" ? e : e.parse.bind(e), this;\n    }\n}\nfunction V(r, t) {\n    return ()=>new z(r, !1, t);\n}\nclass j extends Error {\n    constructor(t, { cause: e, type: s } = {}){\n        super(`Unable to parse field \"${t}\"${s ? ` as ${s}` : \"\"}`, {\n            cause: e\n        }), Object.setPrototypeOf(this, j.prototype);\n    }\n}\nfunction ut(r, t) {\n    const e = {};\n    for(const s in r){\n        const n = r[s];\n        if (!n) continue;\n        let i, a;\n        if (typeof n == \"function\" || \"parse\" in n) i = s, a = typeof n == \"function\" ? n : n.parse.bind(n);\n        else {\n            const { type: p } = n;\n            i = n.from || s, a = typeof p == \"function\" ? p : p.parse.bind(p);\n        }\n        let c;\n        const u = t(i);\n        try {\n            c = a(u);\n        } catch (p) {\n            throw p instanceof F ? new j(i, {\n                type: p.type,\n                cause: p\n            }) : new j(i, {\n                cause: p\n            });\n        }\n        c !== void 0 && (e[s] = c);\n    }\n    return e;\n}\nfunction Nt(r) {\n    return new Wt((t)=>t, !1, r);\n}\nconst P = V((r)=>{\n    if (typeof r == \"boolean\") return r;\n    const t = String(r);\n    if (t === \"1\" || t === \"true\") return !0;\n    if (t === \"0\" || t === \"false\") return !1;\n    throw R();\n}, \"boolean\"), k = V((r)=>{\n    if (typeof r == \"number\") return r;\n    if (typeof r == \"string\") {\n        const t = Number(r);\n        if (!Number.isNaN(t)) return t;\n    }\n    throw R();\n}, \"number\"), pt = V((r)=>r instanceof Date ? r : new Date(k().parse(r) * 1e3), \"Date\");\nfunction Y(r) {\n    let t = r;\n    if (typeof t == \"string\" && (t = JSON.parse(t)), typeof t != \"object\" || t === null || Array.isArray(t)) throw R();\n    return t;\n}\nfunction g(r, t) {\n    return new z((e)=>{\n        const s = Y(e);\n        return ut(r, (n)=>s[n]);\n    }, !1, t);\n}\nfunction lt(r) {\n    return /^#[\\da-f]{6}$/i.test(r);\n}\nfunction Ot(r) {\n    return /^#[\\da-f]{3}$/i.test(r);\n}\nfunction dt(r) {\n    const t = r.replace(/\\s/g, \"\").toLowerCase();\n    if (lt(t)) return t;\n    if (Ot(t)) {\n        let s = \"#\";\n        for(let n = 0; n < 3; n += 1)s += t[1 + n].repeat(2);\n        return s;\n    }\n    const e = t.match(/^rgb\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3})\\)$/) || t.match(/^rgba\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3}),\\d{1,3}\\)$/);\n    if (e === null) throw new Error(`Value \"${r}\" does not satisfy any of known RGB formats.`);\n    return e.slice(1).reduce((s, n)=>{\n        const i = parseInt(n, 10).toString(16);\n        return s + (i.length === 1 ? \"0\" : \"\") + i;\n    }, \"#\");\n}\nfunction ft(r) {\n    const t = dt(r);\n    return Math.sqrt([\n        0.299,\n        0.587,\n        0.114\n    ].reduce((s, n, i)=>{\n        const a = parseInt(t.slice(1 + i * 2, 1 + (i + 1) * 2), 16);\n        return s + a * a * n;\n    }, 0)) < 120;\n}\nconst h = V((r)=>{\n    if (typeof r == \"string\" || typeof r == \"number\") return r.toString();\n    throw R();\n}, \"string\"), gt = V((r)=>dt(h().parse(r)), \"rgb\");\nfunction X(r, t) {\n    return new z((e)=>{\n        if (typeof e != \"string\" && !(e instanceof URLSearchParams)) throw R();\n        const s = typeof e == \"string\" ? new URLSearchParams(e) : e;\n        return ut(r, (n)=>{\n            const i = s.get(n);\n            return i === null ? void 0 : i;\n        });\n    }, !1, t);\n}\nfunction Ht() {\n    return g({\n        id: k(),\n        type: h(),\n        title: h(),\n        photoUrl: {\n            type: h().optional(),\n            from: \"photo_url\"\n        },\n        username: h().optional()\n    }, \"Chat\");\n}\nclass Ut {\n    constructor(t){\n        this.initData = t;\n    }\n    /**\n   * @see InitDataParsed.authDate\n   */ get authDate() {\n        return this.initData.authDate;\n    }\n    /**\n   * @see InitDataParsed.canSendAfter\n   */ get canSendAfter() {\n        return this.initData.canSendAfter;\n    }\n    /**\n   * Date after which it is allowed to call\n   * the [answerWebAppQuery](https://core.telegram.org/bots/api#answerwebappquery) method.\n   */ get canSendAfterDate() {\n        const { canSendAfter: t } = this;\n        return t === void 0 ? void 0 : new Date(this.authDate.getTime() + t * 1e3);\n    }\n    /**\n   * @see InitDataParsed.chat\n   */ get chat() {\n        return this.initData.chat;\n    }\n    /**\n   * @see InitDataParsed.chatType\n   */ get chatType() {\n        return this.initData.chatType;\n    }\n    /**\n   * @see InitDataParsed.chatInstance\n   */ get chatInstance() {\n        return this.initData.chatInstance;\n    }\n    /**\n   * @see InitDataParsed.hash\n   */ get hash() {\n        return this.initData.hash;\n    }\n    /**\n   * @see InitDataParsed.queryId\n   */ get queryId() {\n        return this.initData.queryId;\n    }\n    /**\n   * @see InitDataParsed.receiver\n   */ get receiver() {\n        return this.initData.receiver;\n    }\n    /**\n   * @see InitDataParsed.startParam\n   */ get startParam() {\n        return this.initData.startParam;\n    }\n    /**\n   * @see InitDataParsed.user\n   */ get user() {\n        return this.initData.user;\n    }\n}\nfunction rt() {\n    return g({\n        addedToAttachmentMenu: {\n            type: P().optional(),\n            from: \"added_to_attachment_menu\"\n        },\n        allowsWriteToPm: {\n            type: P().optional(),\n            from: \"allows_write_to_pm\"\n        },\n        firstName: {\n            type: h(),\n            from: \"first_name\"\n        },\n        id: k(),\n        isBot: {\n            type: P().optional(),\n            from: \"is_bot\"\n        },\n        isPremium: {\n            type: P().optional(),\n            from: \"is_premium\"\n        },\n        languageCode: {\n            type: h().optional(),\n            from: \"language_code\"\n        },\n        lastName: {\n            type: h().optional(),\n            from: \"last_name\"\n        },\n        photoUrl: {\n            type: h().optional(),\n            from: \"photo_url\"\n        },\n        username: h().optional()\n    }, \"User\");\n}\nfunction wt() {\n    return X({\n        authDate: {\n            type: pt(),\n            from: \"auth_date\"\n        },\n        canSendAfter: {\n            type: k().optional(),\n            from: \"can_send_after\"\n        },\n        chat: Ht().optional(),\n        chatInstance: {\n            type: h().optional(),\n            from: \"chat_instance\"\n        },\n        chatType: {\n            type: h().optional(),\n            from: \"chat_type\"\n        },\n        hash: h(),\n        queryId: {\n            type: h().optional(),\n            from: \"query_id\"\n        },\n        receiver: rt().optional(),\n        startParam: {\n            type: h().optional(),\n            from: \"start_param\"\n        },\n        user: rt().optional()\n    }, \"InitData\");\n}\nfunction er(r) {\n    return wt().parse(r);\n}\nfunction Mt(r) {\n    return r.replace(/(^|_)bg/, (t, e)=>`${e}background`).replace(/_([a-z])/g, (t, e)=>e.toUpperCase());\n}\nfunction jt(r) {\n    return r.replace(/[A-Z]/g, (t)=>`_${t.toLowerCase()}`).replace(/(^|_)background/, (t, e)=>`${e}bg`);\n}\nconst _t = V((r)=>{\n    const t = gt().optional();\n    return Object.entries(Y(r)).reduce((e, [s, n])=>(e[Mt(s)] = t.parse(n), e), {});\n}, \"ThemeParams\");\nfunction bt(r) {\n    return _t().parse(r);\n}\nfunction rr(r = {}) {\n    return m(\"web_app_request_theme\", \"theme_changed\", r).then(bt);\n}\nfunction Gt(r) {\n    return JSON.stringify(Object.entries(r).reduce((t, [e, s])=>(s && (t[jt(e)] = s), t), {}));\n}\nclass w {\n    constructor(){\n        o(this, \"listeners\", /* @__PURE__ */ new Map());\n        o(this, \"subscribeListeners\", []);\n    }\n    /**\n   * Adds specified event listener.\n   * @param event - event name.\n   * @param listener - event listener.\n   * @param once - should listener called only once.\n   */ addListener(t, e, s) {\n        let n = this.listeners.get(t);\n        return n || (n = [], this.listeners.set(t, n)), n.push([\n            e,\n            s\n        ]), ()=>this.off(t, e);\n    }\n    emit(t, ...e) {\n        this.subscribeListeners.forEach((n)=>n(t, ...e));\n        const s = this.listeners.get(t);\n        s && s.forEach(([n, i], a)=>{\n            n(...e), i && s.splice(a, 1);\n        });\n    }\n    /**\n   * Adds event listener.\n   * @param event - event name.\n   * @param listener - event listener.\n   * @returns Function to remove event listener.\n   */ on(t, e) {\n        return this.addListener(t, e, !1);\n    }\n    /**\n   * Adds event listener following the logic, described in `on` method, but calls specified\n   * listener only once, removing it after.\n   * @param event - event name.\n   * @param listener - event listener.\n   * @returns Function to remove event listener.\n   * @see on\n   */ once(t, e) {\n        return this.addListener(t, e, !0);\n    }\n    /**\n   * Removes event listener. In case, specified listener was bound several times, it removes\n   * only a single one.\n   * @param event - event name.\n   * @param listener - event listener.\n   */ off(t, e) {\n        const s = this.listeners.get(t);\n        if (s) {\n            for(let n = 0; n < s.length; n += 1)if (e === s[n][0]) {\n                s.splice(n, 1);\n                return;\n            }\n        }\n    }\n    /**\n   * Adds event listener to all events.\n   * @param listener - events listener.\n   * @returns Function to remove event listener.\n   * @see on\n   * @see once\n   */ subscribe(t) {\n        return this.subscribeListeners.push(t), ()=>this.unsubscribe(t);\n    }\n    /**\n   * Removes global event listener. In case, specified listener was bound several times, it removes\n   * only a single one.\n   * @param listener - events listener.\n   * @returns Function to remove event listener.\n   */ unsubscribe(t) {\n        for(let e = 0; e < this.subscribeListeners.length; e += 1)if (this.subscribeListeners[e] === t) {\n            this.subscribeListeners.splice(e, 1);\n            return;\n        }\n    }\n}\nclass _ {\n    constructor(t, e){\n        this.state = t, this.ee = e;\n    }\n    internalSet(t, e) {\n        return this.state[t] === e || e === void 0 ? !1 : (this.state[t] = e, this.ee.emit(`change:${t}`, e), !0);\n    }\n    /**\n   * Returns copy of current state.\n   */ clone() {\n        return {\n            ...this.state\n        };\n    }\n    set(t, e) {\n        let s = !1;\n        if (typeof t == \"string\") s = this.internalSet(t, e);\n        else for(const n in t)this.internalSet(n, t[n]) && (s = !0);\n        s && this.ee.emit(\"change\");\n    }\n    /**\n   * Returns value by specified key.\n   * @param key - state key.\n   */ get(t) {\n        return this.state[t];\n    }\n}\nclass Ft {\n    constructor(t){\n        o(this, \"ee\", new w());\n        o(this, \"state\");\n        /**\n     * Adds new event listener.\n     */ o(this, \"on\", this.ee.on.bind(this.ee));\n        /**\n     * Removes event listener.\n     */ o(this, \"off\", this.ee.off.bind(this.ee));\n        this.state = new _(t, this.ee);\n    }\n    /**\n   * @since v6.10\n   */ get accentTextColor() {\n        return this.get(\"accentTextColor\");\n    }\n    get backgroundColor() {\n        return this.get(\"backgroundColor\");\n    }\n    get buttonColor() {\n        return this.get(\"buttonColor\");\n    }\n    get buttonTextColor() {\n        return this.get(\"buttonTextColor\");\n    }\n    get destructiveTextColor() {\n        return this.get(\"destructiveTextColor\");\n    }\n    /**\n   * Retrieves palette color value by its name.\n   * @param key - palette key name.\n   */ get(t) {\n        return this.state.get(t);\n    }\n    /**\n   * Returns the copy of the internal state of the current component instance.\n   */ getState() {\n        return this.state.clone();\n    }\n    /**\n   * @since v6.10\n   */ get headerBackgroundColor() {\n        return this.get(\"headerBackgroundColor\");\n    }\n    get hintColor() {\n        return this.get(\"hintColor\");\n    }\n    /**\n   * Returns true in case, current color scheme is recognized as dark. This\n   * value is calculated according to theme background color.\n   */ get isDark() {\n        return !this.backgroundColor || ft(this.backgroundColor);\n    }\n    get linkColor() {\n        return this.get(\"linkColor\");\n    }\n    get secondaryBackgroundColor() {\n        return this.get(\"secondaryBackgroundColor\");\n    }\n    /**\n   * @since v6.10\n   */ get sectionBackgroundColor() {\n        return this.get(\"sectionBackgroundColor\");\n    }\n    /**\n   * @since v6.10\n   */ get sectionHeaderTextColor() {\n        return this.get(\"sectionHeaderTextColor\");\n    }\n    /**\n   * Starts listening to theme changes and applies them.\n   * @returns Function to stop listening.\n   */ listen() {\n        return y(\"theme_changed\", (t)=>{\n            this.state.set(bt(t.theme_params));\n        });\n    }\n    /**\n   * @since v6.10\n   */ get subtitleTextColor() {\n        return this.get(\"subtitleTextColor\");\n    }\n    get textColor() {\n        return this.get(\"textColor\");\n    }\n}\nfunction mt() {\n    return X({\n        botInline: {\n            type: P().optional(),\n            from: \"tgWebAppBotInline\"\n        },\n        initData: {\n            type: wt().optional(),\n            from: \"tgWebAppData\"\n        },\n        initDataRaw: {\n            type: h().optional(),\n            from: \"tgWebAppData\"\n        },\n        platform: {\n            type: h(),\n            from: \"tgWebAppPlatform\"\n        },\n        showSettings: {\n            type: P().optional(),\n            from: \"tgWebAppShowSettings\"\n        },\n        themeParams: {\n            type: _t(),\n            from: \"tgWebAppThemeParams\"\n        },\n        version: {\n            type: h(),\n            from: \"tgWebAppVersion\"\n        }\n    }, \"LaunchParams\");\n}\nfunction yt(r) {\n    return mt().parse(r);\n}\nfunction zt() {\n    return yt(window.location.hash.slice(1));\n}\nfunction Jt() {\n    const r = ht();\n    if (!r) throw new Error(\"Unable to get first navigation entry.\");\n    const t = r.name.match(/#(.*)/);\n    if (!t) throw new Error(\"First navigation entry does not contain hash part.\");\n    return yt(t[1]);\n}\nfunction Qt() {\n    try {\n        return Jt();\n    } catch  {}\n    try {\n        return zt();\n    } catch  {}\n    return null;\n}\nfunction Zt(r) {\n    const { initDataRaw: t, themeParams: e, platform: s, version: n, showSettings: i, botInline: a } = r, c = new URLSearchParams();\n    return t && c.set(\"tgWebAppData\", t), c.set(\"tgWebAppPlatform\", s), c.set(\"tgWebAppThemeParams\", Gt(e)), c.set(\"tgWebAppVersion\", n), typeof i == \"boolean\" && c.set(\"tgWebAppShowSettings\", i ? \"1\" : \"0\"), typeof a == \"boolean\" && c.set(\"tgWebAppBotInline\", a ? \"1\" : \"0\"), c.toString();\n}\nconst Et = \"telegram-mini-apps-launch-params\";\nfunction Kt() {\n    const r = sessionStorage.getItem(Et);\n    return r ? mt().parse(r) : null;\n}\nfunction Yt(r) {\n    sessionStorage.setItem(Et, Zt(r));\n}\nfunction Xt() {\n    try {\n        return window.self !== window.top;\n    } catch  {\n        return !0;\n    }\n}\nfunction te() {\n    const r = Kt(), t = Qt(), e = Bt();\n    if (r) {\n        if (t) return {\n            launchParams: t,\n            isPageReload: Xt() ? e || r.initDataRaw === t.initDataRaw : !0\n        };\n        if (e) return {\n            launchParams: r,\n            isPageReload: e\n        };\n        throw new Error(\"Unable to retrieve current launch parameters, which must exist.\");\n    }\n    if (t) return {\n        launchParams: t,\n        isPageReload: !1\n    };\n    throw new Error(\"Unable to retrieve any launch parameters.\");\n}\nconst st = \"tmajsLaunchData\";\nfunction Ct() {\n    const r = window[st];\n    if (r) return r;\n    const t = te();\n    return window[st] = t, Yt(t.launchParams), t;\n}\nfunction sr() {\n    try {\n        return Ct(), !0;\n    } catch  {\n        return !1;\n    }\n}\nfunction ee(r) {\n    return \"external\" in r && H(r.external) && \"notify\" in r.external && typeof r.external.notify == \"function\";\n}\nfunction re(r) {\n    return \"TelegramWebviewProxy\" in r && H(r.TelegramWebviewProxy) && \"postEvent\" in r.TelegramWebviewProxy && typeof r.TelegramWebviewProxy.postEvent == \"function\";\n}\nfunction vt() {\n    try {\n        return window.self !== window.top;\n    } catch  {\n        return !0;\n    }\n}\nclass tt extends Error {\n    constructor(t, e){\n        super(`Method \"${t}\" is unsupported in the Mini Apps version ${e}.`), Object.setPrototypeOf(this, tt.prototype);\n    }\n}\nclass et extends Error {\n    constructor(t, e, s){\n        super(`Parameter \"${e}\" in method \"${t}\" is unsupported in the Mini Apps version ${s}.`), Object.setPrototypeOf(this, et.prototype);\n    }\n}\nclass Pt {\n    constructor(t, e){\n        this.prefix = t, this.enabled = e;\n    }\n    /**\n   * Prints message into a console in case, logger is currently enabled.\n   * @param level - log level.\n   * @param args - arguments.\n   */ print(t, ...e) {\n        if (!this.enabled) return;\n        const s = /* @__PURE__ */ new Date(), n = Intl.DateTimeFormat(\"en-GB\", {\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n            second: \"2-digit\",\n            fractionalSecondDigits: 3,\n            timeZone: \"UTC\"\n        }).format(s);\n        console[t](`[${n}]`, this.prefix, ...e);\n    }\n    /**\n   * Disables the logger.\n   */ disable() {\n        this.enabled = !1;\n    }\n    /**\n   * Prints error message into a console.\n   * @param args\n   */ error(...t) {\n        this.print(\"error\", ...t);\n    }\n    /**\n   * Enables the logger.\n   */ enable() {\n        this.enabled = !0;\n    }\n    /**\n   * Prints log message into a console.\n   * @param args\n   */ log(...t) {\n        this.print(\"log\", ...t);\n    }\n    /**\n   * Prints warning message into a console.\n   * @param args\n   */ warn(...t) {\n        this.print(\"warn\", ...t);\n    }\n}\nlet St = \"https://web.telegram.org\";\nconst q = new Pt(\"[SDK]\", !1);\nfunction nr(r) {\n    if (r) {\n        q.enable();\n        return;\n    }\n    q.disable();\n}\nfunction ir(r) {\n    St = r;\n}\nfunction se() {\n    return St;\n}\nconst ne = g({\n    eventType: h(),\n    eventData: (r)=>r\n});\nfunction ie(r, t) {\n    window.dispatchEvent(new MessageEvent(\"message\", {\n        data: JSON.stringify({\n            eventType: r,\n            eventData: t\n        })\n    }));\n}\nfunction oe() {\n    const r = window;\n    \"TelegramGameProxy_receiveEvent\" in r || [\n        [\n            \"TelegramGameProxy_receiveEvent\"\n        ],\n        // Windows Phone.\n        [\n            \"TelegramGameProxy\",\n            \"receiveEvent\"\n        ],\n        // Desktop.\n        [\n            \"Telegram\",\n            \"WebView\",\n            \"receiveEvent\"\n        ]\n    ].forEach((t)=>{\n        let e = r;\n        t.forEach((s, n, i)=>{\n            if (n === i.length - 1) {\n                e[s] = ie;\n                return;\n            }\n            s in e || (e[s] = {}), e = e[s];\n        });\n    });\n}\nfunction ae(r) {\n    oe(), window.addEventListener(\"message\", (t)=>{\n        try {\n            const { eventType: e, eventData: s } = ne.parse(t.data);\n            r(e, s);\n        } catch  {}\n    });\n}\nfunction ce() {\n    return g({\n        req_id: h(),\n        data: (r)=>r === null ? r : h().optional().parse(r)\n    });\n}\nfunction he() {\n    return g({\n        req_id: h(),\n        result: (r)=>r,\n        error: h().optional()\n    });\n}\nfunction ue() {\n    return g({\n        slug: h(),\n        status: h()\n    });\n}\nfunction pe() {\n    return g({\n        status: h()\n    });\n}\nfunction le() {\n    return g({\n        button_id: (r)=>r == null ? void 0 : h().parse(r)\n    });\n}\nfunction de() {\n    return g({\n        data: h().optional()\n    });\n}\nfunction fe() {\n    return g({\n        theme_params: (r)=>{\n            const t = gt().optional();\n            return Object.entries(Y(r)).reduce((e, [s, n])=>(e[s] = t.parse(n), e), {});\n        }\n    });\n}\nfunction ge() {\n    return g({\n        height: k(),\n        width: (r)=>r == null ? window.innerWidth : k().parse(r),\n        is_state_stable: P(),\n        is_expanded: P()\n    });\n}\nfunction we() {\n    return g({\n        status: h()\n    });\n}\nfunction _e() {\n    const r = new w(), t = (e, ...s)=>{\n        q.log(\"Emitting processed event:\", e, ...s), r.emit(e, ...s);\n    };\n    return window.addEventListener(\"resize\", ()=>{\n        t(\"viewport_changed\", {\n            width: window.innerWidth,\n            height: window.innerHeight,\n            is_state_stable: !0,\n            is_expanded: !0\n        });\n    }), ae((e, s)=>{\n        q.log(\"Received raw event:\", e, s);\n        try {\n            switch(e){\n                case \"viewport_changed\":\n                    return t(e, ge().parse(s));\n                case \"theme_changed\":\n                    return t(e, fe().parse(s));\n                case \"popup_closed\":\n                    return(// Sent on desktop.\n                    s == null ? t(e, {}) : t(e, le().parse(s)));\n                case \"set_custom_style\":\n                    return t(e, h().parse(s));\n                case \"qr_text_received\":\n                    return t(e, de().parse(s));\n                case \"clipboard_text_received\":\n                    return t(e, ce().parse(s));\n                case \"invoice_closed\":\n                    return t(e, ue().parse(s));\n                case \"phone_requested\":\n                    return t(\"phone_requested\", pe().parse(s));\n                case \"custom_method_invoked\":\n                    return t(\"custom_method_invoked\", he().parse(s));\n                case \"write_access_requested\":\n                    return t(\"write_access_requested\", we().parse(s));\n                case \"main_button_pressed\":\n                case \"back_button_pressed\":\n                case \"settings_button_pressed\":\n                case \"scan_qr_popup_closed\":\n                case \"reload_iframe\":\n                    return t(e);\n                default:\n                    return t(e, s);\n            }\n        } catch (n) {\n            q.error(\"Error processing event:\", n);\n        }\n    }), r;\n}\nconst Q = \"telegram-mini-apps-cached-emitter\";\nfunction U() {\n    const r = window;\n    return r[Q] === void 0 && (r[Q] = _e()), r[Q];\n}\nfunction I(r, t) {\n    U().off(r, t);\n}\nfunction y(r, t) {\n    return U().on(r, t), ()=>I(r, t);\n}\nfunction or(r, t) {\n    return U().once(r, t), ()=>I(r, t);\n}\nfunction be(r) {\n    U().unsubscribe(r);\n}\nfunction ar(r) {\n    return U().subscribe(r), ()=>be(r);\n}\nfunction me(r, t) {\n    const e = r.split(\".\"), s = t.split(\".\"), n = Math.max(e.length, s.length);\n    for(let i = 0; i < n; i += 1){\n        const a = parseInt(e[i] || \"0\", 10), c = parseInt(s[i] || \"0\", 10);\n        if (a !== c) return a > c ? 1 : -1;\n    }\n    return 0;\n}\nfunction v(r, t) {\n    return me(r, t) <= 0;\n}\nfunction A(r, t, e) {\n    if (typeof e == \"string\") {\n        if (r === \"web_app_open_link\" && t === \"try_instant_view\") return v(\"6.4\", e);\n        if (r === \"web_app_set_header_color\" && t === \"color\") return v(\"6.9\", e);\n    }\n    switch(r){\n        case \"web_app_open_tg_link\":\n        case \"web_app_open_invoice\":\n        case \"web_app_setup_back_button\":\n        case \"web_app_set_background_color\":\n        case \"web_app_set_header_color\":\n        case \"web_app_trigger_haptic_feedback\":\n            return v(\"6.1\", t);\n        case \"web_app_open_popup\":\n            return v(\"6.2\", t);\n        case \"web_app_close_scan_qr_popup\":\n        case \"web_app_open_scan_qr_popup\":\n        case \"web_app_read_text_from_clipboard\":\n            return v(\"6.4\", t);\n        case \"web_app_switch_inline_query\":\n            return v(\"6.7\", t);\n        case \"web_app_invoke_custom_method\":\n        case \"web_app_request_write_access\":\n        case \"web_app_request_phone\":\n            return v(\"6.9\", t);\n        case \"web_app_setup_settings_button\":\n            return v(\"6.10\", t);\n        default:\n            return !0;\n    }\n}\nfunction E(r, t) {\n    return (e)=>A(t[e], r);\n}\nfunction kt(r, t) {\n    return (e)=>{\n        const [s, n] = t[e];\n        return A(s, n, r);\n    };\n}\nfunction f(r, t, e) {\n    let s = {}, n;\n    t === void 0 && e === void 0 ? s = {} : t !== void 0 && e !== void 0 ? (s = e, n = t) : t !== void 0 && (\"targetOrigin\" in t ? s = t : n = t);\n    const { targetOrigin: i = se() } = s;\n    if (q.log(`Calling method \"${r}\"`, n), vt()) {\n        window.parent.postMessage(JSON.stringify({\n            eventType: r,\n            eventData: n\n        }), i);\n        return;\n    }\n    if (ee(window)) {\n        window.external.notify(JSON.stringify({\n            eventType: r,\n            eventData: n\n        }));\n        return;\n    }\n    if (re(window)) {\n        window.TelegramWebviewProxy.postEvent(r, JSON.stringify(n));\n        return;\n    }\n    throw new Error(\"Unable to determine current environment and possible way to send event.\");\n}\nfunction ye(r) {\n    return (t, e)=>{\n        if (!A(t, r)) throw new tt(t, r);\n        if (H(e)) {\n            let s;\n            if (t === \"web_app_open_link\" && \"try_instant_view\" in e ? s = \"try_instant_view\" : t === \"web_app_set_header_color\" && \"color\" in e && (s = \"color\"), s && !A(t, s, r)) throw new et(t, s, r);\n        }\n        return f(t, e);\n    };\n}\nclass J extends Error {\n    constructor(t){\n        super(`Async call timeout exceeded. Timeout: ${t}`), Object.setPrototypeOf(this, J.prototype);\n    }\n}\nfunction cr(r) {\n    return r instanceof J;\n}\nfunction Ee(r) {\n    return new Promise((t)=>{\n        setTimeout(t, r);\n    });\n}\nfunction Ce(r) {\n    return new Promise((t, e)=>{\n        setTimeout(e, r, new J(r));\n    });\n}\nfunction xt(r, t) {\n    return Promise.race([\n        r(),\n        Ce(t)\n    ]);\n}\nfunction m(r, t, e, s) {\n    let n, i, a, c;\n    typeof t == \"string\" || Array.isArray(t) ? (a = Array.isArray(t) ? t : [\n        t\n    ], n = e) : (i = t, a = Array.isArray(e) ? e : [\n        e\n    ], n = s), H(i) && typeof i.req_id == \"string\" && (c = i.req_id);\n    const { postEvent: u = f, timeout: p } = n || {}, l = n && \"capture\" in n ? n.capture : null, b = ()=>new Promise((d, C)=>{\n            const x = a.map((B)=>y(B, (M)=>{\n                    c && (!H(M) || M.req_id !== c) || typeof l == \"function\" && !l(M) || (T(), d(M));\n                })), T = ()=>x.forEach((B)=>B());\n            try {\n                u(r, i);\n            } catch (B) {\n                T(), C(B);\n            }\n        });\n    return typeof p == \"number\" ? xt(b, p) : b();\n}\nasync function N(r, t, e, s = {}) {\n    const { result: n, error: i } = await m(\"web_app_invoke_custom_method\", {\n        method: r,\n        params: t,\n        req_id: e\n    }, \"custom_method_invoked\", s);\n    if (i) throw new Error(i);\n    return n;\n}\nclass ve {\n    constructor(t, e, s = f){\n        o(this, \"ee\", new w());\n        o(this, \"state\");\n        /**\n     * Adds event listener.\n     * @param event - event name.\n     * @param listener - event listener.\n     */ o(this, \"on\", (t, e)=>t === \"click\" ? y(\"back_button_pressed\", e) : this.ee.on(t, e));\n        /**\n     * Removes event listener.\n     * @param event - event name.\n     * @param listener - event listener.\n     */ o(this, \"off\", (t, e)=>t === \"click\" ? I(\"back_button_pressed\", e) : this.ee.off(t, e));\n        /**\n     * Checks if specified method is supported by current component.\n     */ o(this, \"supports\");\n        this.postEvent = s, this.state = new _({\n            isVisible: t\n        }, this.ee), this.supports = E(e, {\n            show: \"web_app_setup_back_button\",\n            hide: \"web_app_setup_back_button\"\n        });\n    }\n    set isVisible(t) {\n        this.state.set(\"isVisible\", t), this.postEvent(\"web_app_setup_back_button\", {\n            is_visible: t\n        });\n    }\n    /**\n   * True if BackButton is currently visible.\n   */ get isVisible() {\n        return this.state.get(\"isVisible\");\n    }\n    /**\n   * Hides the BackButton.\n   */ hide() {\n        this.isVisible = !1;\n    }\n    /**\n   * Shows the BackButton.\n   */ show() {\n        this.isVisible = !0;\n    }\n}\nfunction nt(r, t) {\n    return r + (r.length > 0 && t.length > 0 ? ` ${t}` : t);\n}\nfunction Pe(...r) {\n    return r.reduce((t, e)=>{\n        let s = \"\";\n        return typeof e == \"string\" ? s = e : typeof e == \"object\" && e !== null && (s = Object.entries(e).reduce((n, [i, a])=>a ? nt(n, i) : n, \"\")), nt(t, s);\n    }, \"\");\n}\nfunction Se(r) {\n    return typeof r == \"object\" && r !== null && !Array.isArray(null);\n}\nfunction hr(...r) {\n    return r.reduce((t, e)=>(Se(e) && Object.entries(e).forEach(([s, n])=>{\n            const i = Pe(t[s], n);\n            i.length > 0 && (t[s] = i);\n        }), t), {});\n}\nclass ke {\n    constructor(t, e = f){\n        o(this, \"ee\", new w());\n        o(this, \"state\");\n        /**\n     * Adds new event listener.\n     */ o(this, \"on\", this.ee.on.bind(this.ee));\n        /**\n     * Removes event listener.\n     */ o(this, \"off\", this.ee.off.bind(this.ee));\n        this.postEvent = e, this.state = new _({\n            isConfirmationNeeded: t\n        }, this.ee);\n    }\n    set isConfirmationNeeded(t) {\n        this.state.set(\"isConfirmationNeeded\", t), this.postEvent(\"web_app_setup_closing_behavior\", {\n            need_confirmation: t\n        });\n    }\n    /**\n   * Returns true, if the confirmation dialog enabled while the user is trying\n   * to close the Mini App.\n   */ get isConfirmationNeeded() {\n        return this.state.get(\"isConfirmationNeeded\");\n    }\n    /**\n   * Disables the confirmation dialog while the user is trying to close the\n   * Mini App.\n   */ disableConfirmation() {\n        this.isConfirmationNeeded = !1;\n    }\n    /**\n   * Enables the confirmation dialog while the user is trying to close the\n   * Mini App.\n   */ enableConfirmation() {\n        this.isConfirmationNeeded = !0;\n    }\n}\nfunction it(r, t) {\n    return r.reduce((e, s)=>(e[s] = t, e), {});\n}\nclass xe {\n    constructor(t, e, s = f){\n        /**\n     * Checks if specified method is supported by current component.\n     */ o(this, \"supports\");\n        this.createRequestId = e, this.postEvent = s, this.supports = E(t, {\n            delete: \"web_app_invoke_custom_method\",\n            get: \"web_app_invoke_custom_method\",\n            getKeys: \"web_app_invoke_custom_method\",\n            set: \"web_app_invoke_custom_method\"\n        });\n    }\n    /**\n   * Deletes specified key or keys from the cloud storage.\n   * @param keyOrKeys - key or keys to delete.\n   * @param options - request execution options.\n   */ async delete(t, e = {}) {\n        const s = Array.isArray(t) ? t : [\n            t\n        ];\n        s.length !== 0 && await N(\"deleteStorageValues\", {\n            keys: s\n        }, this.createRequestId(), {\n            ...e,\n            postEvent: this.postEvent\n        });\n    }\n    /**\n   * Returns list of all keys presented in the cloud storage.\n   * @param options - request execution options.\n   */ async getKeys(t = {}) {\n        const e = await N(\"getStorageKeys\", {}, this.createRequestId(), {\n            ...t,\n            postEvent: this.postEvent\n        });\n        return Nt().of(h()).parse(e);\n    }\n    async get(t, e = {}) {\n        const s = Array.isArray(t) ? t : [\n            t\n        ];\n        if (s.length === 0) return it(s, \"\");\n        const n = g(it(s, h())), i = await N(\"getStorageValues\", {\n            keys: s\n        }, this.createRequestId(), {\n            ...e,\n            postEvent: this.postEvent\n        }).then((a)=>n.parse(a));\n        return Array.isArray(t) ? i : i[t];\n    }\n    /**\n   * Saves specified value by key.\n   * @param key - storage key.\n   * @param value - storage value.\n   * @param options - request execution options.\n   */ async set(t, e, s = {}) {\n        await N(\"saveStorageValue\", {\n            key: t,\n            value: e\n        }, this.createRequestId(), {\n            ...s,\n            postEvent: this.postEvent\n        });\n    }\n}\nclass qe {\n    constructor(t, e = f){\n        /**\n     * Checks if specified method is supported by current component.\n     */ o(this, \"supports\");\n        this.postEvent = e, this.supports = E(t, {\n            impactOccurred: \"web_app_trigger_haptic_feedback\",\n            notificationOccurred: \"web_app_trigger_haptic_feedback\",\n            selectionChanged: \"web_app_trigger_haptic_feedback\"\n        });\n    }\n    /**\n   * A method tells that an impact occurred. The Telegram app may play the\n   * appropriate haptics based on style value passed.\n   * @param style - impact style.\n   */ impactOccurred(t) {\n        this.postEvent(\"web_app_trigger_haptic_feedback\", {\n            type: \"impact\",\n            impact_style: t\n        });\n    }\n    /**\n   * A method tells that a task or action has succeeded, failed, or produced\n   * a warning. The Telegram app may play the appropriate haptics based on\n   * type value passed.\n   * @param type - notification type.\n   */ notificationOccurred(t) {\n        this.postEvent(\"web_app_trigger_haptic_feedback\", {\n            type: \"notification\",\n            notification_type: t\n        });\n    }\n    /**\n   * A method tells that the user has changed a selection. The Telegram app\n   * may play the appropriate haptics.\n   *\n   * Do not use this feedback when the user makes or confirms a selection;\n   * use it only when the selection changes.\n   */ selectionChanged() {\n        this.postEvent(\"web_app_trigger_haptic_feedback\", {\n            type: \"selection_change\"\n        });\n    }\n}\nfunction Ae() {\n    const r = document.createElement(\"style\");\n    r.id = \"telegram-custom-styles\", document.head.appendChild(r), y(\"set_custom_style\", (t)=>{\n        r.innerHTML = t;\n    });\n}\nfunction qt(r) {\n    return `telegram-mini-apps-${r}`;\n}\nfunction L(r, t) {\n    sessionStorage.setItem(qt(r), JSON.stringify(t));\n}\nfunction $(r) {\n    const t = sessionStorage.getItem(qt(r));\n    return t ? JSON.parse(t) : null;\n}\nfunction Re(r, t, e) {\n    const { isVisible: s = !1 } = r ? $(\"back-button\") || {} : {}, n = new ve(s, t, e);\n    return n.on(\"change\", ()=>{\n        L(\"back-button\", {\n            isVisible: n.isVisible\n        });\n    }), n;\n}\nfunction Ve(r, t) {\n    const { isConfirmationNeeded: e = !1 } = r ? $(\"closing-behavior\") || {} : {}, s = new ke(e, t);\n    return s.on(\"change\", ()=>L(\"closing-behavior\", {\n            isConfirmationNeeded: s.isConfirmationNeeded\n        })), s;\n}\nclass Ie {\n    constructor(t){\n        o(this, \"ee\", new w());\n        o(this, \"state\");\n        o(this, \"postEvent\");\n        /**\n     * Adds new event listener.\n     * @param event - event name.\n     * @param listener - event listener.\n     */ o(this, \"on\", (t, e)=>// FIXME: Event 'main_button_pressed' is still being received on Android\n            //  even if the main button is disabled.\n            //  Issue: https://github.com/Telegram-Mini-Apps/tma.js/issues/3\n            t === \"click\" ? y(\"main_button_pressed\", e) : this.ee.on(t, e));\n        /**\n     * Removes event listener.\n     * @param event - event name.\n     * @param listener - event listener.\n     */ o(this, \"off\", (t, e)=>t === \"click\" ? I(\"main_button_pressed\", e) : this.ee.off(t, e));\n        const { postEvent: e = f, text: s, textColor: n, backgroundColor: i, isEnabled: a, isVisible: c, isLoaderVisible: u } = t;\n        this.postEvent = e, this.state = new _({\n            backgroundColor: i,\n            isEnabled: a,\n            isVisible: c,\n            isLoaderVisible: u,\n            text: s,\n            textColor: n\n        }, this.ee);\n    }\n    /**\n   * Sends current local state to Telegram application.\n   */ commit() {\n        this.text !== \"\" && this.postEvent(\"web_app_setup_main_button\", {\n            is_visible: this.isVisible,\n            is_active: this.isEnabled,\n            is_progress_visible: this.isLoaderVisible,\n            text: this.text,\n            color: this.backgroundColor,\n            text_color: this.textColor\n        });\n    }\n    set isEnabled(t) {\n        this.setParams({\n            isEnabled: t\n        });\n    }\n    /**\n   * True if the Main Button is currently enabled.\n   */ get isEnabled() {\n        return this.state.get(\"isEnabled\");\n    }\n    set isLoaderVisible(t) {\n        this.setParams({\n            isLoaderVisible: t\n        });\n    }\n    /**\n   * True if the Main Button loader is currently visible.\n   */ get isLoaderVisible() {\n        return this.state.get(\"isLoaderVisible\");\n    }\n    set isVisible(t) {\n        this.setParams({\n            isVisible: t\n        });\n    }\n    /**\n   * True if the Main Button is currently visible.\n   */ get isVisible() {\n        return this.state.get(\"isVisible\");\n    }\n    /**\n   * The Main Button background color.\n   */ get backgroundColor() {\n        return this.state.get(\"backgroundColor\");\n    }\n    /**\n   * The Main Button text.\n   */ get text() {\n        return this.state.get(\"text\");\n    }\n    /**\n   * The Main Button text color.\n   */ get textColor() {\n        return this.state.get(\"textColor\");\n    }\n    /**\n   * Disables the Main Button.\n   */ disable() {\n        return this.isEnabled = !1, this;\n    }\n    /**\n   * Enables the Main Button.\n   */ enable() {\n        return this.isEnabled = !0, this;\n    }\n    /**\n   * Hides the Main Button.\n   */ hide() {\n        return this.isVisible = !1, this;\n    }\n    /**\n   * Hides the Main Button loader.\n   */ hideLoader() {\n        return this.isLoaderVisible = !1, this;\n    }\n    /**\n   * Shows the Main Button. Note that opening the Mini App from the attachment menu hides the\n   * main button until the user interacts with the Mini App interface.\n   */ show() {\n        return this.isVisible = !0, this;\n    }\n    /**\n   * A method to show a loading indicator on the Main Button. It is recommended to display\n   * loader if the action tied to the button may take a long time.\n   */ showLoader() {\n        return this.isLoaderVisible = !0, this;\n    }\n    /**\n   * Sets new Main Button text. Minimal length for text is 1 symbol, and maximum is 64 symbols.\n   * @param text - new text.\n   */ setText(t) {\n        return this.setParams({\n            text: t\n        });\n    }\n    /**\n   * Sets new Main Button text color.\n   * @param textColor - new text color.\n   */ setTextColor(t) {\n        return this.setParams({\n            textColor: t\n        });\n    }\n    /**\n   * Updates current Main Button color.\n   * @param backgroundColor - color to set.\n   */ setBackgroundColor(t) {\n        return this.setParams({\n            backgroundColor: t\n        });\n    }\n    /**\n   * Allows setting multiple Main Button parameters.\n   * @param params - Main Button parameters.\n   */ setParams(t) {\n        return this.state.set(t), this.commit(), this;\n    }\n}\nfunction Le(r, t, e, s) {\n    const { backgroundColor: n = t, isEnabled: i = !1, isVisible: a = !1, isLoaderVisible: c = !1, textColor: u = e, text: p = \"\" } = r ? $(\"main-button\") || {} : {}, l = new Ie({\n        backgroundColor: n,\n        isEnabled: i,\n        isLoaderVisible: c,\n        isVisible: a,\n        postEvent: s,\n        text: p,\n        textColor: u\n    }), b = ()=>L(\"main-button\", {\n            backgroundColor: l.backgroundColor,\n            isEnabled: l.isEnabled,\n            isLoaderVisible: l.isLoaderVisible,\n            isVisible: l.isVisible,\n            text: l.text,\n            textColor: l.textColor\n        });\n    return l.on(\"change\", b), l;\n}\nconst $e = X({\n    contact: g({\n        userId: {\n            type: k(),\n            from: \"user_id\"\n        },\n        phoneNumber: {\n            type: h(),\n            from: \"phone_number\"\n        },\n        firstName: {\n            type: h(),\n            from: \"first_name\"\n        },\n        lastName: {\n            type: h(),\n            from: \"last_name\"\n        }\n    }),\n    authDate: {\n        type: pt(),\n        from: \"auth_date\"\n    },\n    hash: h()\n});\nclass Te {\n    constructor(t){\n        o(this, \"ee\", new w());\n        o(this, \"state\");\n        o(this, \"botInline\");\n        o(this, \"postEvent\");\n        o(this, \"createRequestId\");\n        o(this, \"requestingPhoneAccess\", !1);\n        o(this, \"requestingWriteAccess\", !1);\n        /**\n     * Adds new event listener.\n     */ o(this, \"on\", this.ee.on.bind(this.ee));\n        /**\n     * Removes event listener.\n     */ o(this, \"off\", this.ee.off.bind(this.ee));\n        /**\n     * Checks if specified method is supported by current component.\n     */ o(this, \"supports\");\n        /**\n     * Checks if specified method parameter is supported by current component.\n     */ o(this, \"supportsParam\");\n        const { postEvent: e = f, headerColor: s, backgroundColor: n, version: i, botInline: a, createRequestId: c } = t, u = E(i, {\n            requestPhoneAccess: \"web_app_request_phone\",\n            requestWriteAccess: \"web_app_request_write_access\",\n            switchInlineQuery: \"web_app_switch_inline_query\",\n            setHeaderColor: \"web_app_set_header_color\",\n            setBackgroundColor: \"web_app_set_background_color\"\n        });\n        this.postEvent = e, this.botInline = a, this.createRequestId = c, this.supports = (p)=>!(!u(p) || p === \"switchInlineQuery\" && !a), this.state = new _({\n            backgroundColor: n,\n            headerColor: s\n        }, this.ee), this.supportsParam = kt(i, {\n            \"setHeaderColor.color\": [\n                \"web_app_set_header_color\",\n                \"color\"\n            ]\n        });\n    }\n    /**\n   * Attempts to get requested contact.\n   */ async getRequestedContact() {\n        return N(\"getRequestedContact\", {}, this.createRequestId(), {\n            postEvent: this.postEvent,\n            timeout: 1e4\n        }).then((t)=>$e.parse(t));\n    }\n    /**\n   * The Mini App background color.\n   */ get backgroundColor() {\n        return this.state.get(\"backgroundColor\");\n    }\n    /**\n   * Closes the Mini App.\n   */ close() {\n        this.postEvent(\"web_app_close\");\n    }\n    /**\n   * The Mini App header color. Could either be a header color key or RGB color.\n   */ get headerColor() {\n        return this.state.get(\"headerColor\");\n    }\n    /**\n   * True if Mini App is currently launched in bot inline mode.\n   */ get isBotInline() {\n        return this.botInline;\n    }\n    /**\n   * True if current Mini App background color recognized as dark.\n   */ get isDark() {\n        return ft(this.backgroundColor);\n    }\n    /**\n   * True if phone access is currently being requested.\n   */ get isRequestingPhoneAccess() {\n        return this.requestingPhoneAccess;\n    }\n    /**\n   * True if write access is currently being requested.\n   */ get isRequestingWriteAccess() {\n        return this.requestingWriteAccess;\n    }\n    /**\n   * Informs the Telegram app that the Mini App is ready to be displayed.\n   *\n   * It is recommended to call this method as early as possible, as soon as all essential\n   * interface elements loaded. Once this method called, the loading placeholder is hidden\n   * and the Mini App shown.\n   *\n   * If the method not called, the placeholder will be hidden only when the page fully loaded.\n   */ ready() {\n        this.postEvent(\"web_app_ready\");\n    }\n    /**\n   * Requests current user contact information. In contrary to requestPhoneAccess, this method\n   * returns promise with contact information that rejects in case, user denied access, or request\n   * failed.\n   * @param options - additional options.\n   */ async requestContact({ timeout: t = 5e3 } = {}) {\n        try {\n            return await this.getRequestedContact();\n        } catch  {}\n        if (await this.requestPhoneAccess() !== \"sent\") throw new Error(\"Access denied.\");\n        const s = Date.now() + t;\n        let n = 50;\n        return xt(async ()=>{\n            for(; Date.now() < s;){\n                try {\n                    return await this.getRequestedContact();\n                } catch  {}\n                await Ee(n), n += 50;\n            }\n            throw new Error(\"Unable to retrieve requested contact.\");\n        }, t);\n    }\n    /**\n   * Requests current user phone access. Method returns promise, which resolves\n   * status of the request. In case, user accepted the request, Mini App bot will receive\n   * the according notification.\n   *\n   * To obtain the retrieved information instead, utilize the requestContact method.\n   * @param options - additional options.\n   * @see requestContact\n   */ requestPhoneAccess(t = {}) {\n        if (this.requestingPhoneAccess) throw new Error(\"Phone access is already being requested.\");\n        return this.requestingPhoneAccess = !0, m(\"web_app_request_phone\", \"phone_requested\", {\n            ...t,\n            postEvent: this.postEvent\n        }).then((e)=>e.status).finally(()=>{\n            this.requestingPhoneAccess = !1;\n        });\n    }\n    /**\n   * Requests write message access to current user.\n   * @param options - additional options.\n   */ requestWriteAccess(t = {}) {\n        if (this.requestingWriteAccess) throw new Error(\"Write access is already being requested.\");\n        return this.requestingWriteAccess = !0, m(\"web_app_request_write_access\", \"write_access_requested\", {\n            ...t,\n            postEvent: this.postEvent\n        }).then((e)=>e.status).finally(()=>{\n            this.requestingWriteAccess = !1;\n        });\n    }\n    /**\n   * A method used to send data to the bot. When this method called, a service message sent to\n   * the bot containing the data of the length up to 4096 bytes, and the Mini App closed. See the\n   * field `web_app_data` in the class [Message](https://core.telegram.org/bots/api#message).\n   *\n   * This method is only available for Mini Apps launched via a Keyboard button.\n   * @param data - data to send to bot.\n   * @throws {Error} data has incorrect size.\n   */ sendData(t) {\n        const { size: e } = new Blob([\n            t\n        ]);\n        if (e === 0 || e > 4096) throw new Error(`Passed data has incorrect size: ${e}`);\n        this.postEvent(\"web_app_data_send\", {\n            data: t\n        });\n    }\n    /**\n   * Updates current Mini App header color.\n   * @param color - color key or RGB color.\n   */ setHeaderColor(t) {\n        this.postEvent(\"web_app_set_header_color\", lt(t) ? {\n            color: t\n        } : {\n            color_key: t\n        }), this.state.set(\"headerColor\", t);\n    }\n    /**\n   * Updates current Mini App background color.\n   * @param color - RGB color.\n   */ setBackgroundColor(t) {\n        this.postEvent(\"web_app_set_background_color\", {\n            color: t\n        }), this.state.set(\"backgroundColor\", t);\n    }\n    /**\n   * Inserts the bot's username and the specified inline query in the current chat's input field.\n   * Query may be empty, in which case only the bot's username will be inserted. The client prompts\n   * the user to choose a specific chat, then opens that chat and inserts the bot's username and\n   * the specified inline query in the input field.\n   * @param text - text which should be inserted in the input after the current bot name. Max\n   * length is 256 symbols.\n   * @param chatTypes - List of chat types which could be chosen to send the message. Could be\n   * empty list.\n   */ switchInlineQuery(t, e = []) {\n        if (!this.supports(\"switchInlineQuery\") && !this.isBotInline) throw new Error(\"Method is unsupported because Mini App should be launched in inline mode.\");\n        this.postEvent(\"web_app_switch_inline_query\", {\n            query: t,\n            chat_types: e\n        });\n    }\n}\nfunction Be(r, t, e, s, n, i) {\n    const { backgroundColor: a = t, headerColor: c = \"bg_color\" } = r ? $(\"mini-app\") || {} : {}, u = new Te({\n        headerColor: c,\n        backgroundColor: a,\n        version: e,\n        botInline: s,\n        createRequestId: n,\n        postEvent: i\n    }), p = ()=>L(\"mini-app\", {\n            backgroundColor: u.backgroundColor,\n            headerColor: u.headerColor\n        });\n    return u.on(\"change\", p), u;\n}\nfunction De() {\n    let r = 0;\n    return ()=>(r += 1, r.toString());\n}\nclass We {\n    constructor(t, e, s = f){\n        o(this, \"ee\", new w());\n        o(this, \"state\");\n        /**\n     * Adds event listener.\n     * @param event - event name.\n     * @param listener - event listener.\n     */ o(this, \"on\", (t, e)=>t === \"click\" ? y(\"settings_button_pressed\", e) : this.ee.on(t, e));\n        /**\n     * Removes event listener.\n     * @param event - event name.\n     * @param listener - event listener.\n     */ o(this, \"off\", (t, e)=>t === \"click\" ? I(\"settings_button_pressed\", e) : this.ee.off(t, e));\n        /**\n     * Checks if specified method is supported by current component.\n     */ o(this, \"supports\");\n        this.postEvent = s, this.state = new _({\n            isVisible: t\n        }, this.ee), this.supports = E(e, {\n            show: \"web_app_setup_settings_button\",\n            hide: \"web_app_setup_settings_button\"\n        });\n    }\n    set isVisible(t) {\n        this.state.set(\"isVisible\", t), this.postEvent(\"web_app_setup_settings_button\", {\n            is_visible: t\n        });\n    }\n    /**\n   * True if SettingsButton is currently visible.\n   */ get isVisible() {\n        return this.state.get(\"isVisible\");\n    }\n    /**\n   * Hides the SettingsButton.\n   */ hide() {\n        this.isVisible = !1;\n    }\n    /**\n   * Shows the SettingsButton.\n   */ show() {\n        this.isVisible = !0;\n    }\n}\nfunction Ne(r, t, e) {\n    const { isVisible: s = !1 } = r ? $(\"settings-button\") || {} : {}, n = new We(s, t, e);\n    return n.on(\"change\", ()=>{\n        L(\"settings-button\", {\n            isVisible: n.isVisible\n        });\n    }), n;\n}\nfunction Oe(r) {\n    const t = new Ft(r);\n    return t.listen(), t;\n}\nasync function At(r) {\n    const t = await m(\"web_app_request_viewport\", \"viewport_changed\", r);\n    return {\n        height: t.height,\n        width: t.width,\n        isExpanded: t.is_expanded,\n        isStateStable: t.is_state_stable\n    };\n}\nfunction D(r) {\n    return r < 0 ? 0 : r;\n}\nclass G {\n    constructor(t){\n        o(this, \"ee\", new w());\n        o(this, \"state\");\n        o(this, \"postEvent\");\n        /**\n     * Adds new event listener.\n     */ o(this, \"on\", this.ee.on.bind(this.ee));\n        /**\n     * Removes event listener.\n     */ o(this, \"off\", this.ee.off.bind(this.ee));\n        const { height: e, isExpanded: s, width: n, stableHeight: i, postEvent: a = f } = t;\n        this.postEvent = a, this.state = new _({\n            height: D(e),\n            isExpanded: s,\n            stableHeight: D(i),\n            width: D(n)\n        }, this.ee);\n    }\n    /**\n   * Request viewport information from the Telegram application and updates current Viewport\n   * instance.\n   * @param options - options to request fresh data.\n   */ sync(t) {\n        return At(t).then(({ height: e, isExpanded: s, width: n, isStateStable: i })=>{\n            this.state.set({\n                height: e,\n                width: n,\n                isExpanded: s,\n                stableHeight: i ? e : this.state.get(\"stableHeight\")\n            });\n        });\n    }\n    /**\n   * The current height of the visible area of the Mini App.\n   *\n   * The application can display just the top part of the Mini App, with its\n   * lower part remaining outside the screen area. From this position, the\n   * user can \"pull\" the Mini App to its maximum height, while the bot can do\n   * the same by calling `expand` method. As the position of the Mini App\n   * changes, the current height value of the visible area will be updated\n   * in real time.\n   *\n   * Please note that the refresh rate of this value is not sufficient\n   * to smoothly follow the lower border of the window. It should not be\n   * used to pin interface elements to the bottom of the visible area. It's\n   * more appropriate to use the value of the `stableHeight`\n   * field for this purpose.\n   */ get height() {\n        return this.state.get(\"height\");\n    }\n    /**\n   * The height of the visible area of the Mini App in its last stable state.\n   *\n   * The application can display just the top part of the Mini App, with its\n   * lower part remaining outside the screen area. From this position,\n   * the user can \"pull\" the Mini App to its maximum height, while the bot can\n   * do the same by calling `expand` method.\n   *\n   * Unlike the value of `height`, the value of `stableHeight`\n   * does not change as the position of the Mini App changes with user\n   * gestures or during animations. The value of `stableHeight`\n   * will be updated after all gestures and animations are completed and\n   * the Mini App reaches its final size.\n   */ get stableHeight() {\n        return this.state.get(\"stableHeight\");\n    }\n    /**\n   * Starts listening to viewport changes and applies them.\n   * @returns Function to stop listening.\n   */ listen() {\n        return y(\"viewport_changed\", (t)=>{\n            const { height: e, width: s, is_expanded: n, is_state_stable: i } = t, a = {\n                height: D(e),\n                isExpanded: n,\n                width: D(s)\n            };\n            i && (a.stableHeight = a.height), this.state.set(a);\n        });\n    }\n    /**\n   * Returns true if the Mini App is expanded to the maximum available height.\n   * Otherwise, if the Mini App occupies part of the screen and can be expanded\n   * to the full height using `expand` method.\n   * @see expand\n   */ get isExpanded() {\n        return this.state.get(\"isExpanded\");\n    }\n    /**\n   * Current viewport width.\n   */ get width() {\n        return this.state.get(\"width\");\n    }\n    /**\n   * A method that expands the Mini App to the maximum available height. To\n   * find out if the Mini App is expanded to the maximum height, refer to the\n   * value of the `isExpanded`.\n   * @see isExpanded\n   */ expand() {\n        this.postEvent(\"web_app_expand\"), this.state.set(\"isExpanded\", !0);\n    }\n    /**\n   * Returns true in case current viewport height is stable and is not going to\n   * change in the next moment.\n   */ get isStable() {\n        return this.stableHeight === this.height;\n    }\n}\nfunction Rt(r) {\n    return ![\n        \"macos\",\n        \"web\",\n        \"weba\"\n    ].includes(r);\n}\nfunction Vt(r, t, e) {\n    if (r || !Rt(t)) return new G({\n        height: window.innerHeight,\n        isExpanded: !0,\n        postEvent: e,\n        stableHeight: window.innerHeight,\n        width: window.innerWidth\n    });\n    const s = $(\"viewport\");\n    return s ? new G({\n        ...s,\n        postEvent: e\n    }) : null;\n}\nfunction It(r) {\n    return r.listen(), r.on(\"change\", ()=>L(\"viewport\", {\n            height: r.height,\n            isExpanded: r.isExpanded,\n            stableHeight: r.stableHeight,\n            width: r.width\n        })), r;\n}\nfunction He(r, t, e) {\n    const s = It(Vt(r, t, e) || new G({\n        width: 0,\n        height: 0,\n        isExpanded: !1,\n        postEvent: e,\n        stableHeight: 0\n    }));\n    return Rt(t) && s.sync({\n        postEvent: e,\n        timeout: 100\n    }).catch((n)=>{\n        console.error(\"Unable to actualize viewport state\", n);\n    }), s;\n}\nasync function Ue(r, t, e) {\n    return It(Vt(r, t, e) || await At({\n        postEvent: e,\n        timeout: 100\n    }).then(({ height: s, isStateStable: n, ...i })=>new G({\n            ...i,\n            height: s,\n            stableHeight: n ? s : 0\n        })));\n}\nfunction S(r, t) {\n    document.documentElement.style.setProperty(r, t);\n}\nfunction Me(r, t) {\n    const e = ()=>{\n        S(\"--tg-background-color\", r.backgroundColor);\n    }, s = ()=>{\n        const { backgroundColor: n, secondaryBackgroundColor: i } = t;\n        r.headerColor === \"bg_color\" ? n && S(\"--tg-header-color\", n) : r.headerColor === \"secondary_bg_color\" ? i && S(\"--tg-header-color\", i) : S(\"--tg-header-color\", r.headerColor);\n    };\n    t.on(\"change\", s), r.on(\"change:backgroundColor\", e), r.on(\"change:headerColor\", s), e(), s();\n}\nfunction je(r) {\n    const t = ()=>{\n        const e = r.getState();\n        Object.entries(e).forEach(([s, n])=>{\n            if (n) {\n                const i = s.replace(/[A-Z]/g, (a)=>`-${a.toLowerCase()}`);\n                S(`--tg-theme-${i}`, n);\n            }\n        });\n    };\n    r.on(\"change\", t), t();\n}\nfunction ot(r) {\n    const t = ()=>S(\"--tg-viewport-height\", `${r.height}px`), e = ()=>S(\"--tg-viewport-width\", `${r.width}px`), s = ()=>S(\"--tg-viewport-height\", `${r.stableHeight}px`);\n    r.on(\"change:height\", t), r.on(\"change:width\", e), r.on(\"change:stableHeight\", s), t(), e(), s();\n}\nfunction Ge(r) {\n    return typeof r == \"object\" ? r : r ? {\n        themeParams: !0,\n        viewport: !0,\n        miniApp: !0\n    } : {};\n}\nfunction at(r, t, e, s) {\n    const n = Ge(r);\n    n.miniApp && Me(t, e), n.themeParams && je(e), n.viewport && (s instanceof Promise ? s.then(ot) : ot(s));\n}\nfunction Fe(r) {\n    const { hostname: t, pathname: e } = new URL(r, window.location.href);\n    if (t !== \"t.me\") throw new Error(`Incorrect hostname: ${t}`);\n    const s = e.match(/^\\/(\\$|invoice\\/)([A-Za-z0-9\\-_=]+)$/);\n    if (s === null) throw new Error('Link pathname has incorrect format. Expected to receive \"/invoice/{slug}\" or \"/${slug}\"');\n    return s[2];\n}\nclass ze {\n    constructor(t, e = f){\n        o(this, \"ee\", new w());\n        o(this, \"state\");\n        /**\n     * Adds new event listener.\n     */ o(this, \"on\", this.ee.on.bind(this.ee));\n        /**\n     * Removes event listener.\n     */ o(this, \"off\", this.ee.off.bind(this.ee));\n        /**\n     * Checks if specified method is supported by current component.\n     */ o(this, \"supports\");\n        this.postEvent = e, this.state = new _({\n            isOpened: !1\n        }, this.ee), this.supports = E(t, {\n            open: \"web_app_open_invoice\"\n        });\n    }\n    set isOpened(t) {\n        this.state.set(\"isOpened\", t);\n    }\n    /**\n   * True if invoice is currently opened.\n   */ get isOpened() {\n        return this.state.get(\"isOpened\");\n    }\n    async open(t, e) {\n        if (this.isOpened) throw new Error(\"Invoice is already opened\");\n        const s = e ? Fe(t) : t;\n        this.isOpened = !0;\n        try {\n            return (await m(\"web_app_open_invoice\", {\n                slug: s\n            }, \"invoice_closed\", {\n                postEvent: this.postEvent,\n                capture (i) {\n                    return s === i.slug;\n                }\n            })).status;\n        } finally{\n            this.isOpened = !1;\n        }\n    }\n}\nfunction Je(r) {\n    const t = r.message.trim(), e = (r.title || \"\").trim(), s = r.buttons || [];\n    let n;\n    if (e.length > 64) throw new Error(`Title has incorrect size: ${e.length}`);\n    if (t.length === 0 || t.length > 256) throw new Error(`Message has incorrect size: ${t.length}`);\n    if (s.length > 3) throw new Error(`Buttons have incorrect size: ${s.length}`);\n    return s.length === 0 ? n = [\n        {\n            type: \"close\",\n            id: \"\"\n        }\n    ] : n = s.map((i)=>{\n        const { id: a = \"\" } = i;\n        if (a.length > 64) throw new Error(`Button ID has incorrect size: ${a}`);\n        if (i.type === void 0 || i.type === \"default\" || i.type === \"destructive\") {\n            const c = i.text.trim();\n            if (c.length === 0 || c.length > 64) {\n                const u = i.type || \"default\";\n                throw new Error(`Button text with type \"${u}\" has incorrect size: ${i.text.length}`);\n            }\n            return {\n                ...i,\n                text: c,\n                id: a\n            };\n        }\n        return {\n            ...i,\n            id: a\n        };\n    }), {\n        title: e,\n        message: t,\n        buttons: n\n    };\n}\nclass Qe {\n    constructor(t, e = f){\n        o(this, \"ee\", new w());\n        o(this, \"state\");\n        /**\n     * Adds new event listener.\n     */ o(this, \"on\", this.ee.on.bind(this.ee));\n        /**\n     * Removes event listener.\n     */ o(this, \"off\", this.ee.off.bind(this.ee));\n        /**\n     * Checks if specified method is supported by current component.\n     */ o(this, \"supports\");\n        this.postEvent = e, this.state = new _({\n            isOpened: !1\n        }, this.ee), this.supports = E(t, {\n            open: \"web_app_open_popup\"\n        });\n    }\n    set isOpened(t) {\n        this.state.set(\"isOpened\", t);\n    }\n    /**\n   * True if popup is currently opened.\n   */ get isOpened() {\n        return this.state.get(\"isOpened\");\n    }\n    /**\n   * A method that shows a native popup described by the `params` argument.\n   * Promise will be resolved when popup is closed. Resolved value will have\n   * an identifier of pressed button.\n   *\n   * In case, user clicked outside the popup or clicked top right popup close\n   * button, null will be returned.\n   *\n   * FIXME: In desktop, this function may work incorrectly.\n   *  Issue: https://github.com/Telegram-Mini-Apps/tma.js/issues/7\n   * @param options - popup parameters.\n   * @throws {Error} Popup is already opened.\n   */ open(t) {\n        if (this.isOpened) throw new Error(\"Popup is already opened.\");\n        return this.isOpened = !0, m(\"web_app_open_popup\", Je(t), \"popup_closed\", {\n            postEvent: this.postEvent\n        }).then(({ button_id: e = null })=>e).finally(()=>{\n            this.isOpened = !1;\n        });\n    }\n}\nclass Ze {\n    constructor(t, e = f){\n        o(this, \"ee\", new w());\n        o(this, \"state\");\n        /**\n     * Adds new event listener.\n     */ o(this, \"on\", this.ee.on.bind(this.ee));\n        /**\n     * Removes event listener.\n     */ o(this, \"off\", this.ee.off.bind(this.ee));\n        /**\n     * Checks if specified method is supported by current component.\n     */ o(this, \"supports\");\n        this.postEvent = e, this.state = new _({\n            isOpened: !1\n        }, this.ee), this.supports = E(t, {\n            close: \"web_app_close_scan_qr_popup\",\n            open: \"web_app_open_scan_qr_popup\"\n        });\n    }\n    /**\n   * Closes scanner.\n   */ close() {\n        this.postEvent(\"web_app_close_scan_qr_popup\"), this.isOpened = !1;\n    }\n    set isOpened(t) {\n        this.state.set(\"isOpened\", t);\n    }\n    /**\n   * Returns true in case, QR scanner is currently opened.\n   */ get isOpened() {\n        return this.state.get(\"isOpened\");\n    }\n    /**\n   * Opens scanner with specified title shown to user. Method returns promise\n   * with scanned QR content in case, it was scanned. It will contain null in\n   * case, scanner was closed.\n   * @param text - title to display.\n   */ async open(t) {\n        if (this.isOpened) throw new Error(\"QR scanner is already opened.\");\n        this.isOpened = !0;\n        try {\n            const e = await m(\"web_app_open_scan_qr_popup\", {\n                text: t\n            }, [\n                \"qr_text_received\",\n                \"scan_qr_popup_closed\"\n            ], {\n                postEvent: this.postEvent\n            });\n            return typeof e == \"object\" && typeof e.data == \"string\" ? e.data : null;\n        } finally{\n            this.isOpened = !1;\n        }\n    }\n}\nclass Ke {\n    constructor(t, e, s = f){\n        /**\n     * Checks if specified method is supported by current component.\n     */ o(this, \"supports\");\n        /**\n     * Checks if specified method parameter is supported by current component.\n     */ o(this, \"supportsParam\");\n        this.version = t, this.createRequestId = e, this.postEvent = s, this.supports = E(t, {\n            readTextFromClipboard: \"web_app_read_text_from_clipboard\"\n        }), this.supportsParam = kt(t, {\n            \"openLink.tryInstantView\": [\n                \"web_app_open_link\",\n                \"try_instant_view\"\n            ]\n        });\n    }\n    /**\n   * Opens a link in an external browser. The Mini App will not be closed.\n   *\n   * Note that this method can be called only in response to the user\n   * interaction with the Mini App interface (e.g. click inside the Mini App\n   * or on the main button).\n   * @param url - URL to be opened.\n   * @param tryInstantView\n   */ openLink(t, e) {\n        const s = new URL(t, window.location.href).toString();\n        if (!A(\"web_app_open_link\", this.version)) {\n            window.open(s, \"_blank\");\n            return;\n        }\n        this.postEvent(\"web_app_open_link\", {\n            url: s,\n            ...typeof e == \"boolean\" ? {\n                try_instant_view: e\n            } : {}\n        });\n    }\n    /**\n   * Opens a Telegram link inside Telegram app. The Mini App will be closed. It expects passing\n   * link in full format, with hostname \"t.me\".\n   * @param url - URL to be opened.\n   * @throws {Error} URL has not allowed hostname.\n   */ openTelegramLink(t) {\n        const { hostname: e, pathname: s, search: n } = new URL(t, window.location.href);\n        if (e !== \"t.me\") throw new Error(`URL has not allowed hostname: ${e}. Only \"t.me\" is allowed`);\n        if (!A(\"web_app_open_tg_link\", this.version)) {\n            window.location.href = t;\n            return;\n        }\n        this.postEvent(\"web_app_open_tg_link\", {\n            path_full: s + n\n        });\n    }\n    /**\n   * Reads text from clipboard and returns string or null. null is returned\n   * in cases:\n   * - Value in clipboard is not text\n   * - Access to clipboard is not allowed\n   */ readTextFromClipboard() {\n        return m(\"web_app_read_text_from_clipboard\", {\n            req_id: this.createRequestId()\n        }, \"clipboard_text_received\", {\n            postEvent: this.postEvent\n        }).then(({ data: t = null })=>t);\n    }\n}\nfunction ur(r = {}) {\n    const { async: t = !1, cssVars: e = !1, acceptCustomStyles: s = !1 } = r;\n    try {\n        const { launchParams: { initData: n, initDataRaw: i, version: a, platform: c, themeParams: u, botInline: p = !1 }, isPageReload: l } = Ct(), b = De(), d = ye(a);\n        vt() && (s && Ae(), d(\"iframe_ready\", {\n            reload_supported: !0\n        }), y(\"reload_iframe\", ()=>window.location.reload()));\n        const C = {\n            backButton: Re(l, a, d),\n            closingBehavior: Ve(l, d),\n            cloudStorage: new xe(a, b, d),\n            createRequestId: b,\n            hapticFeedback: new qe(a, d),\n            invoice: new ze(a, d),\n            mainButton: Le(l, u.buttonColor || \"#000000\", u.buttonTextColor || \"#ffffff\", d),\n            miniApp: Be(l, u.backgroundColor || \"#ffffff\", a, p, b, d),\n            popup: new Qe(a, d),\n            postEvent: d,\n            qrScanner: new Ze(a, d),\n            settingsButton: Ne(l, a, d),\n            themeParams: Oe(u),\n            utils: new Ke(a, b, d),\n            ...n ? {\n                initData: new Ut(n),\n                initDataRaw: i\n            } : {}\n        }, x = t ? Ue(l, c, d) : He(l, c, d);\n        return x instanceof Promise ? x.then((T)=>(at(e, C.miniApp, C.themeParams, T), {\n                ...C,\n                viewport: T\n            })) : (at(e, C.miniApp, C.themeParams, x), {\n            ...C,\n            viewport: x\n        });\n    } catch (n) {\n        if (t) return Promise.reject(n);\n        throw n;\n    }\n}\nfunction W(r, t) {\n    return r.startsWith(t) ? r : `${t}${r}`;\n}\nfunction pr(r) {\n    const t = r.match(/#(.+)/);\n    return t ? t[1] : null;\n}\nasync function O(r) {\n    return r === 0 ? !0 : Promise.race([\n        new Promise((t)=>{\n            window.addEventListener(\"popstate\", function e() {\n                window.removeEventListener(\"popstate\", e), t(!0);\n            }), window.history.go(r);\n        }),\n        // Usually, it takes about 1ms to emit this event, but we use some buffer.\n        new Promise((t)=>{\n            setTimeout(t, 50, !1);\n        })\n    ]);\n}\nasync function Ye() {\n    if (window.history.length <= 1 || (window.history.pushState(null, \"\"), await O(1 - window.history.length))) return;\n    let t = await O(-1);\n    for(; t;)t = await O(-1);\n}\nclass Xe {\n    constructor(t, e, { debug: s = !1, loggerPrefix: n = \"Navigator\" }){\n        o(this, \"logger\");\n        o(this, \"entries\");\n        if (this.entriesCursor = e, t.length === 0) throw new Error(\"Entries list should not be empty.\");\n        if (e >= t.length) throw new Error(\"Cursor should be less than entries count.\");\n        this.entries = t.map(({ pathname: i = \"\", search: a, hash: c })=>{\n            if (!i.startsWith(\"/\") && i.length > 0) throw new Error('Pathname should start with \"/\"');\n            return {\n                pathname: W(i, \"/\"),\n                search: a ? W(a, \"?\") : \"\",\n                hash: c ? W(c, \"#\") : \"\"\n            };\n        }), this.logger = new Pt(`[${n}]`, s);\n    }\n    /**\n   * Converts entry to the navigation entry.\n   * @param entry - entry data\n   */ formatEntry(t) {\n        let e;\n        if (typeof t == \"string\") e = t;\n        else {\n            const { pathname: a = \"\", search: c, hash: u } = t;\n            e = a + (c ? W(c, \"?\") : \"\") + (u ? W(u, \"#\") : \"\");\n        }\n        const { pathname: s, search: n, hash: i } = new URL(e, `https://localhost${this.path}`);\n        return {\n            pathname: s,\n            search: n,\n            hash: i\n        };\n    }\n    /**\n   * Current entry.\n   */ get entry() {\n        return this.entries[this.entriesCursor];\n    }\n    /**\n   * Goes back in history.\n   */ back() {\n        return this.go(-1);\n    }\n    /**\n   * Current entries cursor.\n   */ get cursor() {\n        return this.entriesCursor;\n    }\n    /**\n   * True if navigator can go back.\n   */ get canGoBack() {\n        return this.entriesCursor > 0;\n    }\n    /**\n   * True if navigator can go forward.\n   */ get canGoForward() {\n        return this.entriesCursor !== this.entries.length - 1;\n    }\n    /**\n   * Goes forward in history.\n   */ forward() {\n        return this.go(1);\n    }\n    /**\n   * Moves entries cursor by specified delta.\n   * @param delta - cursor delta.\n   */ go(t) {\n        this.logger.log(`called go(${t})`);\n        const e = Math.min(this.entries.length - 1, Math.max(this.entriesCursor + t, 0));\n        if (this.entriesCursor === e) return this.performGo({\n            updated: !1,\n            delta: t\n        });\n        const s = this.entry;\n        this.entriesCursor = e;\n        const n = this.entry;\n        return this.logger.log(\"State changed\", {\n            before: s,\n            after: n\n        }), this.performGo({\n            updated: !0,\n            delta: t,\n            before: s,\n            after: n\n        });\n    }\n    /**\n   * Returns copy of navigator entries.\n   */ getEntries() {\n        return this.entries.map((t)=>({\n                ...t\n            }));\n    }\n    /**\n   * Current hash.\n   * @example\n   * \"\", \"#\", \"#hash\"\n   */ get hash() {\n        return this.entry.hash;\n    }\n    /**\n   * Pushes new entry. Method replaces all entries after the current one with the inserted.\n   * @param entry - entry data.\n   *\n   * @example Pushing absolute pathname.\n   * push(\"/absolute-path\"); // \"/absolute-path\"\n   *\n   * @example Pushing relative pathname.\n   * // Pushing relative path replaces N last path parts, where N is pushed pathname parts count.\n   * // Pushing empty path is recognized as relative, but not replacing the last pathname part.\n   * push(\"relative\"); // \"/home/root\" -> \"/home/relative\"\n   *\n   * @example Pushing query parameters.\n   * push(\"/absolute?my-param=1\"); // \"/home\" -> \"/absolute?my-param=1\"\n   * push(\"relative?my-param=1\"); // \"/home/root\" -> \"/home/relative?my-param=1\"\n   * push(\"?my-param=1\"); // \"/home\" -> \"/home?my-param=1\"\n   *\n   * @example Pushing hash.\n   * push(\"#my-hash\"); // \"/home\" -> \"/home#my-hash\"\n   * push(\"johny#my-hash\"); // \"/home/root\" -> \"/home/johny#my-hash\"\n   */ push(t) {\n        this.entriesCursor !== this.entries.length - 1 && this.entries.splice(this.entriesCursor + 1);\n        const e = this.formatEntry(t), s = this.entry;\n        this.entriesCursor += 1, this.entries[this.entriesCursor] = e;\n        const n = this.entry;\n        return this.logger.log(\"State changed\", {\n            before: s,\n            after: n\n        }), this.performPush({\n            before: s,\n            after: n\n        });\n    }\n    /**\n   * Current full path including pathname, query parameters and hash.\n   */ get path() {\n        return `${this.pathname}${this.search}${this.hash}`;\n    }\n    /**\n   * Current pathname.\n   * @example\n   * \"/\", \"/abc\"\n   */ get pathname() {\n        return this.entry.pathname;\n    }\n    /**\n   * Replaces current entry. Has the same logic as `push` method.\n   * @param entry - entry data.\n   * @see push\n   * @returns True if changes were done.\n   */ replace(t) {\n        const e = this.formatEntry(t);\n        if (this.search === e.search && this.pathname === e.pathname && this.hash === e.hash) return this.performReplace({\n            updated: !1,\n            entry: e\n        });\n        const s = this.entry;\n        this.entries[this.entriesCursor] = e;\n        const n = this.entry;\n        return this.logger.log(\"State changed\", {\n            before: s,\n            after: n\n        }), this.performReplace({\n            updated: !0,\n            before: s,\n            after: n\n        });\n    }\n    /**\n   * Current query parameters.\n   * @example\n   * \"\", \"?\", \"?a=1\"\n   */ get search() {\n        return this.entry.search;\n    }\n}\nconst ct = 0, Z = 1, K = 2;\nclass Lt extends Xe {\n    constructor(e, s, n = {}){\n        super(e, s, {\n            ...n,\n            loggerPrefix: \"HashNavigator\"\n        });\n        o(this, \"ee\", new w());\n        o(this, \"attached\", !1);\n        /**\n     * Handles window \"popstate\" event.\n     * @param state - event state.\n     */ o(this, \"onPopState\", async ({ state: e })=>{\n            if (this.logger.log('\"popstate\" event received. State:', e), e === null) return this.push(window.location.hash.slice(1));\n            if (e === ct) {\n                this.logger.log(\"Void reached. Moving history forward\"), window.history.forward();\n                return;\n            }\n            if (e === Z) return this.back();\n            if (e === K) return this.forward();\n        });\n        o(this, \"back\", ()=>super.back());\n        /**\n     * Adds new event listener.\n     */ o(this, \"on\", this.ee.on.bind(this.ee));\n        /**\n     * Removes event listener.\n     */ o(this, \"off\", this.ee.off.bind(this.ee));\n    }\n    /**\n   * Creates navigator from current window location hash.\n   * @param options - options passed to constructor.\n   */ static fromLocation(e) {\n        const { search: s, pathname: n, hash: i } = new URL(window.location.hash.slice(1), window.location.href);\n        return new Lt([\n            {\n                search: s,\n                pathname: n,\n                hash: i\n            }\n        ], 0, e);\n    }\n    async performGo(e) {\n        e.updated && (this.attached && await this.syncHistory(), this.emitChanged(e.before, e.after));\n    }\n    async performPush({ before: e, after: s }) {\n        this.attached && await this.syncHistory(), this.emitChanged(e, s);\n    }\n    async performReplace(e) {\n        e.updated && (this.attached && window.history.replaceState(null, \"\", `#${this.path}`), this.emitChanged(e.before, e.after));\n    }\n    /**\n   * Synchronizes current navigator state with browser history.\n   */ async syncHistory() {\n        window.removeEventListener(\"popstate\", this.onPopState);\n        const e = `#${this.path}`;\n        await Ye(), f(\"web_app_setup_back_button\", {\n            is_visible: this.canGoBack\n        }), this.canGoBack && this.canGoForward ? (this.logger.log(\"Setting up history: [<-, *, ->]\"), window.history.replaceState(Z, \"\"), window.history.pushState(null, \"\", e), window.history.pushState(K, \"\"), await O(-1)) : this.canGoBack ? (this.logger.log(\"Setting up history: [<-, *]\"), window.history.replaceState(Z, \"\"), window.history.pushState(null, \"\", e)) : this.canGoForward ? (this.logger.log(\"Setting up history: [*, ->]\"), window.history.replaceState(null, e), window.history.pushState(K, \"\"), await O(-1)) : (this.logger.log(\"Setting up history: [~, *]\"), window.history.replaceState(ct, \"\"), window.history.pushState(null, \"\", e)), window.addEventListener(\"popstate\", this.onPopState);\n    }\n    emitChanged(e, s) {\n        this.ee.emit(\"change\", {\n            navigator: this,\n            from: e,\n            to: s\n        });\n    }\n    /**\n   * Attaches current navigator to the browser history allowing navigator to manipulate it.\n   */ async attach() {\n        if (!this.attached) return this.logger.log(\"Attaching\", this), this.attached = !0, y(\"back_button_pressed\", this.back), this.syncHistory();\n    }\n    /**\n   * Detaches current navigator from the browser history.\n   */ detach() {\n        this.attached && (this.logger.log(\"Detaching\", this), this.attached = !1, window.removeEventListener(\"popstate\", this.onPopState), I(\"back_button_pressed\", this.back));\n    }\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tma.js+sdk@1.2.0/node_modules/@tma.js/sdk/dist/index.mjs\n");

/***/ })

};
;