"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-qr-reader@3.0.0-beta-1_react-dom@18.2.0_react@18.2.0";
exports.ids = ["vendor-chunks/react-qr-reader@3.0.0-beta-1_react-dom@18.2.0_react@18.2.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/react-qr-reader@3.0.0-beta-1_react-dom@18.2.0_react@18.2.0/node_modules/react-qr-reader/dist/esm/index.js":
/*!**************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-qr-reader@3.0.0-beta-1_react-dom@18.2.0_react@18.2.0/node_modules/react-qr-reader/dist/esm/index.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QrReader: () => (/* binding */ jo),\n/* harmony export */   useQrReader: () => (/* binding */ Go)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n\nvar n, o, i = (n = function(t, e) {\n    return n = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(t, e) {\n        t.__proto__ = e;\n    } || function(t, e) {\n        for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n    }, n(t, e);\n}, function(t, e) {\n    function r() {\n        this.constructor = t;\n    }\n    n(t, e), t.prototype = null === e ? Object.create(e) : (r.prototype = e.prototype, new r);\n}), a = function(t) {\n    function e(e) {\n        var r, n, o, i = this.constructor, a = t.call(this, e) || this;\n        return Object.defineProperty(a, \"name\", {\n            value: i.name,\n            enumerable: !1,\n            configurable: !0\n        }), r = a, n = i.prototype, (o = Object.setPrototypeOf) ? o(r, n) : r.__proto__ = n, function(t, e) {\n            void 0 === e && (e = t.constructor);\n            var r = Error.captureStackTrace;\n            r && r(t, e);\n        }(a), a;\n    }\n    return i(e, t), e;\n}(Error), u = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), s = function(t) {\n    function e(e) {\n        void 0 === e && (e = void 0);\n        var r = t.call(this, e) || this;\n        return r.message = e, r;\n    }\n    return u(e, t), e.prototype.getKind = function() {\n        return this.constructor.kind;\n    }, e.kind = \"Exception\", e;\n}(a), c = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), f = function(t) {\n    function e() {\n        return null !== t && t.apply(this, arguments) || this;\n    }\n    return c(e, t), e.kind = \"ArgumentException\", e;\n}(s), h = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), l = function(t) {\n    function e() {\n        return null !== t && t.apply(this, arguments) || this;\n    }\n    return h(e, t), e.kind = \"IllegalArgumentException\", e;\n}(s), d = function() {\n    function t(t) {\n        if (this.binarizer = t, null === t) throw new l(\"Binarizer must be non-null.\");\n    }\n    return t.prototype.getWidth = function() {\n        return this.binarizer.getWidth();\n    }, t.prototype.getHeight = function() {\n        return this.binarizer.getHeight();\n    }, t.prototype.getBlackRow = function(t, e) {\n        return this.binarizer.getBlackRow(t, e);\n    }, t.prototype.getBlackMatrix = function() {\n        return null !== this.matrix && void 0 !== this.matrix || (this.matrix = this.binarizer.getBlackMatrix()), this.matrix;\n    }, t.prototype.isCropSupported = function() {\n        return this.binarizer.getLuminanceSource().isCropSupported();\n    }, t.prototype.crop = function(e, r, n, o) {\n        var i = this.binarizer.getLuminanceSource().crop(e, r, n, o);\n        return new t(this.binarizer.createBinarizer(i));\n    }, t.prototype.isRotateSupported = function() {\n        return this.binarizer.getLuminanceSource().isRotateSupported();\n    }, t.prototype.rotateCounterClockwise = function() {\n        var e = this.binarizer.getLuminanceSource().rotateCounterClockwise();\n        return new t(this.binarizer.createBinarizer(e));\n    }, t.prototype.rotateCounterClockwise45 = function() {\n        var e = this.binarizer.getLuminanceSource().rotateCounterClockwise45();\n        return new t(this.binarizer.createBinarizer(e));\n    }, t.prototype.toString = function() {\n        try {\n            return this.getBlackMatrix().toString();\n        } catch (t) {\n            return \"\";\n        }\n    }, t;\n}(), p = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), g = function(t) {\n    function e() {\n        return null !== t && t.apply(this, arguments) || this;\n    }\n    return p(e, t), e.getChecksumInstance = function() {\n        return new e;\n    }, e.kind = \"ChecksumException\", e;\n}(s), y = function() {\n    function t(t) {\n        this.source = t;\n    }\n    return t.prototype.getLuminanceSource = function() {\n        return this.source;\n    }, t.prototype.getWidth = function() {\n        return this.source.getWidth();\n    }, t.prototype.getHeight = function() {\n        return this.source.getHeight();\n    }, t;\n}(), w = function() {\n    function t() {}\n    return t.arraycopy = function(t, e, r, n, o) {\n        for(; o--;)r[n++] = t[e++];\n    }, t.currentTimeMillis = function() {\n        return Date.now();\n    }, t;\n}(), _ = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), v = function(t) {\n    function e() {\n        return null !== t && t.apply(this, arguments) || this;\n    }\n    return _(e, t), e.kind = \"IndexOutOfBoundsException\", e;\n}(s), m = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), A = function(t) {\n    function e(e, r) {\n        void 0 === e && (e = void 0), void 0 === r && (r = void 0);\n        var n = t.call(this, r) || this;\n        return n.index = e, n.message = r, n;\n    }\n    return m(e, t), e.kind = \"ArrayIndexOutOfBoundsException\", e;\n}(v), E = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, C = function() {\n    function t() {}\n    return t.fill = function(t, e) {\n        for(var r = 0, n = t.length; r < n; r++)t[r] = e;\n    }, t.fillWithin = function(e, r, n, o) {\n        t.rangeCheck(e.length, r, n);\n        for(var i = r; i < n; i++)e[i] = o;\n    }, t.rangeCheck = function(t, e, r) {\n        if (e > r) throw new l(\"fromIndex(\" + e + \") > toIndex(\" + r + \")\");\n        if (e < 0) throw new A(e);\n        if (r > t) throw new A(r);\n    }, t.asList = function() {\n        for(var t = [], e = 0; e < arguments.length; e++)t[e] = arguments[e];\n        return t;\n    }, t.create = function(t, e, r) {\n        return Array.from({\n            length: t\n        }).map(function(t) {\n            return Array.from({\n                length: e\n            }).fill(r);\n        });\n    }, t.createInt32Array = function(t, e, r) {\n        return Array.from({\n            length: t\n        }).map(function(t) {\n            return Int32Array.from({\n                length: e\n            }).fill(r);\n        });\n    }, t.equals = function(t, e) {\n        if (!t) return !1;\n        if (!e) return !1;\n        if (!t.length) return !1;\n        if (!e.length) return !1;\n        if (t.length !== e.length) return !1;\n        for(var r = 0, n = t.length; r < n; r++)if (t[r] !== e[r]) return !1;\n        return !0;\n    }, t.hashCode = function(t) {\n        var e, r;\n        if (null === t) return 0;\n        var n = 1;\n        try {\n            for(var o = E(t), i = o.next(); !i.done; i = o.next()){\n                n = 31 * n + i.value;\n            }\n        } catch (t) {\n            e = {\n                error: t\n            };\n        } finally{\n            try {\n                i && !i.done && (r = o.return) && r.call(o);\n            } finally{\n                if (e) throw e.error;\n            }\n        }\n        return n;\n    }, t.fillUint8Array = function(t, e) {\n        for(var r = 0; r !== t.length; r++)t[r] = e;\n    }, t.copyOf = function(t, e) {\n        return t.slice(0, e);\n    }, t.copyOfUint8Array = function(t, e) {\n        if (t.length <= e) {\n            var r = new Uint8Array(e);\n            return r.set(t), r;\n        }\n        return t.slice(0, e);\n    }, t.copyOfRange = function(t, e, r) {\n        var n = r - e, o = new Int32Array(n);\n        return w.arraycopy(t, e, o, 0, n), o;\n    }, t.binarySearch = function(e, r, n) {\n        void 0 === n && (n = t.numberComparator);\n        for(var o = 0, i = e.length - 1; o <= i;){\n            var a = i + o >> 1, u = n(r, e[a]);\n            if (u > 0) o = a + 1;\n            else {\n                if (!(u < 0)) return a;\n                i = a - 1;\n            }\n        }\n        return -o - 1;\n    }, t.numberComparator = function(t, e) {\n        return t - e;\n    }, t;\n}(), I = function() {\n    function t() {}\n    return t.numberOfTrailingZeros = function(t) {\n        var e;\n        if (0 === t) return 32;\n        var r = 31;\n        return 0 !== (e = t << 16) && (r -= 16, t = e), 0 !== (e = t << 8) && (r -= 8, t = e), 0 !== (e = t << 4) && (r -= 4, t = e), 0 !== (e = t << 2) && (r -= 2, t = e), r - (t << 1 >>> 31);\n    }, t.numberOfLeadingZeros = function(t) {\n        if (0 === t) return 32;\n        var e = 1;\n        return t >>> 16 == 0 && (e += 16, t <<= 16), t >>> 24 == 0 && (e += 8, t <<= 8), t >>> 28 == 0 && (e += 4, t <<= 4), t >>> 30 == 0 && (e += 2, t <<= 2), e -= t >>> 31;\n    }, t.toHexString = function(t) {\n        return t.toString(16);\n    }, t.toBinaryString = function(t) {\n        return String(parseInt(String(t), 2));\n    }, t.bitCount = function(t) {\n        return t = (t = (858993459 & (t -= t >>> 1 & 1431655765)) + (t >>> 2 & 858993459)) + (t >>> 4) & 252645135, t += t >>> 8, 63 & (t += t >>> 16);\n    }, t.truncDivision = function(t, e) {\n        return Math.trunc(t / e);\n    }, t.parseInt = function(t, e) {\n        return void 0 === e && (e = void 0), parseInt(t, e);\n    }, t.MIN_VALUE_32_BITS = -2147483648, t.MAX_VALUE = Number.MAX_SAFE_INTEGER, t;\n}(), S = function() {\n    function t(e, r) {\n        void 0 === e ? (this.size = 0, this.bits = new Int32Array(1)) : (this.size = e, this.bits = null == r ? t.makeArray(e) : r);\n    }\n    return t.prototype.getSize = function() {\n        return this.size;\n    }, t.prototype.getSizeInBytes = function() {\n        return Math.floor((this.size + 7) / 8);\n    }, t.prototype.ensureCapacity = function(e) {\n        if (e > 32 * this.bits.length) {\n            var r = t.makeArray(e);\n            w.arraycopy(this.bits, 0, r, 0, this.bits.length), this.bits = r;\n        }\n    }, t.prototype.get = function(t) {\n        return 0 != (this.bits[Math.floor(t / 32)] & 1 << (31 & t));\n    }, t.prototype.set = function(t) {\n        this.bits[Math.floor(t / 32)] |= 1 << (31 & t);\n    }, t.prototype.flip = function(t) {\n        this.bits[Math.floor(t / 32)] ^= 1 << (31 & t);\n    }, t.prototype.getNextSet = function(t) {\n        var e = this.size;\n        if (t >= e) return e;\n        var r = this.bits, n = Math.floor(t / 32), o = r[n];\n        o &= ~((1 << (31 & t)) - 1);\n        for(var i = r.length; 0 === o;){\n            if (++n === i) return e;\n            o = r[n];\n        }\n        var a = 32 * n + I.numberOfTrailingZeros(o);\n        return a > e ? e : a;\n    }, t.prototype.getNextUnset = function(t) {\n        var e = this.size;\n        if (t >= e) return e;\n        var r = this.bits, n = Math.floor(t / 32), o = ~r[n];\n        o &= ~((1 << (31 & t)) - 1);\n        for(var i = r.length; 0 === o;){\n            if (++n === i) return e;\n            o = ~r[n];\n        }\n        var a = 32 * n + I.numberOfTrailingZeros(o);\n        return a > e ? e : a;\n    }, t.prototype.setBulk = function(t, e) {\n        this.bits[Math.floor(t / 32)] = e;\n    }, t.prototype.setRange = function(t, e) {\n        if (e < t || t < 0 || e > this.size) throw new l;\n        if (e !== t) {\n            e--;\n            for(var r = Math.floor(t / 32), n = Math.floor(e / 32), o = this.bits, i = r; i <= n; i++){\n                var a = (2 << (i < n ? 31 : 31 & e)) - (1 << (i > r ? 0 : 31 & t));\n                o[i] |= a;\n            }\n        }\n    }, t.prototype.clear = function() {\n        for(var t = this.bits.length, e = this.bits, r = 0; r < t; r++)e[r] = 0;\n    }, t.prototype.isRange = function(t, e, r) {\n        if (e < t || t < 0 || e > this.size) throw new l;\n        if (e === t) return !0;\n        e--;\n        for(var n = Math.floor(t / 32), o = Math.floor(e / 32), i = this.bits, a = n; a <= o; a++){\n            var u = (2 << (a < o ? 31 : 31 & e)) - (1 << (a > n ? 0 : 31 & t)) & 4294967295;\n            if ((i[a] & u) !== (r ? u : 0)) return !1;\n        }\n        return !0;\n    }, t.prototype.appendBit = function(t) {\n        this.ensureCapacity(this.size + 1), t && (this.bits[Math.floor(this.size / 32)] |= 1 << (31 & this.size)), this.size++;\n    }, t.prototype.appendBits = function(t, e) {\n        if (e < 0 || e > 32) throw new l(\"Num bits must be between 0 and 32\");\n        this.ensureCapacity(this.size + e);\n        for(var r = e; r > 0; r--)this.appendBit(1 == (t >> r - 1 & 1));\n    }, t.prototype.appendBitArray = function(t) {\n        var e = t.size;\n        this.ensureCapacity(this.size + e);\n        for(var r = 0; r < e; r++)this.appendBit(t.get(r));\n    }, t.prototype.xor = function(t) {\n        if (this.size !== t.size) throw new l(\"Sizes don't match\");\n        for(var e = this.bits, r = 0, n = e.length; r < n; r++)e[r] ^= t.bits[r];\n    }, t.prototype.toBytes = function(t, e, r, n) {\n        for(var o = 0; o < n; o++){\n            for(var i = 0, a = 0; a < 8; a++)this.get(t) && (i |= 1 << 7 - a), t++;\n            e[r + o] = i;\n        }\n    }, t.prototype.getBitArray = function() {\n        return this.bits;\n    }, t.prototype.reverse = function() {\n        for(var t = new Int32Array(this.bits.length), e = Math.floor((this.size - 1) / 32), r = e + 1, n = this.bits, o = 0; o < r; o++){\n            var i = n[o];\n            i = (i = (i = (i = (i = i >> 1 & 1431655765 | (1431655765 & i) << 1) >> 2 & 858993459 | (858993459 & i) << 2) >> 4 & 252645135 | (252645135 & i) << 4) >> 8 & 16711935 | (16711935 & i) << 8) >> 16 & 65535 | (65535 & i) << 16, t[e - o] = i;\n        }\n        if (this.size !== 32 * r) {\n            var a = 32 * r - this.size, u = t[0] >>> a;\n            for(o = 1; o < r; o++){\n                var s = t[o];\n                u |= s << 32 - a, t[o - 1] = u, u = s >>> a;\n            }\n            t[r - 1] = u;\n        }\n        this.bits = t;\n    }, t.makeArray = function(t) {\n        return new Int32Array(Math.floor((t + 31) / 32));\n    }, t.prototype.equals = function(e) {\n        if (!(e instanceof t)) return !1;\n        var r = e;\n        return this.size === r.size && C.equals(this.bits, r.bits);\n    }, t.prototype.hashCode = function() {\n        return 31 * this.size + C.hashCode(this.bits);\n    }, t.prototype.toString = function() {\n        for(var t = \"\", e = 0, r = this.size; e < r; e++)0 == (7 & e) && (t += \" \"), t += this.get(e) ? \"X\" : \".\";\n        return t;\n    }, t.prototype.clone = function() {\n        return new t(this.size, this.bits.slice());\n    }, t;\n}();\n!function(t) {\n    t[t.OTHER = 0] = \"OTHER\", t[t.PURE_BARCODE = 1] = \"PURE_BARCODE\", t[t.POSSIBLE_FORMATS = 2] = \"POSSIBLE_FORMATS\", t[t.TRY_HARDER = 3] = \"TRY_HARDER\", t[t.CHARACTER_SET = 4] = \"CHARACTER_SET\", t[t.ALLOWED_LENGTHS = 5] = \"ALLOWED_LENGTHS\", t[t.ASSUME_CODE_39_CHECK_DIGIT = 6] = \"ASSUME_CODE_39_CHECK_DIGIT\", t[t.ASSUME_GS1 = 7] = \"ASSUME_GS1\", t[t.RETURN_CODABAR_START_END = 8] = \"RETURN_CODABAR_START_END\", t[t.NEED_RESULT_POINT_CALLBACK = 9] = \"NEED_RESULT_POINT_CALLBACK\", t[t.ALLOWED_EAN_EXTENSIONS = 10] = \"ALLOWED_EAN_EXTENSIONS\";\n}(o || (o = {}));\nvar O, T = o, b = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), R = function(t) {\n    function e() {\n        return null !== t && t.apply(this, arguments) || this;\n    }\n    return b(e, t), e.getFormatInstance = function() {\n        return new e;\n    }, e.kind = \"FormatException\", e;\n}(s), N = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n!function(t) {\n    t[t.Cp437 = 0] = \"Cp437\", t[t.ISO8859_1 = 1] = \"ISO8859_1\", t[t.ISO8859_2 = 2] = \"ISO8859_2\", t[t.ISO8859_3 = 3] = \"ISO8859_3\", t[t.ISO8859_4 = 4] = \"ISO8859_4\", t[t.ISO8859_5 = 5] = \"ISO8859_5\", t[t.ISO8859_6 = 6] = \"ISO8859_6\", t[t.ISO8859_7 = 7] = \"ISO8859_7\", t[t.ISO8859_8 = 8] = \"ISO8859_8\", t[t.ISO8859_9 = 9] = \"ISO8859_9\", t[t.ISO8859_10 = 10] = \"ISO8859_10\", t[t.ISO8859_11 = 11] = \"ISO8859_11\", t[t.ISO8859_13 = 12] = \"ISO8859_13\", t[t.ISO8859_14 = 13] = \"ISO8859_14\", t[t.ISO8859_15 = 14] = \"ISO8859_15\", t[t.ISO8859_16 = 15] = \"ISO8859_16\", t[t.SJIS = 16] = \"SJIS\", t[t.Cp1250 = 17] = \"Cp1250\", t[t.Cp1251 = 18] = \"Cp1251\", t[t.Cp1252 = 19] = \"Cp1252\", t[t.Cp1256 = 20] = \"Cp1256\", t[t.UnicodeBigUnmarked = 21] = \"UnicodeBigUnmarked\", t[t.UTF8 = 22] = \"UTF8\", t[t.ASCII = 23] = \"ASCII\", t[t.Big5 = 24] = \"Big5\", t[t.GB18030 = 25] = \"GB18030\", t[t.EUC_KR = 26] = \"EUC_KR\";\n}(O || (O = {}));\nvar D, P = function() {\n    function t(e, r, n) {\n        for(var o, i, a = [], u = 3; u < arguments.length; u++)a[u - 3] = arguments[u];\n        this.valueIdentifier = e, this.name = n, this.values = \"number\" == typeof r ? Int32Array.from([\n            r\n        ]) : r, this.otherEncodingNames = a, t.VALUE_IDENTIFIER_TO_ECI.set(e, this), t.NAME_TO_ECI.set(n, this);\n        for(var s = this.values, c = 0, f = s.length; c !== f; c++){\n            var h = s[c];\n            t.VALUES_TO_ECI.set(h, this);\n        }\n        try {\n            for(var l = N(a), d = l.next(); !d.done; d = l.next()){\n                var p = d.value;\n                t.NAME_TO_ECI.set(p, this);\n            }\n        } catch (t) {\n            o = {\n                error: t\n            };\n        } finally{\n            try {\n                d && !d.done && (i = l.return) && i.call(l);\n            } finally{\n                if (o) throw o.error;\n            }\n        }\n    }\n    return t.prototype.getValueIdentifier = function() {\n        return this.valueIdentifier;\n    }, t.prototype.getName = function() {\n        return this.name;\n    }, t.prototype.getValue = function() {\n        return this.values[0];\n    }, t.getCharacterSetECIByValue = function(e) {\n        if (e < 0 || e >= 900) throw new R(\"incorect value\");\n        var r = t.VALUES_TO_ECI.get(e);\n        if (void 0 === r) throw new R(\"incorect value\");\n        return r;\n    }, t.getCharacterSetECIByName = function(e) {\n        var r = t.NAME_TO_ECI.get(e);\n        if (void 0 === r) throw new R(\"incorect value\");\n        return r;\n    }, t.prototype.equals = function(e) {\n        if (!(e instanceof t)) return !1;\n        var r = e;\n        return this.getName() === r.getName();\n    }, t.VALUE_IDENTIFIER_TO_ECI = new Map, t.VALUES_TO_ECI = new Map, t.NAME_TO_ECI = new Map, t.Cp437 = new t(O.Cp437, Int32Array.from([\n        0,\n        2\n    ]), \"Cp437\"), t.ISO8859_1 = new t(O.ISO8859_1, Int32Array.from([\n        1,\n        3\n    ]), \"ISO-8859-1\", \"ISO88591\", \"ISO8859_1\"), t.ISO8859_2 = new t(O.ISO8859_2, 4, \"ISO-8859-2\", \"ISO88592\", \"ISO8859_2\"), t.ISO8859_3 = new t(O.ISO8859_3, 5, \"ISO-8859-3\", \"ISO88593\", \"ISO8859_3\"), t.ISO8859_4 = new t(O.ISO8859_4, 6, \"ISO-8859-4\", \"ISO88594\", \"ISO8859_4\"), t.ISO8859_5 = new t(O.ISO8859_5, 7, \"ISO-8859-5\", \"ISO88595\", \"ISO8859_5\"), t.ISO8859_6 = new t(O.ISO8859_6, 8, \"ISO-8859-6\", \"ISO88596\", \"ISO8859_6\"), t.ISO8859_7 = new t(O.ISO8859_7, 9, \"ISO-8859-7\", \"ISO88597\", \"ISO8859_7\"), t.ISO8859_8 = new t(O.ISO8859_8, 10, \"ISO-8859-8\", \"ISO88598\", \"ISO8859_8\"), t.ISO8859_9 = new t(O.ISO8859_9, 11, \"ISO-8859-9\", \"ISO88599\", \"ISO8859_9\"), t.ISO8859_10 = new t(O.ISO8859_10, 12, \"ISO-8859-10\", \"ISO885910\", \"ISO8859_10\"), t.ISO8859_11 = new t(O.ISO8859_11, 13, \"ISO-8859-11\", \"ISO885911\", \"ISO8859_11\"), t.ISO8859_13 = new t(O.ISO8859_13, 15, \"ISO-8859-13\", \"ISO885913\", \"ISO8859_13\"), t.ISO8859_14 = new t(O.ISO8859_14, 16, \"ISO-8859-14\", \"ISO885914\", \"ISO8859_14\"), t.ISO8859_15 = new t(O.ISO8859_15, 17, \"ISO-8859-15\", \"ISO885915\", \"ISO8859_15\"), t.ISO8859_16 = new t(O.ISO8859_16, 18, \"ISO-8859-16\", \"ISO885916\", \"ISO8859_16\"), t.SJIS = new t(O.SJIS, 20, \"SJIS\", \"Shift_JIS\"), t.Cp1250 = new t(O.Cp1250, 21, \"Cp1250\", \"windows-1250\"), t.Cp1251 = new t(O.Cp1251, 22, \"Cp1251\", \"windows-1251\"), t.Cp1252 = new t(O.Cp1252, 23, \"Cp1252\", \"windows-1252\"), t.Cp1256 = new t(O.Cp1256, 24, \"Cp1256\", \"windows-1256\"), t.UnicodeBigUnmarked = new t(O.UnicodeBigUnmarked, 25, \"UnicodeBigUnmarked\", \"UTF-16BE\", \"UnicodeBig\"), t.UTF8 = new t(O.UTF8, 26, \"UTF8\", \"UTF-8\"), t.ASCII = new t(O.ASCII, Int32Array.from([\n        27,\n        170\n    ]), \"ASCII\", \"US-ASCII\"), t.Big5 = new t(O.Big5, 28, \"Big5\"), t.GB18030 = new t(O.GB18030, 29, \"GB18030\", \"GB2312\", \"EUC_CN\", \"GBK\"), t.EUC_KR = new t(O.EUC_KR, 30, \"EUC_KR\", \"EUC-KR\"), t;\n}(), M = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), B = function(t) {\n    function e() {\n        return null !== t && t.apply(this, arguments) || this;\n    }\n    return M(e, t), e.kind = \"UnsupportedOperationException\", e;\n}(s), L = function() {\n    function t() {}\n    return t.decode = function(t, e) {\n        var r = this.encodingName(e);\n        return this.customDecoder ? this.customDecoder(t, r) : \"undefined\" == typeof TextDecoder || this.shouldDecodeOnFallback(r) ? this.decodeFallback(t, r) : new TextDecoder(r).decode(t);\n    }, t.shouldDecodeOnFallback = function(e) {\n        return !t.isBrowser() && \"ISO-8859-1\" === e;\n    }, t.encode = function(t, e) {\n        var r = this.encodingName(e);\n        return this.customEncoder ? this.customEncoder(t, r) : \"undefined\" == typeof TextEncoder ? this.encodeFallback(t) : (new TextEncoder).encode(t);\n    }, t.isBrowser = function() {\n        return  false && 0;\n    }, t.encodingName = function(t) {\n        return \"string\" == typeof t ? t : t.getName();\n    }, t.encodingCharacterSet = function(t) {\n        return t instanceof P ? t : P.getCharacterSetECIByName(t);\n    }, t.decodeFallback = function(e, r) {\n        var n = this.encodingCharacterSet(r);\n        if (t.isDecodeFallbackSupported(n)) {\n            for(var o = \"\", i = 0, a = e.length; i < a; i++){\n                var u = e[i].toString(16);\n                u.length < 2 && (u = \"0\" + u), o += \"%\" + u;\n            }\n            return decodeURIComponent(o);\n        }\n        if (n.equals(P.UnicodeBigUnmarked)) return String.fromCharCode.apply(null, new Uint16Array(e.buffer));\n        throw new B(\"Encoding \" + this.encodingName(r) + \" not supported by fallback.\");\n    }, t.isDecodeFallbackSupported = function(t) {\n        return t.equals(P.UTF8) || t.equals(P.ISO8859_1) || t.equals(P.ASCII);\n    }, t.encodeFallback = function(t) {\n        for(var e = btoa(unescape(encodeURIComponent(t))).split(\"\"), r = [], n = 0; n < e.length; n++)r.push(e[n].charCodeAt(0));\n        return new Uint8Array(r);\n    }, t;\n}(), F = function() {\n    function t() {}\n    return t.castAsNonUtf8Char = function(t, e) {\n        void 0 === e && (e = null);\n        var r = e ? e.getName() : this.ISO88591;\n        return L.decode(new Uint8Array([\n            t\n        ]), r);\n    }, t.guessEncoding = function(e, r) {\n        if (null != r && void 0 !== r.get(T.CHARACTER_SET)) return r.get(T.CHARACTER_SET).toString();\n        for(var n = e.length, o = !0, i = !0, a = !0, u = 0, s = 0, c = 0, f = 0, h = 0, l = 0, d = 0, p = 0, g = 0, y = 0, w = 0, _ = e.length > 3 && 239 === e[0] && 187 === e[1] && 191 === e[2], v = 0; v < n && (o || i || a); v++){\n            var m = 255 & e[v];\n            a && (u > 0 ? 0 == (128 & m) ? a = !1 : u-- : 0 != (128 & m) && (0 == (64 & m) ? a = !1 : (u++, 0 == (32 & m) ? s++ : (u++, 0 == (16 & m) ? c++ : (u++, 0 == (8 & m) ? f++ : a = !1))))), o && (m > 127 && m < 160 ? o = !1 : m > 159 && (m < 192 || 215 === m || 247 === m) && w++), i && (h > 0 ? m < 64 || 127 === m || m > 252 ? i = !1 : h-- : 128 === m || 160 === m || m > 239 ? i = !1 : m > 160 && m < 224 ? (l++, p = 0, ++d > g && (g = d)) : m > 127 ? (h++, d = 0, ++p > y && (y = p)) : (d = 0, p = 0));\n        }\n        return a && u > 0 && (a = !1), i && h > 0 && (i = !1), a && (_ || s + c + f > 0) ? t.UTF8 : i && (t.ASSUME_SHIFT_JIS || g >= 3 || y >= 3) ? t.SHIFT_JIS : o && i ? 2 === g && 2 === l || 10 * w >= n ? t.SHIFT_JIS : t.ISO88591 : o ? t.ISO88591 : i ? t.SHIFT_JIS : a ? t.UTF8 : t.PLATFORM_DEFAULT_ENCODING;\n    }, t.format = function(t) {\n        for(var e = [], r = 1; r < arguments.length; r++)e[r - 1] = arguments[r];\n        var n = -1;\n        function o(t, r, o, i, a, u) {\n            if (\"%%\" === t) return \"%\";\n            if (void 0 !== e[++n]) {\n                t = i ? parseInt(i.substr(1)) : void 0;\n                var s, c = a ? parseInt(a.substr(1)) : void 0;\n                switch(u){\n                    case \"s\":\n                        s = e[n];\n                        break;\n                    case \"c\":\n                        s = e[n][0];\n                        break;\n                    case \"f\":\n                        s = parseFloat(e[n]).toFixed(t);\n                        break;\n                    case \"p\":\n                        s = parseFloat(e[n]).toPrecision(t);\n                        break;\n                    case \"e\":\n                        s = parseFloat(e[n]).toExponential(t);\n                        break;\n                    case \"x\":\n                        s = parseInt(e[n]).toString(c || 16);\n                        break;\n                    case \"d\":\n                        s = parseFloat(parseInt(e[n], c || 10).toPrecision(t)).toFixed(0);\n                }\n                s = \"object\" == typeof s ? JSON.stringify(s) : (+s).toString(c);\n                for(var f = parseInt(o), h = o && o[0] + \"\" == \"0\" ? \"0\" : \" \"; s.length < f;)s = void 0 !== r ? s + h : h + s;\n                return s;\n            }\n        }\n        var i = /%(-)?(0?[0-9]+)?([.][0-9]+)?([#][0-9]+)?([scfpexd%])/g;\n        return t.replace(i, o);\n    }, t.getBytes = function(t, e) {\n        return L.encode(t, e);\n    }, t.getCharCode = function(t, e) {\n        return void 0 === e && (e = 0), t.charCodeAt(e);\n    }, t.getCharAt = function(t) {\n        return String.fromCharCode(t);\n    }, t.SHIFT_JIS = P.SJIS.getName(), t.GB2312 = \"GB2312\", t.ISO88591 = P.ISO8859_1.getName(), t.EUC_JP = \"EUC_JP\", t.UTF8 = P.UTF8.getName(), t.PLATFORM_DEFAULT_ENCODING = t.UTF8, t.ASSUME_SHIFT_JIS = !1, t;\n}(), k = function() {\n    function t(t) {\n        void 0 === t && (t = \"\"), this.value = t;\n    }\n    return t.prototype.enableDecoding = function(t) {\n        return this.encoding = t, this;\n    }, t.prototype.append = function(t) {\n        return \"string\" == typeof t ? this.value += t.toString() : this.encoding ? this.value += F.castAsNonUtf8Char(t, this.encoding) : this.value += String.fromCharCode(t), this;\n    }, t.prototype.appendChars = function(t, e, r) {\n        for(var n = e; e < e + r; n++)this.append(t[n]);\n        return this;\n    }, t.prototype.length = function() {\n        return this.value.length;\n    }, t.prototype.charAt = function(t) {\n        return this.value.charAt(t);\n    }, t.prototype.deleteCharAt = function(t) {\n        this.value = this.value.substr(0, t) + this.value.substring(t + 1);\n    }, t.prototype.setCharAt = function(t, e) {\n        this.value = this.value.substr(0, t) + e + this.value.substr(t + 1);\n    }, t.prototype.substring = function(t, e) {\n        return this.value.substring(t, e);\n    }, t.prototype.setLengthToZero = function() {\n        this.value = \"\";\n    }, t.prototype.toString = function() {\n        return this.value;\n    }, t.prototype.insert = function(t, e) {\n        this.value = this.value.substr(0, t) + e + this.value.substr(t + e.length);\n    }, t;\n}(), x = function() {\n    function t(t, e, r, n) {\n        if (this.width = t, this.height = e, this.rowSize = r, this.bits = n, null == e && (e = t), this.height = e, t < 1 || e < 1) throw new l(\"Both dimensions must be greater than 0\");\n        null == r && (r = Math.floor((t + 31) / 32)), this.rowSize = r, null == n && (this.bits = new Int32Array(this.rowSize * this.height));\n    }\n    return t.parseFromBooleanArray = function(e) {\n        for(var r = e.length, n = e[0].length, o = new t(n, r), i = 0; i < r; i++)for(var a = e[i], u = 0; u < n; u++)a[u] && o.set(u, i);\n        return o;\n    }, t.parseFromString = function(e, r, n) {\n        if (null === e) throw new l(\"stringRepresentation cannot be null\");\n        for(var o = new Array(e.length), i = 0, a = 0, u = -1, s = 0, c = 0; c < e.length;)if (\"\\n\" === e.charAt(c) || \"\\r\" === e.charAt(c)) {\n            if (i > a) {\n                if (-1 === u) u = i - a;\n                else if (i - a !== u) throw new l(\"row lengths do not match\");\n                a = i, s++;\n            }\n            c++;\n        } else if (e.substring(c, c + r.length) === r) c += r.length, o[i] = !0, i++;\n        else {\n            if (e.substring(c, c + n.length) !== n) throw new l(\"illegal character encountered: \" + e.substring(c));\n            c += n.length, o[i] = !1, i++;\n        }\n        if (i > a) {\n            if (-1 === u) u = i - a;\n            else if (i - a !== u) throw new l(\"row lengths do not match\");\n            s++;\n        }\n        for(var f = new t(u, s), h = 0; h < i; h++)o[h] && f.set(Math.floor(h % u), Math.floor(h / u));\n        return f;\n    }, t.prototype.get = function(t, e) {\n        var r = e * this.rowSize + Math.floor(t / 32);\n        return 0 != (this.bits[r] >>> (31 & t) & 1);\n    }, t.prototype.set = function(t, e) {\n        var r = e * this.rowSize + Math.floor(t / 32);\n        this.bits[r] |= 1 << (31 & t) & 4294967295;\n    }, t.prototype.unset = function(t, e) {\n        var r = e * this.rowSize + Math.floor(t / 32);\n        this.bits[r] &= ~(1 << (31 & t) & 4294967295);\n    }, t.prototype.flip = function(t, e) {\n        var r = e * this.rowSize + Math.floor(t / 32);\n        this.bits[r] ^= 1 << (31 & t) & 4294967295;\n    }, t.prototype.xor = function(t) {\n        if (this.width !== t.getWidth() || this.height !== t.getHeight() || this.rowSize !== t.getRowSize()) throw new l(\"input matrix dimensions do not match\");\n        for(var e = new S(Math.floor(this.width / 32) + 1), r = this.rowSize, n = this.bits, o = 0, i = this.height; o < i; o++)for(var a = o * r, u = t.getRow(o, e).getBitArray(), s = 0; s < r; s++)n[a + s] ^= u[s];\n    }, t.prototype.clear = function() {\n        for(var t = this.bits, e = t.length, r = 0; r < e; r++)t[r] = 0;\n    }, t.prototype.setRegion = function(t, e, r, n) {\n        if (e < 0 || t < 0) throw new l(\"Left and top must be nonnegative\");\n        if (n < 1 || r < 1) throw new l(\"Height and width must be at least 1\");\n        var o = t + r, i = e + n;\n        if (i > this.height || o > this.width) throw new l(\"The region must fit inside the matrix\");\n        for(var a = this.rowSize, u = this.bits, s = e; s < i; s++)for(var c = s * a, f = t; f < o; f++)u[c + Math.floor(f / 32)] |= 1 << (31 & f) & 4294967295;\n    }, t.prototype.getRow = function(t, e) {\n        null == e || e.getSize() < this.width ? e = new S(this.width) : e.clear();\n        for(var r = this.rowSize, n = this.bits, o = t * r, i = 0; i < r; i++)e.setBulk(32 * i, n[o + i]);\n        return e;\n    }, t.prototype.setRow = function(t, e) {\n        w.arraycopy(e.getBitArray(), 0, this.bits, t * this.rowSize, this.rowSize);\n    }, t.prototype.rotate180 = function() {\n        for(var t = this.getWidth(), e = this.getHeight(), r = new S(t), n = new S(t), o = 0, i = Math.floor((e + 1) / 2); o < i; o++)r = this.getRow(o, r), n = this.getRow(e - 1 - o, n), r.reverse(), n.reverse(), this.setRow(o, n), this.setRow(e - 1 - o, r);\n    }, t.prototype.getEnclosingRectangle = function() {\n        for(var t = this.width, e = this.height, r = this.rowSize, n = this.bits, o = t, i = e, a = -1, u = -1, s = 0; s < e; s++)for(var c = 0; c < r; c++){\n            var f = n[s * r + c];\n            if (0 !== f) {\n                if (s < i && (i = s), s > u && (u = s), 32 * c < o) {\n                    for(var h = 0; 0 == (f << 31 - h & 4294967295);)h++;\n                    32 * c + h < o && (o = 32 * c + h);\n                }\n                if (32 * c + 31 > a) {\n                    for(h = 31; f >>> h == 0;)h--;\n                    32 * c + h > a && (a = 32 * c + h);\n                }\n            }\n        }\n        return a < o || u < i ? null : Int32Array.from([\n            o,\n            i,\n            a - o + 1,\n            u - i + 1\n        ]);\n    }, t.prototype.getTopLeftOnBit = function() {\n        for(var t = this.rowSize, e = this.bits, r = 0; r < e.length && 0 === e[r];)r++;\n        if (r === e.length) return null;\n        for(var n = r / t, o = r % t * 32, i = e[r], a = 0; 0 == (i << 31 - a & 4294967295);)a++;\n        return o += a, Int32Array.from([\n            o,\n            n\n        ]);\n    }, t.prototype.getBottomRightOnBit = function() {\n        for(var t = this.rowSize, e = this.bits, r = e.length - 1; r >= 0 && 0 === e[r];)r--;\n        if (r < 0) return null;\n        for(var n = Math.floor(r / t), o = 32 * Math.floor(r % t), i = e[r], a = 31; i >>> a == 0;)a--;\n        return o += a, Int32Array.from([\n            o,\n            n\n        ]);\n    }, t.prototype.getWidth = function() {\n        return this.width;\n    }, t.prototype.getHeight = function() {\n        return this.height;\n    }, t.prototype.getRowSize = function() {\n        return this.rowSize;\n    }, t.prototype.equals = function(e) {\n        if (!(e instanceof t)) return !1;\n        var r = e;\n        return this.width === r.width && this.height === r.height && this.rowSize === r.rowSize && C.equals(this.bits, r.bits);\n    }, t.prototype.hashCode = function() {\n        var t = this.width;\n        return t = 31 * (t = 31 * (t = 31 * (t = 31 * t + this.width) + this.height) + this.rowSize) + C.hashCode(this.bits);\n    }, t.prototype.toString = function(t, e, r) {\n        return void 0 === t && (t = \"X \"), void 0 === e && (e = \"  \"), void 0 === r && (r = \"\\n\"), this.buildToString(t, e, r);\n    }, t.prototype.buildToString = function(t, e, r) {\n        for(var n = new k, o = 0, i = this.height; o < i; o++){\n            for(var a = 0, u = this.width; a < u; a++)n.append(this.get(a, o) ? t : e);\n            n.append(r);\n        }\n        return n.toString();\n    }, t.prototype.clone = function() {\n        return new t(this.width, this.height, this.rowSize, this.bits.slice());\n    }, t;\n}(), V = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), U = function(t) {\n    function e() {\n        return null !== t && t.apply(this, arguments) || this;\n    }\n    return V(e, t), e.getNotFoundInstance = function() {\n        return new e;\n    }, e.kind = \"NotFoundException\", e;\n}(s), H = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), G = function(t) {\n    function e(r) {\n        var n = t.call(this, r) || this;\n        return n.luminances = e.EMPTY, n.buckets = new Int32Array(e.LUMINANCE_BUCKETS), n;\n    }\n    return H(e, t), e.prototype.getBlackRow = function(t, r) {\n        var n = this.getLuminanceSource(), o = n.getWidth();\n        null == r || r.getSize() < o ? r = new S(o) : r.clear(), this.initArrays(o);\n        for(var i = n.getRow(t, this.luminances), a = this.buckets, u = 0; u < o; u++)a[(255 & i[u]) >> e.LUMINANCE_SHIFT]++;\n        var s = e.estimateBlackPoint(a);\n        if (o < 3) for(u = 0; u < o; u++)(255 & i[u]) < s && r.set(u);\n        else {\n            var c = 255 & i[0], f = 255 & i[1];\n            for(u = 1; u < o - 1; u++){\n                var h = 255 & i[u + 1];\n                (4 * f - c - h) / 2 < s && r.set(u), c = f, f = h;\n            }\n        }\n        return r;\n    }, e.prototype.getBlackMatrix = function() {\n        var t = this.getLuminanceSource(), r = t.getWidth(), n = t.getHeight(), o = new x(r, n);\n        this.initArrays(r);\n        for(var i = this.buckets, a = 1; a < 5; a++)for(var u = Math.floor(n * a / 5), s = t.getRow(u, this.luminances), c = Math.floor(4 * r / 5), f = Math.floor(r / 5); f < c; f++){\n            i[(255 & s[f]) >> e.LUMINANCE_SHIFT]++;\n        }\n        var h = e.estimateBlackPoint(i), l = t.getMatrix();\n        for(a = 0; a < n; a++){\n            var d = a * r;\n            for(f = 0; f < r; f++){\n                (255 & l[d + f]) < h && o.set(f, a);\n            }\n        }\n        return o;\n    }, e.prototype.createBinarizer = function(t) {\n        return new e(t);\n    }, e.prototype.initArrays = function(t) {\n        this.luminances.length < t && (this.luminances = new Uint8ClampedArray(t));\n        for(var r = this.buckets, n = 0; n < e.LUMINANCE_BUCKETS; n++)r[n] = 0;\n    }, e.estimateBlackPoint = function(t) {\n        for(var r = t.length, n = 0, o = 0, i = 0, a = 0; a < r; a++)t[a] > i && (o = a, i = t[a]), t[a] > n && (n = t[a]);\n        var u = 0, s = 0;\n        for(a = 0; a < r; a++){\n            var c = a - o;\n            (d = t[a] * c * c) > s && (u = a, s = d);\n        }\n        if (o > u) {\n            var f = o;\n            o = u, u = f;\n        }\n        if (u - o <= r / 16) throw new U;\n        var h = u - 1, l = -1;\n        for(a = u - 1; a > o; a--){\n            var d, p = a - o;\n            (d = p * p * (u - a) * (n - t[a])) > l && (h = a, l = d);\n        }\n        return h << e.LUMINANCE_SHIFT;\n    }, e.LUMINANCE_BITS = 5, e.LUMINANCE_SHIFT = 8 - e.LUMINANCE_BITS, e.LUMINANCE_BUCKETS = 1 << e.LUMINANCE_BITS, e.EMPTY = Uint8ClampedArray.from([\n        0\n    ]), e;\n}(y), X = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), W = function(t) {\n    function e(e) {\n        var r = t.call(this, e) || this;\n        return r.matrix = null, r;\n    }\n    return X(e, t), e.prototype.getBlackMatrix = function() {\n        if (null !== this.matrix) return this.matrix;\n        var r = this.getLuminanceSource(), n = r.getWidth(), o = r.getHeight();\n        if (n >= e.MINIMUM_DIMENSION && o >= e.MINIMUM_DIMENSION) {\n            var i = r.getMatrix(), a = n >> e.BLOCK_SIZE_POWER;\n            0 != (n & e.BLOCK_SIZE_MASK) && a++;\n            var u = o >> e.BLOCK_SIZE_POWER;\n            0 != (o & e.BLOCK_SIZE_MASK) && u++;\n            var s = e.calculateBlackPoints(i, a, u, n, o), c = new x(n, o);\n            e.calculateThresholdForBlock(i, a, u, n, o, s, c), this.matrix = c;\n        } else this.matrix = t.prototype.getBlackMatrix.call(this);\n        return this.matrix;\n    }, e.prototype.createBinarizer = function(t) {\n        return new e(t);\n    }, e.calculateThresholdForBlock = function(t, r, n, o, i, a, u) {\n        for(var s = i - e.BLOCK_SIZE, c = o - e.BLOCK_SIZE, f = 0; f < n; f++){\n            var h = f << e.BLOCK_SIZE_POWER;\n            h > s && (h = s);\n            for(var l = e.cap(f, 2, n - 3), d = 0; d < r; d++){\n                var p = d << e.BLOCK_SIZE_POWER;\n                p > c && (p = c);\n                for(var g = e.cap(d, 2, r - 3), y = 0, w = -2; w <= 2; w++){\n                    var _ = a[l + w];\n                    y += _[g - 2] + _[g - 1] + _[g] + _[g + 1] + _[g + 2];\n                }\n                var v = y / 25;\n                e.thresholdBlock(t, p, h, v, o, u);\n            }\n        }\n    }, e.cap = function(t, e, r) {\n        return t < e ? e : t > r ? r : t;\n    }, e.thresholdBlock = function(t, r, n, o, i, a) {\n        for(var u = 0, s = n * i + r; u < e.BLOCK_SIZE; u++, s += i)for(var c = 0; c < e.BLOCK_SIZE; c++)(255 & t[s + c]) <= o && a.set(r + c, n + u);\n    }, e.calculateBlackPoints = function(t, r, n, o, i) {\n        for(var a = i - e.BLOCK_SIZE, u = o - e.BLOCK_SIZE, s = new Array(n), c = 0; c < n; c++){\n            s[c] = new Int32Array(r);\n            var f = c << e.BLOCK_SIZE_POWER;\n            f > a && (f = a);\n            for(var h = 0; h < r; h++){\n                var l = h << e.BLOCK_SIZE_POWER;\n                l > u && (l = u);\n                for(var d = 0, p = 255, g = 0, y = 0, w = f * o + l; y < e.BLOCK_SIZE; y++, w += o){\n                    for(var _ = 0; _ < e.BLOCK_SIZE; _++){\n                        var v = 255 & t[w + _];\n                        d += v, v < p && (p = v), v > g && (g = v);\n                    }\n                    if (g - p > e.MIN_DYNAMIC_RANGE) for(y++, w += o; y < e.BLOCK_SIZE; y++, w += o)for(_ = 0; _ < e.BLOCK_SIZE; _++)d += 255 & t[w + _];\n                }\n                var m = d >> 2 * e.BLOCK_SIZE_POWER;\n                if (g - p <= e.MIN_DYNAMIC_RANGE && (m = p / 2, c > 0 && h > 0)) {\n                    var A = (s[c - 1][h] + 2 * s[c][h - 1] + s[c - 1][h - 1]) / 4;\n                    p < A && (m = A);\n                }\n                s[c][h] = m;\n            }\n        }\n        return s;\n    }, e.BLOCK_SIZE_POWER = 3, e.BLOCK_SIZE = 1 << e.BLOCK_SIZE_POWER, e.BLOCK_SIZE_MASK = e.BLOCK_SIZE - 1, e.MINIMUM_DIMENSION = 5 * e.BLOCK_SIZE, e.MIN_DYNAMIC_RANGE = 24, e;\n}(G), j = function() {\n    function t(t, e) {\n        this.width = t, this.height = e;\n    }\n    return t.prototype.getWidth = function() {\n        return this.width;\n    }, t.prototype.getHeight = function() {\n        return this.height;\n    }, t.prototype.isCropSupported = function() {\n        return !1;\n    }, t.prototype.crop = function(t, e, r, n) {\n        throw new B(\"This luminance source does not support cropping.\");\n    }, t.prototype.isRotateSupported = function() {\n        return !1;\n    }, t.prototype.rotateCounterClockwise = function() {\n        throw new B(\"This luminance source does not support rotation by 90 degrees.\");\n    }, t.prototype.rotateCounterClockwise45 = function() {\n        throw new B(\"This luminance source does not support rotation by 45 degrees.\");\n    }, t.prototype.toString = function() {\n        for(var t = new Uint8ClampedArray(this.width), e = new k, r = 0; r < this.height; r++){\n            for(var n = this.getRow(r, t), o = 0; o < this.width; o++){\n                var i = 255 & n[o], a = void 0;\n                a = i < 64 ? \"#\" : i < 128 ? \"+\" : i < 192 ? \".\" : \" \", e.append(a);\n            }\n            e.append(\"\\n\");\n        }\n        return e.toString();\n    }, t;\n}(), z = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), Y = function(t) {\n    function e(e) {\n        var r = t.call(this, e.getWidth(), e.getHeight()) || this;\n        return r.delegate = e, r;\n    }\n    return z(e, t), e.prototype.getRow = function(t, e) {\n        for(var r = this.delegate.getRow(t, e), n = this.getWidth(), o = 0; o < n; o++)r[o] = 255 - (255 & r[o]);\n        return r;\n    }, e.prototype.getMatrix = function() {\n        for(var t = this.delegate.getMatrix(), e = this.getWidth() * this.getHeight(), r = new Uint8ClampedArray(e), n = 0; n < e; n++)r[n] = 255 - (255 & t[n]);\n        return r;\n    }, e.prototype.isCropSupported = function() {\n        return this.delegate.isCropSupported();\n    }, e.prototype.crop = function(t, r, n, o) {\n        return new e(this.delegate.crop(t, r, n, o));\n    }, e.prototype.isRotateSupported = function() {\n        return this.delegate.isRotateSupported();\n    }, e.prototype.invert = function() {\n        return this.delegate;\n    }, e.prototype.rotateCounterClockwise = function() {\n        return new e(this.delegate.rotateCounterClockwise());\n    }, e.prototype.rotateCounterClockwise45 = function() {\n        return new e(this.delegate.rotateCounterClockwise45());\n    }, e;\n}(j), Z = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), K = function(t) {\n    function e(r) {\n        var n = t.call(this, r.width, r.height) || this;\n        return n.canvas = r, n.tempCanvasElement = null, n.buffer = e.makeBufferFromCanvasImageData(r), n;\n    }\n    return Z(e, t), e.makeBufferFromCanvasImageData = function(t) {\n        var r = t.getContext(\"2d\").getImageData(0, 0, t.width, t.height);\n        return e.toGrayscaleBuffer(r.data, t.width, t.height);\n    }, e.toGrayscaleBuffer = function(t, e, r) {\n        for(var n = new Uint8ClampedArray(e * r), o = 0, i = 0, a = t.length; o < a; o += 4, i++){\n            var u = void 0;\n            if (0 === t[o + 3]) u = 255;\n            else u = 306 * t[o] + 601 * t[o + 1] + 117 * t[o + 2] + 512 >> 10;\n            n[i] = u;\n        }\n        return n;\n    }, e.prototype.getRow = function(t, e) {\n        if (t < 0 || t >= this.getHeight()) throw new l(\"Requested row is outside the image: \" + t);\n        var r = this.getWidth(), n = t * r;\n        return null === e ? e = this.buffer.slice(n, n + r) : (e.length < r && (e = new Uint8ClampedArray(r)), e.set(this.buffer.slice(n, n + r))), e;\n    }, e.prototype.getMatrix = function() {\n        return this.buffer;\n    }, e.prototype.isCropSupported = function() {\n        return !0;\n    }, e.prototype.crop = function(e, r, n, o) {\n        return t.prototype.crop.call(this, e, r, n, o), this;\n    }, e.prototype.isRotateSupported = function() {\n        return !0;\n    }, e.prototype.rotateCounterClockwise = function() {\n        return this.rotate(-90), this;\n    }, e.prototype.rotateCounterClockwise45 = function() {\n        return this.rotate(-45), this;\n    }, e.prototype.getTempCanvasElement = function() {\n        if (null === this.tempCanvasElement) {\n            var t = this.canvas.ownerDocument.createElement(\"canvas\");\n            t.width = this.canvas.width, t.height = this.canvas.height, this.tempCanvasElement = t;\n        }\n        return this.tempCanvasElement;\n    }, e.prototype.rotate = function(t) {\n        var r = this.getTempCanvasElement(), n = r.getContext(\"2d\"), o = t * e.DEGREE_TO_RADIANS, i = this.canvas.width, a = this.canvas.height, u = Math.ceil(Math.abs(Math.cos(o)) * i + Math.abs(Math.sin(o)) * a), s = Math.ceil(Math.abs(Math.sin(o)) * i + Math.abs(Math.cos(o)) * a);\n        return r.width = u, r.height = s, n.translate(u / 2, s / 2), n.rotate(o), n.drawImage(this.canvas, i / -2, a / -2), this.buffer = e.makeBufferFromCanvasImageData(r), this;\n    }, e.prototype.invert = function() {\n        return new Y(this);\n    }, e.DEGREE_TO_RADIANS = Math.PI / 180, e;\n}(j), q = function() {\n    function t(t, e, r) {\n        this.deviceId = t, this.label = e, this.kind = \"videoinput\", this.groupId = r || void 0;\n    }\n    return t.prototype.toJSON = function() {\n        return {\n            kind: this.kind,\n            groupId: this.groupId,\n            deviceId: this.deviceId,\n            label: this.label\n        };\n    }, t;\n}(), Q = function(t, e, r, n) {\n    return new (r || (r = Promise))(function(o, i) {\n        function a(t) {\n            try {\n                s(n.next(t));\n            } catch (t) {\n                i(t);\n            }\n        }\n        function u(t) {\n            try {\n                s(n.throw(t));\n            } catch (t) {\n                i(t);\n            }\n        }\n        function s(t) {\n            var e;\n            t.done ? o(t.value) : (e = t.value, e instanceof r ? e : new r(function(t) {\n                t(e);\n            })).then(a, u);\n        }\n        s((n = n.apply(t, e || [])).next());\n    });\n}, J = function(t, e) {\n    var r, n, o, i, a = {\n        label: 0,\n        sent: function() {\n            if (1 & o[0]) throw o[1];\n            return o[1];\n        },\n        trys: [],\n        ops: []\n    };\n    return i = {\n        next: u(0),\n        throw: u(1),\n        return: u(2)\n    }, \"function\" == typeof Symbol && (i[Symbol.iterator] = function() {\n        return this;\n    }), i;\n    function u(i) {\n        return function(u) {\n            return function(i) {\n                if (r) throw new TypeError(\"Generator is already executing.\");\n                for(; a;)try {\n                    if (r = 1, n && (o = 2 & i[0] ? n.return : i[0] ? n.throw || ((o = n.return) && o.call(n), 0) : n.next) && !(o = o.call(n, i[1])).done) return o;\n                    switch(n = 0, o && (i = [\n                        2 & i[0],\n                        o.value\n                    ]), i[0]){\n                        case 0:\n                        case 1:\n                            o = i;\n                            break;\n                        case 4:\n                            return a.label++, {\n                                value: i[1],\n                                done: !1\n                            };\n                        case 5:\n                            a.label++, n = i[1], i = [\n                                0\n                            ];\n                            continue;\n                        case 7:\n                            i = a.ops.pop(), a.trys.pop();\n                            continue;\n                        default:\n                            if (!(o = a.trys, (o = o.length > 0 && o[o.length - 1]) || 6 !== i[0] && 2 !== i[0])) {\n                                a = 0;\n                                continue;\n                            }\n                            if (3 === i[0] && (!o || i[1] > o[0] && i[1] < o[3])) {\n                                a.label = i[1];\n                                break;\n                            }\n                            if (6 === i[0] && a.label < o[1]) {\n                                a.label = o[1], o = i;\n                                break;\n                            }\n                            if (o && a.label < o[2]) {\n                                a.label = o[2], a.ops.push(i);\n                                break;\n                            }\n                            o[2] && a.ops.pop(), a.trys.pop();\n                            continue;\n                    }\n                    i = e.call(t, a);\n                } catch (t) {\n                    i = [\n                        6,\n                        t\n                    ], n = 0;\n                } finally{\n                    r = o = 0;\n                }\n                if (5 & i[0]) throw i[1];\n                return {\n                    value: i[0] ? i[1] : void 0,\n                    done: !0\n                };\n            }([\n                i,\n                u\n            ]);\n        };\n    }\n}, $ = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, tt = function() {\n    function t(t, e, r) {\n        void 0 === e && (e = 500), this.reader = t, this.timeBetweenScansMillis = e, this._hints = r, this._stopContinuousDecode = !1, this._stopAsyncDecode = !1, this._timeBetweenDecodingAttempts = 0;\n    }\n    return Object.defineProperty(t.prototype, \"hasNavigator\", {\n        get: function() {\n            return \"undefined\" != typeof navigator;\n        },\n        enumerable: !1,\n        configurable: !0\n    }), Object.defineProperty(t.prototype, \"isMediaDevicesSuported\", {\n        get: function() {\n            return this.hasNavigator && !!navigator.mediaDevices;\n        },\n        enumerable: !1,\n        configurable: !0\n    }), Object.defineProperty(t.prototype, \"canEnumerateDevices\", {\n        get: function() {\n            return !(!this.isMediaDevicesSuported || !navigator.mediaDevices.enumerateDevices);\n        },\n        enumerable: !1,\n        configurable: !0\n    }), Object.defineProperty(t.prototype, \"timeBetweenDecodingAttempts\", {\n        get: function() {\n            return this._timeBetweenDecodingAttempts;\n        },\n        set: function(t) {\n            this._timeBetweenDecodingAttempts = t < 0 ? 0 : t;\n        },\n        enumerable: !1,\n        configurable: !0\n    }), Object.defineProperty(t.prototype, \"hints\", {\n        get: function() {\n            return this._hints;\n        },\n        set: function(t) {\n            this._hints = t || null;\n        },\n        enumerable: !1,\n        configurable: !0\n    }), t.prototype.listVideoInputDevices = function() {\n        return Q(this, void 0, void 0, function() {\n            var t, e, r, n, o, i, a, u, s, c, f, h;\n            return J(this, function(l) {\n                switch(l.label){\n                    case 0:\n                        if (!this.hasNavigator) throw new Error(\"Can't enumerate devices, navigator is not present.\");\n                        if (!this.canEnumerateDevices) throw new Error(\"Can't enumerate devices, method not supported.\");\n                        return [\n                            4,\n                            navigator.mediaDevices.enumerateDevices()\n                        ];\n                    case 1:\n                        t = l.sent(), e = [];\n                        try {\n                            for(r = $(t), n = r.next(); !n.done; n = r.next())o = n.value, \"videoinput\" === (i = \"video\" === o.kind ? \"videoinput\" : o.kind) && (a = o.deviceId || o.id, u = o.label || \"Video device \" + (e.length + 1), s = o.groupId, c = {\n                                deviceId: a,\n                                label: u,\n                                kind: i,\n                                groupId: s\n                            }, e.push(c));\n                        } catch (t) {\n                            f = {\n                                error: t\n                            };\n                        } finally{\n                            try {\n                                n && !n.done && (h = r.return) && h.call(r);\n                            } finally{\n                                if (f) throw f.error;\n                            }\n                        }\n                        return [\n                            2,\n                            e\n                        ];\n                }\n            });\n        });\n    }, t.prototype.getVideoInputDevices = function() {\n        return Q(this, void 0, void 0, function() {\n            return J(this, function(t) {\n                switch(t.label){\n                    case 0:\n                        return [\n                            4,\n                            this.listVideoInputDevices()\n                        ];\n                    case 1:\n                        return [\n                            2,\n                            t.sent().map(function(t) {\n                                return new q(t.deviceId, t.label);\n                            })\n                        ];\n                }\n            });\n        });\n    }, t.prototype.findDeviceById = function(t) {\n        return Q(this, void 0, void 0, function() {\n            var e;\n            return J(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        return [\n                            4,\n                            this.listVideoInputDevices()\n                        ];\n                    case 1:\n                        return (e = r.sent()) ? [\n                            2,\n                            e.find(function(e) {\n                                return e.deviceId === t;\n                            })\n                        ] : [\n                            2,\n                            null\n                        ];\n                }\n            });\n        });\n    }, t.prototype.decodeFromInputVideoDevice = function(t, e) {\n        return Q(this, void 0, void 0, function() {\n            return J(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        return [\n                            4,\n                            this.decodeOnceFromVideoDevice(t, e)\n                        ];\n                    case 1:\n                        return [\n                            2,\n                            r.sent()\n                        ];\n                }\n            });\n        });\n    }, t.prototype.decodeOnceFromVideoDevice = function(t, e) {\n        return Q(this, void 0, void 0, function() {\n            var r;\n            return J(this, function(n) {\n                switch(n.label){\n                    case 0:\n                        return this.reset(), r = {\n                            video: t ? {\n                                deviceId: {\n                                    exact: t\n                                }\n                            } : {\n                                facingMode: \"environment\"\n                            }\n                        }, [\n                            4,\n                            this.decodeOnceFromConstraints(r, e)\n                        ];\n                    case 1:\n                        return [\n                            2,\n                            n.sent()\n                        ];\n                }\n            });\n        });\n    }, t.prototype.decodeOnceFromConstraints = function(t, e) {\n        return Q(this, void 0, void 0, function() {\n            var r;\n            return J(this, function(n) {\n                switch(n.label){\n                    case 0:\n                        return [\n                            4,\n                            navigator.mediaDevices.getUserMedia(t)\n                        ];\n                    case 1:\n                        return r = n.sent(), [\n                            4,\n                            this.decodeOnceFromStream(r, e)\n                        ];\n                    case 2:\n                        return [\n                            2,\n                            n.sent()\n                        ];\n                }\n            });\n        });\n    }, t.prototype.decodeOnceFromStream = function(t, e) {\n        return Q(this, void 0, void 0, function() {\n            var r;\n            return J(this, function(n) {\n                switch(n.label){\n                    case 0:\n                        return this.reset(), [\n                            4,\n                            this.attachStreamToVideo(t, e)\n                        ];\n                    case 1:\n                        return r = n.sent(), [\n                            4,\n                            this.decodeOnce(r)\n                        ];\n                    case 2:\n                        return [\n                            2,\n                            n.sent()\n                        ];\n                }\n            });\n        });\n    }, t.prototype.decodeFromInputVideoDeviceContinuously = function(t, e, r) {\n        return Q(this, void 0, void 0, function() {\n            return J(this, function(n) {\n                switch(n.label){\n                    case 0:\n                        return [\n                            4,\n                            this.decodeFromVideoDevice(t, e, r)\n                        ];\n                    case 1:\n                        return [\n                            2,\n                            n.sent()\n                        ];\n                }\n            });\n        });\n    }, t.prototype.decodeFromVideoDevice = function(t, e, r) {\n        return Q(this, void 0, void 0, function() {\n            var n;\n            return J(this, function(o) {\n                switch(o.label){\n                    case 0:\n                        return n = {\n                            video: t ? {\n                                deviceId: {\n                                    exact: t\n                                }\n                            } : {\n                                facingMode: \"environment\"\n                            }\n                        }, [\n                            4,\n                            this.decodeFromConstraints(n, e, r)\n                        ];\n                    case 1:\n                        return [\n                            2,\n                            o.sent()\n                        ];\n                }\n            });\n        });\n    }, t.prototype.decodeFromConstraints = function(t, e, r) {\n        return Q(this, void 0, void 0, function() {\n            var n;\n            return J(this, function(o) {\n                switch(o.label){\n                    case 0:\n                        return [\n                            4,\n                            navigator.mediaDevices.getUserMedia(t)\n                        ];\n                    case 1:\n                        return n = o.sent(), [\n                            4,\n                            this.decodeFromStream(n, e, r)\n                        ];\n                    case 2:\n                        return [\n                            2,\n                            o.sent()\n                        ];\n                }\n            });\n        });\n    }, t.prototype.decodeFromStream = function(t, e, r) {\n        return Q(this, void 0, void 0, function() {\n            var n;\n            return J(this, function(o) {\n                switch(o.label){\n                    case 0:\n                        return this.reset(), [\n                            4,\n                            this.attachStreamToVideo(t, e)\n                        ];\n                    case 1:\n                        return n = o.sent(), [\n                            4,\n                            this.decodeContinuously(n, r)\n                        ];\n                    case 2:\n                        return [\n                            2,\n                            o.sent()\n                        ];\n                }\n            });\n        });\n    }, t.prototype.stopAsyncDecode = function() {\n        this._stopAsyncDecode = !0;\n    }, t.prototype.stopContinuousDecode = function() {\n        this._stopContinuousDecode = !0;\n    }, t.prototype.attachStreamToVideo = function(t, e) {\n        return Q(this, void 0, void 0, function() {\n            var r;\n            return J(this, function(n) {\n                switch(n.label){\n                    case 0:\n                        return r = this.prepareVideoElement(e), this.addVideoSource(r, t), this.videoElement = r, this.stream = t, [\n                            4,\n                            this.playVideoOnLoadAsync(r)\n                        ];\n                    case 1:\n                        return n.sent(), [\n                            2,\n                            r\n                        ];\n                }\n            });\n        });\n    }, t.prototype.playVideoOnLoadAsync = function(t) {\n        var e = this;\n        return new Promise(function(r, n) {\n            return e.playVideoOnLoad(t, function() {\n                return r();\n            });\n        });\n    }, t.prototype.playVideoOnLoad = function(t, e) {\n        var r = this;\n        this.videoEndedListener = function() {\n            return r.stopStreams();\n        }, this.videoCanPlayListener = function() {\n            return r.tryPlayVideo(t);\n        }, t.addEventListener(\"ended\", this.videoEndedListener), t.addEventListener(\"canplay\", this.videoCanPlayListener), t.addEventListener(\"playing\", e), this.tryPlayVideo(t);\n    }, t.prototype.isVideoPlaying = function(t) {\n        return t.currentTime > 0 && !t.paused && !t.ended && t.readyState > 2;\n    }, t.prototype.tryPlayVideo = function(t) {\n        return Q(this, void 0, void 0, function() {\n            return J(this, function(e) {\n                switch(e.label){\n                    case 0:\n                        if (this.isVideoPlaying(t)) return console.warn(\"Trying to play video that is already playing.\"), [\n                            2\n                        ];\n                        e.label = 1;\n                    case 1:\n                        return e.trys.push([\n                            1,\n                            3,\n                            ,\n                            4\n                        ]), [\n                            4,\n                            t.play()\n                        ];\n                    case 2:\n                        return e.sent(), [\n                            3,\n                            4\n                        ];\n                    case 3:\n                        return e.sent(), console.warn(\"It was not possible to play the video.\"), [\n                            3,\n                            4\n                        ];\n                    case 4:\n                        return [\n                            2\n                        ];\n                }\n            });\n        });\n    }, t.prototype.getMediaElement = function(t, e) {\n        var r = document.getElementById(t);\n        if (!r) throw new f(\"element with id '\" + t + \"' not found\");\n        if (r.nodeName.toLowerCase() !== e.toLowerCase()) throw new f(\"element with id '\" + t + \"' must be an \" + e + \" element\");\n        return r;\n    }, t.prototype.decodeFromImage = function(t, e) {\n        if (!t && !e) throw new f(\"either imageElement with a src set or an url must be provided\");\n        return e && !t ? this.decodeFromImageUrl(e) : this.decodeFromImageElement(t);\n    }, t.prototype.decodeFromVideo = function(t, e) {\n        if (!t && !e) throw new f(\"Either an element with a src set or an URL must be provided\");\n        return e && !t ? this.decodeFromVideoUrl(e) : this.decodeFromVideoElement(t);\n    }, t.prototype.decodeFromVideoContinuously = function(t, e, r) {\n        if (void 0 === t && void 0 === e) throw new f(\"Either an element with a src set or an URL must be provided\");\n        return e && !t ? this.decodeFromVideoUrlContinuously(e, r) : this.decodeFromVideoElementContinuously(t, r);\n    }, t.prototype.decodeFromImageElement = function(t) {\n        if (!t) throw new f(\"An image element must be provided.\");\n        this.reset();\n        var e = this.prepareImageElement(t);\n        return this.imageElement = e, this.isImageLoaded(e) ? this.decodeOnce(e, !1, !0) : this._decodeOnLoadImage(e);\n    }, t.prototype.decodeFromVideoElement = function(t) {\n        var e = this._decodeFromVideoElementSetup(t);\n        return this._decodeOnLoadVideo(e);\n    }, t.prototype.decodeFromVideoElementContinuously = function(t, e) {\n        var r = this._decodeFromVideoElementSetup(t);\n        return this._decodeOnLoadVideoContinuously(r, e);\n    }, t.prototype._decodeFromVideoElementSetup = function(t) {\n        if (!t) throw new f(\"A video element must be provided.\");\n        this.reset();\n        var e = this.prepareVideoElement(t);\n        return this.videoElement = e, e;\n    }, t.prototype.decodeFromImageUrl = function(t) {\n        if (!t) throw new f(\"An URL must be provided.\");\n        this.reset();\n        var e = this.prepareImageElement();\n        this.imageElement = e;\n        var r = this._decodeOnLoadImage(e);\n        return e.src = t, r;\n    }, t.prototype.decodeFromVideoUrl = function(t) {\n        if (!t) throw new f(\"An URL must be provided.\");\n        this.reset();\n        var e = this.prepareVideoElement(), r = this.decodeFromVideoElement(e);\n        return e.src = t, r;\n    }, t.prototype.decodeFromVideoUrlContinuously = function(t, e) {\n        if (!t) throw new f(\"An URL must be provided.\");\n        this.reset();\n        var r = this.prepareVideoElement(), n = this.decodeFromVideoElementContinuously(r, e);\n        return r.src = t, n;\n    }, t.prototype._decodeOnLoadImage = function(t) {\n        var e = this;\n        return new Promise(function(r, n) {\n            e.imageLoadedListener = function() {\n                return e.decodeOnce(t, !1, !0).then(r, n);\n            }, t.addEventListener(\"load\", e.imageLoadedListener);\n        });\n    }, t.prototype._decodeOnLoadVideo = function(t) {\n        return Q(this, void 0, void 0, function() {\n            return J(this, function(e) {\n                switch(e.label){\n                    case 0:\n                        return [\n                            4,\n                            this.playVideoOnLoadAsync(t)\n                        ];\n                    case 1:\n                        return e.sent(), [\n                            4,\n                            this.decodeOnce(t)\n                        ];\n                    case 2:\n                        return [\n                            2,\n                            e.sent()\n                        ];\n                }\n            });\n        });\n    }, t.prototype._decodeOnLoadVideoContinuously = function(t, e) {\n        return Q(this, void 0, void 0, function() {\n            return J(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        return [\n                            4,\n                            this.playVideoOnLoadAsync(t)\n                        ];\n                    case 1:\n                        return r.sent(), this.decodeContinuously(t, e), [\n                            2\n                        ];\n                }\n            });\n        });\n    }, t.prototype.isImageLoaded = function(t) {\n        return !!t.complete && 0 !== t.naturalWidth;\n    }, t.prototype.prepareImageElement = function(t) {\n        var e;\n        return void 0 === t && ((e = document.createElement(\"img\")).width = 200, e.height = 200), \"string\" == typeof t && (e = this.getMediaElement(t, \"img\")), t instanceof HTMLImageElement && (e = t), e;\n    }, t.prototype.prepareVideoElement = function(t) {\n        var e;\n        return t || \"undefined\" == typeof document || ((e = document.createElement(\"video\")).width = 200, e.height = 200), \"string\" == typeof t && (e = this.getMediaElement(t, \"video\")), t instanceof HTMLVideoElement && (e = t), e.setAttribute(\"autoplay\", \"true\"), e.setAttribute(\"muted\", \"true\"), e.setAttribute(\"playsinline\", \"true\"), e;\n    }, t.prototype.decodeOnce = function(t, e, r) {\n        var n = this;\n        void 0 === e && (e = !0), void 0 === r && (r = !0), this._stopAsyncDecode = !1;\n        var o = function(i, a) {\n            if (n._stopAsyncDecode) return a(new U(\"Video stream has ended before any code could be detected.\")), void (n._stopAsyncDecode = void 0);\n            try {\n                i(n.decode(t));\n            } catch (t) {\n                if (e && t instanceof U || (t instanceof g || t instanceof R) && r) return setTimeout(o, n._timeBetweenDecodingAttempts, i, a);\n                a(t);\n            }\n        };\n        return new Promise(function(t, e) {\n            return o(t, e);\n        });\n    }, t.prototype.decodeContinuously = function(t, e) {\n        var r = this;\n        this._stopContinuousDecode = !1;\n        var n = function() {\n            if (r._stopContinuousDecode) r._stopContinuousDecode = void 0;\n            else try {\n                var o = r.decode(t);\n                e(o, null), setTimeout(n, r.timeBetweenScansMillis);\n            } catch (t) {\n                e(null, t), (t instanceof g || t instanceof R || t instanceof U) && setTimeout(n, r._timeBetweenDecodingAttempts);\n            }\n        };\n        n();\n    }, t.prototype.decode = function(t) {\n        var e = this.createBinaryBitmap(t);\n        return this.decodeBitmap(e);\n    }, t.prototype.createBinaryBitmap = function(t) {\n        var e = this.getCaptureCanvasContext(t);\n        this.drawImageOnCanvas(e, t);\n        var r = this.getCaptureCanvas(t), n = new K(r), o = new W(n);\n        return new d(o);\n    }, t.prototype.getCaptureCanvasContext = function(t) {\n        if (!this.captureCanvasContext) {\n            var e = this.getCaptureCanvas(t).getContext(\"2d\");\n            this.captureCanvasContext = e;\n        }\n        return this.captureCanvasContext;\n    }, t.prototype.getCaptureCanvas = function(t) {\n        if (!this.captureCanvas) {\n            var e = this.createCaptureCanvas(t);\n            this.captureCanvas = e;\n        }\n        return this.captureCanvas;\n    }, t.prototype.drawImageOnCanvas = function(t, e) {\n        t.drawImage(e, 0, 0);\n    }, t.prototype.decodeBitmap = function(t) {\n        return this.reader.decode(t, this._hints);\n    }, t.prototype.createCaptureCanvas = function(t) {\n        if (\"undefined\" == typeof document) return this._destroyCaptureCanvas(), null;\n        var e, r, n = document.createElement(\"canvas\");\n        return void 0 !== t && (t instanceof HTMLVideoElement ? (e = t.videoWidth, r = t.videoHeight) : t instanceof HTMLImageElement && (e = t.naturalWidth || t.width, r = t.naturalHeight || t.height)), n.style.width = e + \"px\", n.style.height = r + \"px\", n.width = e, n.height = r, n;\n    }, t.prototype.stopStreams = function() {\n        this.stream && (this.stream.getVideoTracks().forEach(function(t) {\n            return t.stop();\n        }), this.stream = void 0), !1 === this._stopAsyncDecode && this.stopAsyncDecode(), !1 === this._stopContinuousDecode && this.stopContinuousDecode();\n    }, t.prototype.reset = function() {\n        this.stopStreams(), this._destroyVideoElement(), this._destroyImageElement(), this._destroyCaptureCanvas();\n    }, t.prototype._destroyVideoElement = function() {\n        this.videoElement && (void 0 !== this.videoEndedListener && this.videoElement.removeEventListener(\"ended\", this.videoEndedListener), void 0 !== this.videoPlayingEventListener && this.videoElement.removeEventListener(\"playing\", this.videoPlayingEventListener), void 0 !== this.videoCanPlayListener && this.videoElement.removeEventListener(\"loadedmetadata\", this.videoCanPlayListener), this.cleanVideoSource(this.videoElement), this.videoElement = void 0);\n    }, t.prototype._destroyImageElement = function() {\n        this.imageElement && (void 0 !== this.imageLoadedListener && this.imageElement.removeEventListener(\"load\", this.imageLoadedListener), this.imageElement.src = void 0, this.imageElement.removeAttribute(\"src\"), this.imageElement = void 0);\n    }, t.prototype._destroyCaptureCanvas = function() {\n        this.captureCanvasContext = void 0, this.captureCanvas = void 0;\n    }, t.prototype.addVideoSource = function(t, e) {\n        try {\n            t.srcObject = e;\n        } catch (r) {\n            t.src = URL.createObjectURL(e);\n        }\n    }, t.prototype.cleanVideoSource = function(t) {\n        try {\n            t.srcObject = null;\n        } catch (e) {\n            t.src = \"\";\n        }\n        this.videoElement.removeAttribute(\"src\");\n    }, t;\n}(), et = function() {\n    function t(t, e, r, n, o, i) {\n        void 0 === r && (r = null == e ? 0 : 8 * e.length), void 0 === i && (i = w.currentTimeMillis()), this.text = t, this.rawBytes = e, this.numBits = r, this.resultPoints = n, this.format = o, this.timestamp = i, this.text = t, this.rawBytes = e, this.numBits = null == r ? null == e ? 0 : 8 * e.length : r, this.resultPoints = n, this.format = o, this.resultMetadata = null, this.timestamp = null == i ? w.currentTimeMillis() : i;\n    }\n    return t.prototype.getText = function() {\n        return this.text;\n    }, t.prototype.getRawBytes = function() {\n        return this.rawBytes;\n    }, t.prototype.getNumBits = function() {\n        return this.numBits;\n    }, t.prototype.getResultPoints = function() {\n        return this.resultPoints;\n    }, t.prototype.getBarcodeFormat = function() {\n        return this.format;\n    }, t.prototype.getResultMetadata = function() {\n        return this.resultMetadata;\n    }, t.prototype.putMetadata = function(t, e) {\n        null === this.resultMetadata && (this.resultMetadata = new Map), this.resultMetadata.set(t, e);\n    }, t.prototype.putAllMetadata = function(t) {\n        null !== t && (null === this.resultMetadata ? this.resultMetadata = t : this.resultMetadata = new Map(t));\n    }, t.prototype.addResultPoints = function(t) {\n        var e = this.resultPoints;\n        if (null === e) this.resultPoints = t;\n        else if (null !== t && t.length > 0) {\n            var r = new Array(e.length + t.length);\n            w.arraycopy(e, 0, r, 0, e.length), w.arraycopy(t, 0, r, e.length, t.length), this.resultPoints = r;\n        }\n    }, t.prototype.getTimestamp = function() {\n        return this.timestamp;\n    }, t.prototype.toString = function() {\n        return this.text;\n    }, t;\n}();\n!function(t) {\n    t[t.AZTEC = 0] = \"AZTEC\", t[t.CODABAR = 1] = \"CODABAR\", t[t.CODE_39 = 2] = \"CODE_39\", t[t.CODE_93 = 3] = \"CODE_93\", t[t.CODE_128 = 4] = \"CODE_128\", t[t.DATA_MATRIX = 5] = \"DATA_MATRIX\", t[t.EAN_8 = 6] = \"EAN_8\", t[t.EAN_13 = 7] = \"EAN_13\", t[t.ITF = 8] = \"ITF\", t[t.MAXICODE = 9] = \"MAXICODE\", t[t.PDF_417 = 10] = \"PDF_417\", t[t.QR_CODE = 11] = \"QR_CODE\", t[t.RSS_14 = 12] = \"RSS_14\", t[t.RSS_EXPANDED = 13] = \"RSS_EXPANDED\", t[t.UPC_A = 14] = \"UPC_A\", t[t.UPC_E = 15] = \"UPC_E\", t[t.UPC_EAN_EXTENSION = 16] = \"UPC_EAN_EXTENSION\";\n}(D || (D = {}));\nvar rt, nt = D;\n!function(t) {\n    t[t.OTHER = 0] = \"OTHER\", t[t.ORIENTATION = 1] = \"ORIENTATION\", t[t.BYTE_SEGMENTS = 2] = \"BYTE_SEGMENTS\", t[t.ERROR_CORRECTION_LEVEL = 3] = \"ERROR_CORRECTION_LEVEL\", t[t.ISSUE_NUMBER = 4] = \"ISSUE_NUMBER\", t[t.SUGGESTED_PRICE = 5] = \"SUGGESTED_PRICE\", t[t.POSSIBLE_COUNTRY = 6] = \"POSSIBLE_COUNTRY\", t[t.UPC_EAN_EXTENSION = 7] = \"UPC_EAN_EXTENSION\", t[t.PDF417_EXTRA_METADATA = 8] = \"PDF417_EXTRA_METADATA\", t[t.STRUCTURED_APPEND_SEQUENCE = 9] = \"STRUCTURED_APPEND_SEQUENCE\", t[t.STRUCTURED_APPEND_PARITY = 10] = \"STRUCTURED_APPEND_PARITY\";\n}(rt || (rt = {}));\nvar ot, it = rt, at = function() {\n    function t(t, e, r, n, o, i) {\n        void 0 === o && (o = -1), void 0 === i && (i = -1), this.rawBytes = t, this.text = e, this.byteSegments = r, this.ecLevel = n, this.structuredAppendSequenceNumber = o, this.structuredAppendParity = i, this.numBits = null == t ? 0 : 8 * t.length;\n    }\n    return t.prototype.getRawBytes = function() {\n        return this.rawBytes;\n    }, t.prototype.getNumBits = function() {\n        return this.numBits;\n    }, t.prototype.setNumBits = function(t) {\n        this.numBits = t;\n    }, t.prototype.getText = function() {\n        return this.text;\n    }, t.prototype.getByteSegments = function() {\n        return this.byteSegments;\n    }, t.prototype.getECLevel = function() {\n        return this.ecLevel;\n    }, t.prototype.getErrorsCorrected = function() {\n        return this.errorsCorrected;\n    }, t.prototype.setErrorsCorrected = function(t) {\n        this.errorsCorrected = t;\n    }, t.prototype.getErasures = function() {\n        return this.erasures;\n    }, t.prototype.setErasures = function(t) {\n        this.erasures = t;\n    }, t.prototype.getOther = function() {\n        return this.other;\n    }, t.prototype.setOther = function(t) {\n        this.other = t;\n    }, t.prototype.hasStructuredAppend = function() {\n        return this.structuredAppendParity >= 0 && this.structuredAppendSequenceNumber >= 0;\n    }, t.prototype.getStructuredAppendParity = function() {\n        return this.structuredAppendParity;\n    }, t.prototype.getStructuredAppendSequenceNumber = function() {\n        return this.structuredAppendSequenceNumber;\n    }, t;\n}(), ut = function() {\n    function t() {}\n    return t.prototype.exp = function(t) {\n        return this.expTable[t];\n    }, t.prototype.log = function(t) {\n        if (0 === t) throw new l;\n        return this.logTable[t];\n    }, t.addOrSubtract = function(t, e) {\n        return t ^ e;\n    }, t;\n}(), st = function() {\n    function t(t, e) {\n        if (0 === e.length) throw new l;\n        this.field = t;\n        var r = e.length;\n        if (r > 1 && 0 === e[0]) {\n            for(var n = 1; n < r && 0 === e[n];)n++;\n            n === r ? this.coefficients = Int32Array.from([\n                0\n            ]) : (this.coefficients = new Int32Array(r - n), w.arraycopy(e, n, this.coefficients, 0, this.coefficients.length));\n        } else this.coefficients = e;\n    }\n    return t.prototype.getCoefficients = function() {\n        return this.coefficients;\n    }, t.prototype.getDegree = function() {\n        return this.coefficients.length - 1;\n    }, t.prototype.isZero = function() {\n        return 0 === this.coefficients[0];\n    }, t.prototype.getCoefficient = function(t) {\n        return this.coefficients[this.coefficients.length - 1 - t];\n    }, t.prototype.evaluateAt = function(t) {\n        if (0 === t) return this.getCoefficient(0);\n        var e, r = this.coefficients;\n        if (1 === t) {\n            e = 0;\n            for(var n = 0, o = r.length; n !== o; n++){\n                var i = r[n];\n                e = ut.addOrSubtract(e, i);\n            }\n            return e;\n        }\n        e = r[0];\n        var a = r.length, u = this.field;\n        for(n = 1; n < a; n++)e = ut.addOrSubtract(u.multiply(t, e), r[n]);\n        return e;\n    }, t.prototype.addOrSubtract = function(e) {\n        if (!this.field.equals(e.field)) throw new l(\"GenericGFPolys do not have same GenericGF field\");\n        if (this.isZero()) return e;\n        if (e.isZero()) return this;\n        var r = this.coefficients, n = e.coefficients;\n        if (r.length > n.length) {\n            var o = r;\n            r = n, n = o;\n        }\n        var i = new Int32Array(n.length), a = n.length - r.length;\n        w.arraycopy(n, 0, i, 0, a);\n        for(var u = a; u < n.length; u++)i[u] = ut.addOrSubtract(r[u - a], n[u]);\n        return new t(this.field, i);\n    }, t.prototype.multiply = function(e) {\n        if (!this.field.equals(e.field)) throw new l(\"GenericGFPolys do not have same GenericGF field\");\n        if (this.isZero() || e.isZero()) return this.field.getZero();\n        for(var r = this.coefficients, n = r.length, o = e.coefficients, i = o.length, a = new Int32Array(n + i - 1), u = this.field, s = 0; s < n; s++)for(var c = r[s], f = 0; f < i; f++)a[s + f] = ut.addOrSubtract(a[s + f], u.multiply(c, o[f]));\n        return new t(u, a);\n    }, t.prototype.multiplyScalar = function(e) {\n        if (0 === e) return this.field.getZero();\n        if (1 === e) return this;\n        for(var r = this.coefficients.length, n = this.field, o = new Int32Array(r), i = this.coefficients, a = 0; a < r; a++)o[a] = n.multiply(i[a], e);\n        return new t(n, o);\n    }, t.prototype.multiplyByMonomial = function(e, r) {\n        if (e < 0) throw new l;\n        if (0 === r) return this.field.getZero();\n        for(var n = this.coefficients, o = n.length, i = new Int32Array(o + e), a = this.field, u = 0; u < o; u++)i[u] = a.multiply(n[u], r);\n        return new t(a, i);\n    }, t.prototype.divide = function(t) {\n        if (!this.field.equals(t.field)) throw new l(\"GenericGFPolys do not have same GenericGF field\");\n        if (t.isZero()) throw new l(\"Divide by 0\");\n        for(var e = this.field, r = e.getZero(), n = this, o = t.getCoefficient(t.getDegree()), i = e.inverse(o); n.getDegree() >= t.getDegree() && !n.isZero();){\n            var a = n.getDegree() - t.getDegree(), u = e.multiply(n.getCoefficient(n.getDegree()), i), s = t.multiplyByMonomial(a, u), c = e.buildMonomial(a, u);\n            r = r.addOrSubtract(c), n = n.addOrSubtract(s);\n        }\n        return [\n            r,\n            n\n        ];\n    }, t.prototype.toString = function() {\n        for(var t = \"\", e = this.getDegree(); e >= 0; e--){\n            var r = this.getCoefficient(e);\n            if (0 !== r) {\n                if (r < 0 ? (t += \" - \", r = -r) : t.length > 0 && (t += \" + \"), 0 === e || 1 !== r) {\n                    var n = this.field.log(r);\n                    0 === n ? t += \"1\" : 1 === n ? t += \"a\" : (t += \"a^\", t += n);\n                }\n                0 !== e && (1 === e ? t += \"x\" : (t += \"x^\", t += e));\n            }\n        }\n        return t;\n    }, t;\n}(), ct = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), ft = function(t) {\n    function e() {\n        return null !== t && t.apply(this, arguments) || this;\n    }\n    return ct(e, t), e.kind = \"ArithmeticException\", e;\n}(s), ht = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), lt = function(t) {\n    function e(e, r, n) {\n        var o = t.call(this) || this;\n        o.primitive = e, o.size = r, o.generatorBase = n;\n        for(var i = new Int32Array(r), a = 1, u = 0; u < r; u++)i[u] = a, (a *= 2) >= r && (a ^= e, a &= r - 1);\n        o.expTable = i;\n        var s = new Int32Array(r);\n        for(u = 0; u < r - 1; u++)s[i[u]] = u;\n        return o.logTable = s, o.zero = new st(o, Int32Array.from([\n            0\n        ])), o.one = new st(o, Int32Array.from([\n            1\n        ])), o;\n    }\n    return ht(e, t), e.prototype.getZero = function() {\n        return this.zero;\n    }, e.prototype.getOne = function() {\n        return this.one;\n    }, e.prototype.buildMonomial = function(t, e) {\n        if (t < 0) throw new l;\n        if (0 === e) return this.zero;\n        var r = new Int32Array(t + 1);\n        return r[0] = e, new st(this, r);\n    }, e.prototype.inverse = function(t) {\n        if (0 === t) throw new ft;\n        return this.expTable[this.size - this.logTable[t] - 1];\n    }, e.prototype.multiply = function(t, e) {\n        return 0 === t || 0 === e ? 0 : this.expTable[(this.logTable[t] + this.logTable[e]) % (this.size - 1)];\n    }, e.prototype.getSize = function() {\n        return this.size;\n    }, e.prototype.getGeneratorBase = function() {\n        return this.generatorBase;\n    }, e.prototype.toString = function() {\n        return \"GF(0x\" + I.toHexString(this.primitive) + \",\" + this.size + \")\";\n    }, e.prototype.equals = function(t) {\n        return t === this;\n    }, e.AZTEC_DATA_12 = new e(4201, 4096, 1), e.AZTEC_DATA_10 = new e(1033, 1024, 1), e.AZTEC_DATA_6 = new e(67, 64, 1), e.AZTEC_PARAM = new e(19, 16, 1), e.QR_CODE_FIELD_256 = new e(285, 256, 0), e.DATA_MATRIX_FIELD_256 = new e(301, 256, 1), e.AZTEC_DATA_8 = e.DATA_MATRIX_FIELD_256, e.MAXICODE_FIELD_64 = e.AZTEC_DATA_6, e;\n}(ut), dt = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), pt = function(t) {\n    function e() {\n        return null !== t && t.apply(this, arguments) || this;\n    }\n    return dt(e, t), e.kind = \"ReedSolomonException\", e;\n}(s), gt = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), yt = function(t) {\n    function e() {\n        return null !== t && t.apply(this, arguments) || this;\n    }\n    return gt(e, t), e.kind = \"IllegalStateException\", e;\n}(s), wt = function() {\n    function t(t) {\n        this.field = t;\n    }\n    return t.prototype.decode = function(t, e) {\n        for(var r = this.field, n = new st(r, t), o = new Int32Array(e), i = !0, a = 0; a < e; a++){\n            var u = n.evaluateAt(r.exp(a + r.getGeneratorBase()));\n            o[o.length - 1 - a] = u, 0 !== u && (i = !1);\n        }\n        if (!i) {\n            var s = new st(r, o), c = this.runEuclideanAlgorithm(r.buildMonomial(e, 1), s, e), f = c[0], h = c[1], l = this.findErrorLocations(f), d = this.findErrorMagnitudes(h, l);\n            for(a = 0; a < l.length; a++){\n                var p = t.length - 1 - r.log(l[a]);\n                if (p < 0) throw new pt(\"Bad error location\");\n                t[p] = lt.addOrSubtract(t[p], d[a]);\n            }\n        }\n    }, t.prototype.runEuclideanAlgorithm = function(t, e, r) {\n        if (t.getDegree() < e.getDegree()) {\n            var n = t;\n            t = e, e = n;\n        }\n        for(var o = this.field, i = t, a = e, u = o.getZero(), s = o.getOne(); a.getDegree() >= (r / 2 | 0);){\n            var c = i, f = u;\n            if (u = s, (i = a).isZero()) throw new pt(\"r_{i-1} was zero\");\n            a = c;\n            for(var h = o.getZero(), l = i.getCoefficient(i.getDegree()), d = o.inverse(l); a.getDegree() >= i.getDegree() && !a.isZero();){\n                var p = a.getDegree() - i.getDegree(), g = o.multiply(a.getCoefficient(a.getDegree()), d);\n                h = h.addOrSubtract(o.buildMonomial(p, g)), a = a.addOrSubtract(i.multiplyByMonomial(p, g));\n            }\n            if (s = h.multiply(u).addOrSubtract(f), a.getDegree() >= i.getDegree()) throw new yt(\"Division algorithm failed to reduce polynomial?\");\n        }\n        var y = s.getCoefficient(0);\n        if (0 === y) throw new pt(\"sigmaTilde(0) was zero\");\n        var w = o.inverse(y);\n        return [\n            s.multiplyScalar(w),\n            a.multiplyScalar(w)\n        ];\n    }, t.prototype.findErrorLocations = function(t) {\n        var e = t.getDegree();\n        if (1 === e) return Int32Array.from([\n            t.getCoefficient(1)\n        ]);\n        for(var r = new Int32Array(e), n = 0, o = this.field, i = 1; i < o.getSize() && n < e; i++)0 === t.evaluateAt(i) && (r[n] = o.inverse(i), n++);\n        if (n !== e) throw new pt(\"Error locator degree does not match number of roots\");\n        return r;\n    }, t.prototype.findErrorMagnitudes = function(t, e) {\n        for(var r = e.length, n = new Int32Array(r), o = this.field, i = 0; i < r; i++){\n            for(var a = o.inverse(e[i]), u = 1, s = 0; s < r; s++)if (i !== s) {\n                var c = o.multiply(e[s], a), f = 0 == (1 & c) ? 1 | c : -2 & c;\n                u = o.multiply(u, f);\n            }\n            n[i] = o.multiply(t.evaluateAt(a), o.inverse(u)), 0 !== o.getGeneratorBase() && (n[i] = o.multiply(n[i], a));\n        }\n        return n;\n    }, t;\n}();\n!function(t) {\n    t[t.UPPER = 0] = \"UPPER\", t[t.LOWER = 1] = \"LOWER\", t[t.MIXED = 2] = \"MIXED\", t[t.DIGIT = 3] = \"DIGIT\", t[t.PUNCT = 4] = \"PUNCT\", t[t.BINARY = 5] = \"BINARY\";\n}(ot || (ot = {}));\nvar _t = function() {\n    function t() {}\n    return t.prototype.decode = function(e) {\n        this.ddata = e;\n        var r = e.getBits(), n = this.extractBits(r), o = this.correctBits(n), i = t.convertBoolArrayToByteArray(o), a = t.getEncodedData(o), u = new at(i, a, null, null);\n        return u.setNumBits(o.length), u;\n    }, t.highLevelDecode = function(t) {\n        return this.getEncodedData(t);\n    }, t.getEncodedData = function(e) {\n        for(var r = e.length, n = ot.UPPER, o = ot.UPPER, i = \"\", a = 0; a < r;)if (o === ot.BINARY) {\n            if (r - a < 5) break;\n            var u = t.readCode(e, a, 5);\n            if (a += 5, 0 === u) {\n                if (r - a < 11) break;\n                u = t.readCode(e, a, 11) + 31, a += 11;\n            }\n            for(var s = 0; s < u; s++){\n                if (r - a < 8) {\n                    a = r;\n                    break;\n                }\n                var c = t.readCode(e, a, 8);\n                i += F.castAsNonUtf8Char(c), a += 8;\n            }\n            o = n;\n        } else {\n            var f = o === ot.DIGIT ? 4 : 5;\n            if (r - a < f) break;\n            c = t.readCode(e, a, f);\n            a += f;\n            var h = t.getCharacter(o, c);\n            h.startsWith(\"CTRL_\") ? (n = o, o = t.getTable(h.charAt(5)), \"L\" === h.charAt(6) && (n = o)) : (i += h, o = n);\n        }\n        return i;\n    }, t.getTable = function(t) {\n        switch(t){\n            case \"L\":\n                return ot.LOWER;\n            case \"P\":\n                return ot.PUNCT;\n            case \"M\":\n                return ot.MIXED;\n            case \"D\":\n                return ot.DIGIT;\n            case \"B\":\n                return ot.BINARY;\n            default:\n                return ot.UPPER;\n        }\n    }, t.getCharacter = function(e, r) {\n        switch(e){\n            case ot.UPPER:\n                return t.UPPER_TABLE[r];\n            case ot.LOWER:\n                return t.LOWER_TABLE[r];\n            case ot.MIXED:\n                return t.MIXED_TABLE[r];\n            case ot.PUNCT:\n                return t.PUNCT_TABLE[r];\n            case ot.DIGIT:\n                return t.DIGIT_TABLE[r];\n            default:\n                throw new yt(\"Bad table\");\n        }\n    }, t.prototype.correctBits = function(e) {\n        var r, n;\n        this.ddata.getNbLayers() <= 2 ? (n = 6, r = lt.AZTEC_DATA_6) : this.ddata.getNbLayers() <= 8 ? (n = 8, r = lt.AZTEC_DATA_8) : this.ddata.getNbLayers() <= 22 ? (n = 10, r = lt.AZTEC_DATA_10) : (n = 12, r = lt.AZTEC_DATA_12);\n        var o = this.ddata.getNbDatablocks(), i = e.length / n;\n        if (i < o) throw new R;\n        for(var a = e.length % n, u = new Int32Array(i), s = 0; s < i; s++, a += n)u[s] = t.readCode(e, a, n);\n        try {\n            new wt(r).decode(u, i - o);\n        } catch (t) {\n            throw new R(t);\n        }\n        var c = (1 << n) - 1, f = 0;\n        for(s = 0; s < o; s++){\n            if (0 === (d = u[s]) || d === c) throw new R;\n            1 !== d && d !== c - 1 || f++;\n        }\n        var h = new Array(o * n - f), l = 0;\n        for(s = 0; s < o; s++){\n            var d;\n            if (1 === (d = u[s]) || d === c - 1) h.fill(d > 1, l, l + n - 1), l += n - 1;\n            else for(var p = n - 1; p >= 0; --p)h[l++] = 0 != (d & 1 << p);\n        }\n        return h;\n    }, t.prototype.extractBits = function(t) {\n        var e = this.ddata.isCompact(), r = this.ddata.getNbLayers(), n = (e ? 11 : 14) + 4 * r, o = new Int32Array(n), i = new Array(this.totalBitsInLayer(r, e));\n        if (e) for(var a = 0; a < o.length; a++)o[a] = a;\n        else {\n            var u = n + 1 + 2 * I.truncDivision(I.truncDivision(n, 2) - 1, 15), s = n / 2, c = I.truncDivision(u, 2);\n            for(a = 0; a < s; a++){\n                var f = a + I.truncDivision(a, 15);\n                o[s - a - 1] = c - f - 1, o[s + a] = c + f + 1;\n            }\n        }\n        a = 0;\n        for(var h = 0; a < r; a++){\n            for(var l = 4 * (r - a) + (e ? 9 : 12), d = 2 * a, p = n - 1 - d, g = 0; g < l; g++)for(var y = 2 * g, w = 0; w < 2; w++)i[h + y + w] = t.get(o[d + w], o[d + g]), i[h + 2 * l + y + w] = t.get(o[d + g], o[p - w]), i[h + 4 * l + y + w] = t.get(o[p - w], o[p - g]), i[h + 6 * l + y + w] = t.get(o[p - g], o[d + w]);\n            h += 8 * l;\n        }\n        return i;\n    }, t.readCode = function(t, e, r) {\n        for(var n = 0, o = e; o < e + r; o++)n <<= 1, t[o] && (n |= 1);\n        return n;\n    }, t.readByte = function(e, r) {\n        var n = e.length - r;\n        return n >= 8 ? t.readCode(e, r, 8) : t.readCode(e, r, n) << 8 - n;\n    }, t.convertBoolArrayToByteArray = function(e) {\n        for(var r = new Uint8Array((e.length + 7) / 8), n = 0; n < r.length; n++)r[n] = t.readByte(e, 8 * n);\n        return r;\n    }, t.prototype.totalBitsInLayer = function(t, e) {\n        return ((e ? 88 : 112) + 16 * t) * t;\n    }, t.UPPER_TABLE = [\n        \"CTRL_PS\",\n        \" \",\n        \"A\",\n        \"B\",\n        \"C\",\n        \"D\",\n        \"E\",\n        \"F\",\n        \"G\",\n        \"H\",\n        \"I\",\n        \"J\",\n        \"K\",\n        \"L\",\n        \"M\",\n        \"N\",\n        \"O\",\n        \"P\",\n        \"Q\",\n        \"R\",\n        \"S\",\n        \"T\",\n        \"U\",\n        \"V\",\n        \"W\",\n        \"X\",\n        \"Y\",\n        \"Z\",\n        \"CTRL_LL\",\n        \"CTRL_ML\",\n        \"CTRL_DL\",\n        \"CTRL_BS\"\n    ], t.LOWER_TABLE = [\n        \"CTRL_PS\",\n        \" \",\n        \"a\",\n        \"b\",\n        \"c\",\n        \"d\",\n        \"e\",\n        \"f\",\n        \"g\",\n        \"h\",\n        \"i\",\n        \"j\",\n        \"k\",\n        \"l\",\n        \"m\",\n        \"n\",\n        \"o\",\n        \"p\",\n        \"q\",\n        \"r\",\n        \"s\",\n        \"t\",\n        \"u\",\n        \"v\",\n        \"w\",\n        \"x\",\n        \"y\",\n        \"z\",\n        \"CTRL_US\",\n        \"CTRL_ML\",\n        \"CTRL_DL\",\n        \"CTRL_BS\"\n    ], t.MIXED_TABLE = [\n        \"CTRL_PS\",\n        \" \",\n        \"\\\\1\",\n        \"\\\\2\",\n        \"\\\\3\",\n        \"\\\\4\",\n        \"\\\\5\",\n        \"\\\\6\",\n        \"\\\\7\",\n        \"\\b\",\n        \"\t\",\n        \"\\n\",\n        \"\\\\13\",\n        \"\\f\",\n        \"\\r\",\n        \"\\\\33\",\n        \"\\\\34\",\n        \"\\\\35\",\n        \"\\\\36\",\n        \"\\\\37\",\n        \"@\",\n        \"\\\\\",\n        \"^\",\n        \"_\",\n        \"`\",\n        \"|\",\n        \"~\",\n        \"\\\\177\",\n        \"CTRL_LL\",\n        \"CTRL_UL\",\n        \"CTRL_PL\",\n        \"CTRL_BS\"\n    ], t.PUNCT_TABLE = [\n        \"\",\n        \"\\r\",\n        \"\\r\\n\",\n        \". \",\n        \", \",\n        \": \",\n        \"!\",\n        '\"',\n        \"#\",\n        \"$\",\n        \"%\",\n        \"&\",\n        \"'\",\n        \"(\",\n        \")\",\n        \"*\",\n        \"+\",\n        \",\",\n        \"-\",\n        \".\",\n        \"/\",\n        \":\",\n        \";\",\n        \"<\",\n        \"=\",\n        \">\",\n        \"?\",\n        \"[\",\n        \"]\",\n        \"{\",\n        \"}\",\n        \"CTRL_UL\"\n    ], t.DIGIT_TABLE = [\n        \"CTRL_PS\",\n        \" \",\n        \"0\",\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\",\n        \"5\",\n        \"6\",\n        \"7\",\n        \"8\",\n        \"9\",\n        \",\",\n        \".\",\n        \"CTRL_UL\",\n        \"CTRL_US\"\n    ], t;\n}(), vt = function() {\n    function t() {}\n    return t.round = function(t) {\n        return NaN === t ? 0 : t <= Number.MIN_SAFE_INTEGER ? Number.MIN_SAFE_INTEGER : t >= Number.MAX_SAFE_INTEGER ? Number.MAX_SAFE_INTEGER : t + (t < 0 ? -.5 : .5) | 0;\n    }, t.distance = function(t, e, r, n) {\n        var o = t - r, i = e - n;\n        return Math.sqrt(o * o + i * i);\n    }, t.sum = function(t) {\n        for(var e = 0, r = 0, n = t.length; r !== n; r++){\n            e += t[r];\n        }\n        return e;\n    }, t;\n}(), mt = function() {\n    function t() {}\n    return t.floatToIntBits = function(t) {\n        return t;\n    }, t.MAX_VALUE = Number.MAX_SAFE_INTEGER, t;\n}(), At = function() {\n    function t(t, e) {\n        this.x = t, this.y = e;\n    }\n    return t.prototype.getX = function() {\n        return this.x;\n    }, t.prototype.getY = function() {\n        return this.y;\n    }, t.prototype.equals = function(e) {\n        if (e instanceof t) {\n            var r = e;\n            return this.x === r.x && this.y === r.y;\n        }\n        return !1;\n    }, t.prototype.hashCode = function() {\n        return 31 * mt.floatToIntBits(this.x) + mt.floatToIntBits(this.y);\n    }, t.prototype.toString = function() {\n        return \"(\" + this.x + \",\" + this.y + \")\";\n    }, t.orderBestPatterns = function(t) {\n        var e, r, n, o = this.distance(t[0], t[1]), i = this.distance(t[1], t[2]), a = this.distance(t[0], t[2]);\n        if (i >= o && i >= a ? (r = t[0], e = t[1], n = t[2]) : a >= i && a >= o ? (r = t[1], e = t[0], n = t[2]) : (r = t[2], e = t[0], n = t[1]), this.crossProductZ(e, r, n) < 0) {\n            var u = e;\n            e = n, n = u;\n        }\n        t[0] = e, t[1] = r, t[2] = n;\n    }, t.distance = function(t, e) {\n        return vt.distance(t.x, t.y, e.x, e.y);\n    }, t.crossProductZ = function(t, e, r) {\n        var n = e.x, o = e.y;\n        return (r.x - n) * (t.y - o) - (r.y - o) * (t.x - n);\n    }, t;\n}(), Et = function() {\n    function t(t, e) {\n        this.bits = t, this.points = e;\n    }\n    return t.prototype.getBits = function() {\n        return this.bits;\n    }, t.prototype.getPoints = function() {\n        return this.points;\n    }, t;\n}(), Ct = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), It = function(t) {\n    function e(e, r, n, o, i) {\n        var a = t.call(this, e, r) || this;\n        return a.compact = n, a.nbDatablocks = o, a.nbLayers = i, a;\n    }\n    return Ct(e, t), e.prototype.getNbLayers = function() {\n        return this.nbLayers;\n    }, e.prototype.getNbDatablocks = function() {\n        return this.nbDatablocks;\n    }, e.prototype.isCompact = function() {\n        return this.compact;\n    }, e;\n}(Et), St = function() {\n    function t(e, r, n, o) {\n        this.image = e, this.height = e.getHeight(), this.width = e.getWidth(), null == r && (r = t.INIT_SIZE), null == n && (n = e.getWidth() / 2 | 0), null == o && (o = e.getHeight() / 2 | 0);\n        var i = r / 2 | 0;\n        if (this.leftInit = n - i, this.rightInit = n + i, this.upInit = o - i, this.downInit = o + i, this.upInit < 0 || this.leftInit < 0 || this.downInit >= this.height || this.rightInit >= this.width) throw new U;\n    }\n    return t.prototype.detect = function() {\n        for(var t = this.leftInit, e = this.rightInit, r = this.upInit, n = this.downInit, o = !1, i = !0, a = !1, u = !1, s = !1, c = !1, f = !1, h = this.width, l = this.height; i;){\n            i = !1;\n            for(var d = !0; (d || !u) && e < h;)(d = this.containsBlackPoint(r, n, e, !1)) ? (e++, i = !0, u = !0) : u || e++;\n            if (e >= h) {\n                o = !0;\n                break;\n            }\n            for(var p = !0; (p || !s) && n < l;)(p = this.containsBlackPoint(t, e, n, !0)) ? (n++, i = !0, s = !0) : s || n++;\n            if (n >= l) {\n                o = !0;\n                break;\n            }\n            for(var g = !0; (g || !c) && t >= 0;)(g = this.containsBlackPoint(r, n, t, !1)) ? (t--, i = !0, c = !0) : c || t--;\n            if (t < 0) {\n                o = !0;\n                break;\n            }\n            for(var y = !0; (y || !f) && r >= 0;)(y = this.containsBlackPoint(t, e, r, !0)) ? (r--, i = !0, f = !0) : f || r--;\n            if (r < 0) {\n                o = !0;\n                break;\n            }\n            i && (a = !0);\n        }\n        if (!o && a) {\n            for(var w = e - t, _ = null, v = 1; null === _ && v < w; v++)_ = this.getBlackPointOnSegment(t, n - v, t + v, n);\n            if (null == _) throw new U;\n            var m = null;\n            for(v = 1; null === m && v < w; v++)m = this.getBlackPointOnSegment(t, r + v, t + v, r);\n            if (null == m) throw new U;\n            var A = null;\n            for(v = 1; null === A && v < w; v++)A = this.getBlackPointOnSegment(e, r + v, e - v, r);\n            if (null == A) throw new U;\n            var E = null;\n            for(v = 1; null === E && v < w; v++)E = this.getBlackPointOnSegment(e, n - v, e - v, n);\n            if (null == E) throw new U;\n            return this.centerEdges(E, _, A, m);\n        }\n        throw new U;\n    }, t.prototype.getBlackPointOnSegment = function(t, e, r, n) {\n        for(var o = vt.round(vt.distance(t, e, r, n)), i = (r - t) / o, a = (n - e) / o, u = this.image, s = 0; s < o; s++){\n            var c = vt.round(t + s * i), f = vt.round(e + s * a);\n            if (u.get(c, f)) return new At(c, f);\n        }\n        return null;\n    }, t.prototype.centerEdges = function(e, r, n, o) {\n        var i = e.getX(), a = e.getY(), u = r.getX(), s = r.getY(), c = n.getX(), f = n.getY(), h = o.getX(), l = o.getY(), d = t.CORR;\n        return i < this.width / 2 ? [\n            new At(h - d, l + d),\n            new At(u + d, s + d),\n            new At(c - d, f - d),\n            new At(i + d, a - d)\n        ] : [\n            new At(h + d, l + d),\n            new At(u + d, s - d),\n            new At(c - d, f + d),\n            new At(i - d, a - d)\n        ];\n    }, t.prototype.containsBlackPoint = function(t, e, r, n) {\n        var o = this.image;\n        if (n) {\n            for(var i = t; i <= e; i++)if (o.get(i, r)) return !0;\n        } else for(var a = t; a <= e; a++)if (o.get(r, a)) return !0;\n        return !1;\n    }, t.INIT_SIZE = 10, t.CORR = 1, t;\n}(), Ot = function() {\n    function t() {}\n    return t.checkAndNudgePoints = function(t, e) {\n        for(var r = t.getWidth(), n = t.getHeight(), o = !0, i = 0; i < e.length && o; i += 2){\n            var a = Math.floor(e[i]), u = Math.floor(e[i + 1]);\n            if (a < -1 || a > r || u < -1 || u > n) throw new U;\n            o = !1, -1 === a ? (e[i] = 0, o = !0) : a === r && (e[i] = r - 1, o = !0), -1 === u ? (e[i + 1] = 0, o = !0) : u === n && (e[i + 1] = n - 1, o = !0);\n        }\n        o = !0;\n        for(i = e.length - 2; i >= 0 && o; i -= 2){\n            a = Math.floor(e[i]), u = Math.floor(e[i + 1]);\n            if (a < -1 || a > r || u < -1 || u > n) throw new U;\n            o = !1, -1 === a ? (e[i] = 0, o = !0) : a === r && (e[i] = r - 1, o = !0), -1 === u ? (e[i + 1] = 0, o = !0) : u === n && (e[i + 1] = n - 1, o = !0);\n        }\n    }, t;\n}(), Tt = function() {\n    function t(t, e, r, n, o, i, a, u, s) {\n        this.a11 = t, this.a21 = e, this.a31 = r, this.a12 = n, this.a22 = o, this.a32 = i, this.a13 = a, this.a23 = u, this.a33 = s;\n    }\n    return t.quadrilateralToQuadrilateral = function(e, r, n, o, i, a, u, s, c, f, h, l, d, p, g, y) {\n        var w = t.quadrilateralToSquare(e, r, n, o, i, a, u, s);\n        return t.squareToQuadrilateral(c, f, h, l, d, p, g, y).times(w);\n    }, t.prototype.transformPoints = function(t) {\n        for(var e = t.length, r = this.a11, n = this.a12, o = this.a13, i = this.a21, a = this.a22, u = this.a23, s = this.a31, c = this.a32, f = this.a33, h = 0; h < e; h += 2){\n            var l = t[h], d = t[h + 1], p = o * l + u * d + f;\n            t[h] = (r * l + i * d + s) / p, t[h + 1] = (n * l + a * d + c) / p;\n        }\n    }, t.prototype.transformPointsWithValues = function(t, e) {\n        for(var r = this.a11, n = this.a12, o = this.a13, i = this.a21, a = this.a22, u = this.a23, s = this.a31, c = this.a32, f = this.a33, h = t.length, l = 0; l < h; l++){\n            var d = t[l], p = e[l], g = o * d + u * p + f;\n            t[l] = (r * d + i * p + s) / g, e[l] = (n * d + a * p + c) / g;\n        }\n    }, t.squareToQuadrilateral = function(e, r, n, o, i, a, u, s) {\n        var c = e - n + i - u, f = r - o + a - s;\n        if (0 === c && 0 === f) return new t(n - e, i - n, e, o - r, a - o, r, 0, 0, 1);\n        var h = n - i, l = u - i, d = o - a, p = s - a, g = h * p - l * d, y = (c * p - l * f) / g, w = (h * f - c * d) / g;\n        return new t(n - e + y * n, u - e + w * u, e, o - r + y * o, s - r + w * s, r, y, w, 1);\n    }, t.quadrilateralToSquare = function(e, r, n, o, i, a, u, s) {\n        return t.squareToQuadrilateral(e, r, n, o, i, a, u, s).buildAdjoint();\n    }, t.prototype.buildAdjoint = function() {\n        return new t(this.a22 * this.a33 - this.a23 * this.a32, this.a23 * this.a31 - this.a21 * this.a33, this.a21 * this.a32 - this.a22 * this.a31, this.a13 * this.a32 - this.a12 * this.a33, this.a11 * this.a33 - this.a13 * this.a31, this.a12 * this.a31 - this.a11 * this.a32, this.a12 * this.a23 - this.a13 * this.a22, this.a13 * this.a21 - this.a11 * this.a23, this.a11 * this.a22 - this.a12 * this.a21);\n    }, t.prototype.times = function(e) {\n        return new t(this.a11 * e.a11 + this.a21 * e.a12 + this.a31 * e.a13, this.a11 * e.a21 + this.a21 * e.a22 + this.a31 * e.a23, this.a11 * e.a31 + this.a21 * e.a32 + this.a31 * e.a33, this.a12 * e.a11 + this.a22 * e.a12 + this.a32 * e.a13, this.a12 * e.a21 + this.a22 * e.a22 + this.a32 * e.a23, this.a12 * e.a31 + this.a22 * e.a32 + this.a32 * e.a33, this.a13 * e.a11 + this.a23 * e.a12 + this.a33 * e.a13, this.a13 * e.a21 + this.a23 * e.a22 + this.a33 * e.a23, this.a13 * e.a31 + this.a23 * e.a32 + this.a33 * e.a33);\n    }, t;\n}(), bt = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), Rt = function(t) {\n    function e() {\n        return null !== t && t.apply(this, arguments) || this;\n    }\n    return bt(e, t), e.prototype.sampleGrid = function(t, e, r, n, o, i, a, u, s, c, f, h, l, d, p, g, y, w, _) {\n        var v = Tt.quadrilateralToQuadrilateral(n, o, i, a, u, s, c, f, h, l, d, p, g, y, w, _);\n        return this.sampleGridWithTransform(t, e, r, v);\n    }, e.prototype.sampleGridWithTransform = function(t, e, r, n) {\n        if (e <= 0 || r <= 0) throw new U;\n        for(var o = new x(e, r), i = new Float32Array(2 * e), a = 0; a < r; a++){\n            for(var u = i.length, s = a + .5, c = 0; c < u; c += 2)i[c] = c / 2 + .5, i[c + 1] = s;\n            n.transformPoints(i), Ot.checkAndNudgePoints(t, i);\n            try {\n                for(c = 0; c < u; c += 2)t.get(Math.floor(i[c]), Math.floor(i[c + 1])) && o.set(c / 2, a);\n            } catch (t) {\n                throw new U;\n            }\n        }\n        return o;\n    }, e;\n}(Ot), Nt = function() {\n    function t() {}\n    return t.setGridSampler = function(e) {\n        t.gridSampler = e;\n    }, t.getInstance = function() {\n        return t.gridSampler;\n    }, t.gridSampler = new Rt, t;\n}(), Dt = function() {\n    function t(t, e) {\n        this.x = t, this.y = e;\n    }\n    return t.prototype.toResultPoint = function() {\n        return new At(this.getX(), this.getY());\n    }, t.prototype.getX = function() {\n        return this.x;\n    }, t.prototype.getY = function() {\n        return this.y;\n    }, t;\n}(), Pt = function() {\n    function t(t) {\n        this.EXPECTED_CORNER_BITS = new Int32Array([\n            3808,\n            476,\n            2107,\n            1799\n        ]), this.image = t;\n    }\n    return t.prototype.detect = function() {\n        return this.detectMirror(!1);\n    }, t.prototype.detectMirror = function(t) {\n        var e = this.getMatrixCenter(), r = this.getBullsEyeCorners(e);\n        if (t) {\n            var n = r[0];\n            r[0] = r[2], r[2] = n;\n        }\n        this.extractParameters(r);\n        var o = this.sampleGrid(this.image, r[this.shift % 4], r[(this.shift + 1) % 4], r[(this.shift + 2) % 4], r[(this.shift + 3) % 4]), i = this.getMatrixCornerPoints(r);\n        return new It(o, i, this.compact, this.nbDataBlocks, this.nbLayers);\n    }, t.prototype.extractParameters = function(t) {\n        if (!(this.isValidPoint(t[0]) && this.isValidPoint(t[1]) && this.isValidPoint(t[2]) && this.isValidPoint(t[3]))) throw new U;\n        var e = 2 * this.nbCenterLayers, r = new Int32Array([\n            this.sampleLine(t[0], t[1], e),\n            this.sampleLine(t[1], t[2], e),\n            this.sampleLine(t[2], t[3], e),\n            this.sampleLine(t[3], t[0], e)\n        ]);\n        this.shift = this.getRotation(r, e);\n        for(var n = 0, o = 0; o < 4; o++){\n            var i = r[(this.shift + o) % 4];\n            this.compact ? (n <<= 7, n += i >> 1 & 127) : (n <<= 10, n += (i >> 2 & 992) + (i >> 1 & 31));\n        }\n        var a = this.getCorrectedParameterData(n, this.compact);\n        this.compact ? (this.nbLayers = 1 + (a >> 6), this.nbDataBlocks = 1 + (63 & a)) : (this.nbLayers = 1 + (a >> 11), this.nbDataBlocks = 1 + (2047 & a));\n    }, t.prototype.getRotation = function(t, e) {\n        var r = 0;\n        t.forEach(function(t, n, o) {\n            r = (r << 3) + ((t >> e - 2 << 1) + (1 & t));\n        }), r = ((1 & r) << 11) + (r >> 1);\n        for(var n = 0; n < 4; n++)if (I.bitCount(r ^ this.EXPECTED_CORNER_BITS[n]) <= 2) return n;\n        throw new U;\n    }, t.prototype.getCorrectedParameterData = function(t, e) {\n        var r, n;\n        e ? (r = 7, n = 2) : (r = 10, n = 4);\n        for(var o = r - n, i = new Int32Array(r), a = r - 1; a >= 0; --a)i[a] = 15 & t, t >>= 4;\n        try {\n            new wt(lt.AZTEC_PARAM).decode(i, o);\n        } catch (t) {\n            throw new U;\n        }\n        var u = 0;\n        for(a = 0; a < n; a++)u = (u << 4) + i[a];\n        return u;\n    }, t.prototype.getBullsEyeCorners = function(t) {\n        var e = t, r = t, n = t, o = t, i = !0;\n        for(this.nbCenterLayers = 1; this.nbCenterLayers < 9; this.nbCenterLayers++){\n            var a = this.getFirstDifferent(e, i, 1, -1), u = this.getFirstDifferent(r, i, 1, 1), s = this.getFirstDifferent(n, i, -1, 1), c = this.getFirstDifferent(o, i, -1, -1);\n            if (this.nbCenterLayers > 2) {\n                var f = this.distancePoint(c, a) * this.nbCenterLayers / (this.distancePoint(o, e) * (this.nbCenterLayers + 2));\n                if (f < .75 || f > 1.25 || !this.isWhiteOrBlackRectangle(a, u, s, c)) break;\n            }\n            e = a, r = u, n = s, o = c, i = !i;\n        }\n        if (5 !== this.nbCenterLayers && 7 !== this.nbCenterLayers) throw new U;\n        this.compact = 5 === this.nbCenterLayers;\n        var h = new At(e.getX() + .5, e.getY() - .5), l = new At(r.getX() + .5, r.getY() + .5), d = new At(n.getX() - .5, n.getY() + .5), p = new At(o.getX() - .5, o.getY() - .5);\n        return this.expandSquare([\n            h,\n            l,\n            d,\n            p\n        ], 2 * this.nbCenterLayers - 3, 2 * this.nbCenterLayers);\n    }, t.prototype.getMatrixCenter = function() {\n        var t, e, r, n;\n        try {\n            t = (s = new St(this.image).detect())[0], e = s[1], r = s[2], n = s[3];\n        } catch (a) {\n            var o = this.image.getWidth() / 2, i = this.image.getHeight() / 2;\n            t = this.getFirstDifferent(new Dt(o + 7, i - 7), !1, 1, -1).toResultPoint(), e = this.getFirstDifferent(new Dt(o + 7, i + 7), !1, 1, 1).toResultPoint(), r = this.getFirstDifferent(new Dt(o - 7, i + 7), !1, -1, 1).toResultPoint(), n = this.getFirstDifferent(new Dt(o - 7, i - 7), !1, -1, -1).toResultPoint();\n        }\n        var a = vt.round((t.getX() + n.getX() + e.getX() + r.getX()) / 4), u = vt.round((t.getY() + n.getY() + e.getY() + r.getY()) / 4);\n        try {\n            var s;\n            t = (s = new St(this.image, 15, a, u).detect())[0], e = s[1], r = s[2], n = s[3];\n        } catch (o) {\n            t = this.getFirstDifferent(new Dt(a + 7, u - 7), !1, 1, -1).toResultPoint(), e = this.getFirstDifferent(new Dt(a + 7, u + 7), !1, 1, 1).toResultPoint(), r = this.getFirstDifferent(new Dt(a - 7, u + 7), !1, -1, 1).toResultPoint(), n = this.getFirstDifferent(new Dt(a - 7, u - 7), !1, -1, -1).toResultPoint();\n        }\n        return a = vt.round((t.getX() + n.getX() + e.getX() + r.getX()) / 4), u = vt.round((t.getY() + n.getY() + e.getY() + r.getY()) / 4), new Dt(a, u);\n    }, t.prototype.getMatrixCornerPoints = function(t) {\n        return this.expandSquare(t, 2 * this.nbCenterLayers, this.getDimension());\n    }, t.prototype.sampleGrid = function(t, e, r, n, o) {\n        var i = Nt.getInstance(), a = this.getDimension(), u = a / 2 - this.nbCenterLayers, s = a / 2 + this.nbCenterLayers;\n        return i.sampleGrid(t, a, a, u, u, s, u, s, s, u, s, e.getX(), e.getY(), r.getX(), r.getY(), n.getX(), n.getY(), o.getX(), o.getY());\n    }, t.prototype.sampleLine = function(t, e, r) {\n        for(var n = 0, o = this.distanceResultPoint(t, e), i = o / r, a = t.getX(), u = t.getY(), s = i * (e.getX() - t.getX()) / o, c = i * (e.getY() - t.getY()) / o, f = 0; f < r; f++)this.image.get(vt.round(a + f * s), vt.round(u + f * c)) && (n |= 1 << r - f - 1);\n        return n;\n    }, t.prototype.isWhiteOrBlackRectangle = function(t, e, r, n) {\n        t = new Dt(t.getX() - 3, t.getY() + 3), e = new Dt(e.getX() - 3, e.getY() - 3), r = new Dt(r.getX() + 3, r.getY() - 3), n = new Dt(n.getX() + 3, n.getY() + 3);\n        var o = this.getColor(n, t);\n        if (0 === o) return !1;\n        var i = this.getColor(t, e);\n        return i === o && (i = this.getColor(e, r)) === o && (i = this.getColor(r, n)) === o;\n    }, t.prototype.getColor = function(t, e) {\n        for(var r = this.distancePoint(t, e), n = (e.getX() - t.getX()) / r, o = (e.getY() - t.getY()) / r, i = 0, a = t.getX(), u = t.getY(), s = this.image.get(t.getX(), t.getY()), c = Math.ceil(r), f = 0; f < c; f++)a += n, u += o, this.image.get(vt.round(a), vt.round(u)) !== s && i++;\n        var h = i / r;\n        return h > .1 && h < .9 ? 0 : h <= .1 === s ? 1 : -1;\n    }, t.prototype.getFirstDifferent = function(t, e, r, n) {\n        for(var o = t.getX() + r, i = t.getY() + n; this.isValid(o, i) && this.image.get(o, i) === e;)o += r, i += n;\n        for(o -= r, i -= n; this.isValid(o, i) && this.image.get(o, i) === e;)o += r;\n        for(o -= r; this.isValid(o, i) && this.image.get(o, i) === e;)i += n;\n        return new Dt(o, i -= n);\n    }, t.prototype.expandSquare = function(t, e, r) {\n        var n = r / (2 * e), o = t[0].getX() - t[2].getX(), i = t[0].getY() - t[2].getY(), a = (t[0].getX() + t[2].getX()) / 2, u = (t[0].getY() + t[2].getY()) / 2, s = new At(a + n * o, u + n * i), c = new At(a - n * o, u - n * i);\n        return o = t[1].getX() - t[3].getX(), i = t[1].getY() - t[3].getY(), a = (t[1].getX() + t[3].getX()) / 2, u = (t[1].getY() + t[3].getY()) / 2, [\n            s,\n            new At(a + n * o, u + n * i),\n            c,\n            new At(a - n * o, u - n * i)\n        ];\n    }, t.prototype.isValid = function(t, e) {\n        return t >= 0 && t < this.image.getWidth() && e > 0 && e < this.image.getHeight();\n    }, t.prototype.isValidPoint = function(t) {\n        var e = vt.round(t.getX()), r = vt.round(t.getY());\n        return this.isValid(e, r);\n    }, t.prototype.distancePoint = function(t, e) {\n        return vt.distance(t.getX(), t.getY(), e.getX(), e.getY());\n    }, t.prototype.distanceResultPoint = function(t, e) {\n        return vt.distance(t.getX(), t.getY(), e.getX(), e.getY());\n    }, t.prototype.getDimension = function() {\n        return this.compact ? 4 * this.nbLayers + 11 : this.nbLayers <= 4 ? 4 * this.nbLayers + 15 : 4 * this.nbLayers + 2 * (I.truncDivision(this.nbLayers - 4, 8) + 1) + 15;\n    }, t;\n}(), Mt = function() {\n    function t() {}\n    return t.prototype.decode = function(t, e) {\n        void 0 === e && (e = null);\n        var r = null, n = new Pt(t.getBlackMatrix()), o = null, i = null;\n        try {\n            o = (a = n.detectMirror(!1)).getPoints(), this.reportFoundResultPoints(e, o), i = (new _t).decode(a);\n        } catch (t) {\n            r = t;\n        }\n        if (null == i) try {\n            var a;\n            o = (a = n.detectMirror(!0)).getPoints(), this.reportFoundResultPoints(e, o), i = (new _t).decode(a);\n        } catch (t) {\n            if (null != r) throw r;\n            throw t;\n        }\n        var u = new et(i.getText(), i.getRawBytes(), i.getNumBits(), o, nt.AZTEC, w.currentTimeMillis()), s = i.getByteSegments();\n        null != s && u.putMetadata(it.BYTE_SEGMENTS, s);\n        var c = i.getECLevel();\n        return null != c && u.putMetadata(it.ERROR_CORRECTION_LEVEL, c), u;\n    }, t.prototype.reportFoundResultPoints = function(t, e) {\n        if (null != t) {\n            var r = t.get(T.NEED_RESULT_POINT_CALLBACK);\n            null != r && e.forEach(function(t, e, n) {\n                r.foundPossibleResultPoint(t);\n            });\n        }\n    }, t.prototype.reset = function() {}, t;\n}(), Bt = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}();\n!function(t) {\n    function e(e) {\n        return void 0 === e && (e = 500), t.call(this, new Mt, e) || this;\n    }\n    Bt(e, t);\n}(tt);\nvar Lt = function() {\n    function t() {}\n    return t.prototype.decode = function(t, e) {\n        try {\n            return this.doDecode(t, e);\n        } catch (c) {\n            if (e && !0 === e.get(T.TRY_HARDER) && t.isRotateSupported()) {\n                var r = t.rotateCounterClockwise(), n = this.doDecode(r, e), o = n.getResultMetadata(), i = 270;\n                null !== o && !0 === o.get(it.ORIENTATION) && (i += o.get(it.ORIENTATION) % 360), n.putMetadata(it.ORIENTATION, i);\n                var a = n.getResultPoints();\n                if (null !== a) for(var u = r.getHeight(), s = 0; s < a.length; s++)a[s] = new At(u - a[s].getY() - 1, a[s].getX());\n                return n;\n            }\n            throw new U;\n        }\n    }, t.prototype.reset = function() {}, t.prototype.doDecode = function(t, e) {\n        var r, n = t.getWidth(), o = t.getHeight(), i = new S(n), a = e && !0 === e.get(T.TRY_HARDER), u = Math.max(1, o >> (a ? 8 : 5));\n        r = a ? o : 15;\n        for(var s = Math.trunc(o / 2), c = 0; c < r; c++){\n            var f = Math.trunc((c + 1) / 2), h = s + u * (0 == (1 & c) ? f : -f);\n            if (h < 0 || h >= o) break;\n            try {\n                i = t.getBlackRow(h, i);\n            } catch (t) {\n                continue;\n            }\n            for(var l = function(t) {\n                if (1 === t && (i.reverse(), e && !0 === e.get(T.NEED_RESULT_POINT_CALLBACK))) {\n                    var r = new Map;\n                    e.forEach(function(t, e) {\n                        return r.set(e, t);\n                    }), r.delete(T.NEED_RESULT_POINT_CALLBACK), e = r;\n                }\n                try {\n                    var o = d.decodeRow(h, i, e);\n                    if (1 === t) {\n                        o.putMetadata(it.ORIENTATION, 180);\n                        var a = o.getResultPoints();\n                        null !== a && (a[0] = new At(n - a[0].getX() - 1, a[0].getY()), a[1] = new At(n - a[1].getX() - 1, a[1].getY()));\n                    }\n                    return {\n                        value: o\n                    };\n                } catch (t) {}\n            }, d = this, p = 0; p < 2; p++){\n                var g = l(p);\n                if (\"object\" == typeof g) return g.value;\n            }\n        }\n        throw new U;\n    }, t.recordPattern = function(t, e, r) {\n        for(var n = r.length, o = 0; o < n; o++)r[o] = 0;\n        var i = t.getSize();\n        if (e >= i) throw new U;\n        for(var a = !t.get(e), u = 0, s = e; s < i;){\n            if (t.get(s) !== a) r[u]++;\n            else {\n                if (++u === n) break;\n                r[u] = 1, a = !a;\n            }\n            s++;\n        }\n        if (u !== n && (u !== n - 1 || s !== i)) throw new U;\n    }, t.recordPatternInReverse = function(e, r, n) {\n        for(var o = n.length, i = e.get(r); r > 0 && o >= 0;)e.get(--r) !== i && (o--, i = !i);\n        if (o >= 0) throw new U;\n        t.recordPattern(e, r + 1, n);\n    }, t.patternMatchVariance = function(t, e, r) {\n        for(var n = t.length, o = 0, i = 0, a = 0; a < n; a++)o += t[a], i += e[a];\n        if (o < i) return Number.POSITIVE_INFINITY;\n        var u = o / i;\n        r *= u;\n        for(var s = 0, c = 0; c < n; c++){\n            var f = t[c], h = e[c] * u, l = f > h ? f - h : h - f;\n            if (l > r) return Number.POSITIVE_INFINITY;\n            s += l;\n        }\n        return s / o;\n    }, t;\n}(), Ft = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), kt = function(t) {\n    function e() {\n        return null !== t && t.apply(this, arguments) || this;\n    }\n    return Ft(e, t), e.findStartPattern = function(t) {\n        for(var r = t.getSize(), n = t.getNextSet(0), o = 0, i = Int32Array.from([\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n        ]), a = n, u = !1, s = n; s < r; s++)if (t.get(s) !== u) i[o]++;\n        else {\n            if (5 === o) {\n                for(var c = e.MAX_AVG_VARIANCE, f = -1, h = e.CODE_START_A; h <= e.CODE_START_C; h++){\n                    var l = Lt.patternMatchVariance(i, e.CODE_PATTERNS[h], e.MAX_INDIVIDUAL_VARIANCE);\n                    l < c && (c = l, f = h);\n                }\n                if (f >= 0 && t.isRange(Math.max(0, a - (s - a) / 2), a, !1)) return Int32Array.from([\n                    a,\n                    s,\n                    f\n                ]);\n                a += i[0] + i[1], (i = i.slice(2, i.length - 1))[o - 1] = 0, i[o] = 0, o--;\n            } else o++;\n            i[o] = 1, u = !u;\n        }\n        throw new U;\n    }, e.decodeCode = function(t, r, n) {\n        Lt.recordPattern(t, n, r);\n        for(var o = e.MAX_AVG_VARIANCE, i = -1, a = 0; a < e.CODE_PATTERNS.length; a++){\n            var u = e.CODE_PATTERNS[a], s = this.patternMatchVariance(r, u, e.MAX_INDIVIDUAL_VARIANCE);\n            s < o && (o = s, i = a);\n        }\n        if (i >= 0) return i;\n        throw new U;\n    }, e.prototype.decodeRow = function(t, r, n) {\n        var o, i = n && !0 === n.get(T.ASSUME_GS1), a = e.findStartPattern(r), u = a[2], s = 0, c = new Uint8Array(20);\n        switch(c[s++] = u, u){\n            case e.CODE_START_A:\n                o = e.CODE_CODE_A;\n                break;\n            case e.CODE_START_B:\n                o = e.CODE_CODE_B;\n                break;\n            case e.CODE_START_C:\n                o = e.CODE_CODE_C;\n                break;\n            default:\n                throw new R;\n        }\n        for(var f = !1, h = !1, l = \"\", d = a[0], p = a[1], y = Int32Array.from([\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n        ]), w = 0, _ = 0, v = u, m = 0, A = !0, E = !1, C = !1; !f;){\n            var I = h;\n            switch(h = !1, w = _, _ = e.decodeCode(r, y, p), c[s++] = _, _ !== e.CODE_STOP && (A = !0), _ !== e.CODE_STOP && (v += ++m * _), d = p, p += y.reduce(function(t, e) {\n                return t + e;\n            }, 0), _){\n                case e.CODE_START_A:\n                case e.CODE_START_B:\n                case e.CODE_START_C:\n                    throw new R;\n            }\n            switch(o){\n                case e.CODE_CODE_A:\n                    if (_ < 64) l += C === E ? String.fromCharCode(\" \".charCodeAt(0) + _) : String.fromCharCode(\" \".charCodeAt(0) + _ + 128), C = !1;\n                    else if (_ < 96) l += C === E ? String.fromCharCode(_ - 64) : String.fromCharCode(_ + 64), C = !1;\n                    else switch(_ !== e.CODE_STOP && (A = !1), _){\n                        case e.CODE_FNC_1:\n                            i && (0 === l.length ? l += \"]C1\" : l += String.fromCharCode(29));\n                            break;\n                        case e.CODE_FNC_2:\n                        case e.CODE_FNC_3:\n                            break;\n                        case e.CODE_FNC_4_A:\n                            !E && C ? (E = !0, C = !1) : E && C ? (E = !1, C = !1) : C = !0;\n                            break;\n                        case e.CODE_SHIFT:\n                            h = !0, o = e.CODE_CODE_B;\n                            break;\n                        case e.CODE_CODE_B:\n                            o = e.CODE_CODE_B;\n                            break;\n                        case e.CODE_CODE_C:\n                            o = e.CODE_CODE_C;\n                            break;\n                        case e.CODE_STOP:\n                            f = !0;\n                    }\n                    break;\n                case e.CODE_CODE_B:\n                    if (_ < 96) l += C === E ? String.fromCharCode(\" \".charCodeAt(0) + _) : String.fromCharCode(\" \".charCodeAt(0) + _ + 128), C = !1;\n                    else switch(_ !== e.CODE_STOP && (A = !1), _){\n                        case e.CODE_FNC_1:\n                            i && (0 === l.length ? l += \"]C1\" : l += String.fromCharCode(29));\n                            break;\n                        case e.CODE_FNC_2:\n                        case e.CODE_FNC_3:\n                            break;\n                        case e.CODE_FNC_4_B:\n                            !E && C ? (E = !0, C = !1) : E && C ? (E = !1, C = !1) : C = !0;\n                            break;\n                        case e.CODE_SHIFT:\n                            h = !0, o = e.CODE_CODE_A;\n                            break;\n                        case e.CODE_CODE_A:\n                            o = e.CODE_CODE_A;\n                            break;\n                        case e.CODE_CODE_C:\n                            o = e.CODE_CODE_C;\n                            break;\n                        case e.CODE_STOP:\n                            f = !0;\n                    }\n                    break;\n                case e.CODE_CODE_C:\n                    if (_ < 100) _ < 10 && (l += \"0\"), l += _;\n                    else switch(_ !== e.CODE_STOP && (A = !1), _){\n                        case e.CODE_FNC_1:\n                            i && (0 === l.length ? l += \"]C1\" : l += String.fromCharCode(29));\n                            break;\n                        case e.CODE_CODE_A:\n                            o = e.CODE_CODE_A;\n                            break;\n                        case e.CODE_CODE_B:\n                            o = e.CODE_CODE_B;\n                            break;\n                        case e.CODE_STOP:\n                            f = !0;\n                    }\n            }\n            I && (o = o === e.CODE_CODE_A ? e.CODE_CODE_B : e.CODE_CODE_A);\n        }\n        var S = p - d;\n        if (p = r.getNextUnset(p), !r.isRange(p, Math.min(r.getSize(), p + (p - d) / 2), !1)) throw new U;\n        if ((v -= m * w) % 103 !== w) throw new g;\n        var O = l.length;\n        if (0 === O) throw new U;\n        O > 0 && A && (l = o === e.CODE_CODE_C ? l.substring(0, O - 2) : l.substring(0, O - 1));\n        for(var b = (a[1] + a[0]) / 2, N = d + S / 2, D = c.length, P = new Uint8Array(D), M = 0; M < D; M++)P[M] = c[M];\n        var B = [\n            new At(b, t),\n            new At(N, t)\n        ];\n        return new et(l, P, 0, B, nt.CODE_128, (new Date).getTime());\n    }, e.CODE_PATTERNS = [\n        Int32Array.from([\n            2,\n            1,\n            2,\n            2,\n            2,\n            2\n        ]),\n        Int32Array.from([\n            2,\n            2,\n            2,\n            1,\n            2,\n            2\n        ]),\n        Int32Array.from([\n            2,\n            2,\n            2,\n            2,\n            2,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            2,\n            1,\n            2,\n            2,\n            3\n        ]),\n        Int32Array.from([\n            1,\n            2,\n            1,\n            3,\n            2,\n            2\n        ]),\n        Int32Array.from([\n            1,\n            3,\n            1,\n            2,\n            2,\n            2\n        ]),\n        Int32Array.from([\n            1,\n            2,\n            2,\n            2,\n            1,\n            3\n        ]),\n        Int32Array.from([\n            1,\n            2,\n            2,\n            3,\n            1,\n            2\n        ]),\n        Int32Array.from([\n            1,\n            3,\n            2,\n            2,\n            1,\n            2\n        ]),\n        Int32Array.from([\n            2,\n            2,\n            1,\n            2,\n            1,\n            3\n        ]),\n        Int32Array.from([\n            2,\n            2,\n            1,\n            3,\n            1,\n            2\n        ]),\n        Int32Array.from([\n            2,\n            3,\n            1,\n            2,\n            1,\n            2\n        ]),\n        Int32Array.from([\n            1,\n            1,\n            2,\n            2,\n            3,\n            2\n        ]),\n        Int32Array.from([\n            1,\n            2,\n            2,\n            1,\n            3,\n            2\n        ]),\n        Int32Array.from([\n            1,\n            2,\n            2,\n            2,\n            3,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            1,\n            3,\n            2,\n            2,\n            2\n        ]),\n        Int32Array.from([\n            1,\n            2,\n            3,\n            1,\n            2,\n            2\n        ]),\n        Int32Array.from([\n            1,\n            2,\n            3,\n            2,\n            2,\n            1\n        ]),\n        Int32Array.from([\n            2,\n            2,\n            3,\n            2,\n            1,\n            1\n        ]),\n        Int32Array.from([\n            2,\n            2,\n            1,\n            1,\n            3,\n            2\n        ]),\n        Int32Array.from([\n            2,\n            2,\n            1,\n            2,\n            3,\n            1\n        ]),\n        Int32Array.from([\n            2,\n            1,\n            3,\n            2,\n            1,\n            2\n        ]),\n        Int32Array.from([\n            2,\n            2,\n            3,\n            1,\n            1,\n            2\n        ]),\n        Int32Array.from([\n            3,\n            1,\n            2,\n            1,\n            3,\n            1\n        ]),\n        Int32Array.from([\n            3,\n            1,\n            1,\n            2,\n            2,\n            2\n        ]),\n        Int32Array.from([\n            3,\n            2,\n            1,\n            1,\n            2,\n            2\n        ]),\n        Int32Array.from([\n            3,\n            2,\n            1,\n            2,\n            2,\n            1\n        ]),\n        Int32Array.from([\n            3,\n            1,\n            2,\n            2,\n            1,\n            2\n        ]),\n        Int32Array.from([\n            3,\n            2,\n            2,\n            1,\n            1,\n            2\n        ]),\n        Int32Array.from([\n            3,\n            2,\n            2,\n            2,\n            1,\n            1\n        ]),\n        Int32Array.from([\n            2,\n            1,\n            2,\n            1,\n            2,\n            3\n        ]),\n        Int32Array.from([\n            2,\n            1,\n            2,\n            3,\n            2,\n            1\n        ]),\n        Int32Array.from([\n            2,\n            3,\n            2,\n            1,\n            2,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            1,\n            1,\n            3,\n            2,\n            3\n        ]),\n        Int32Array.from([\n            1,\n            3,\n            1,\n            1,\n            2,\n            3\n        ]),\n        Int32Array.from([\n            1,\n            3,\n            1,\n            3,\n            2,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            1,\n            2,\n            3,\n            1,\n            3\n        ]),\n        Int32Array.from([\n            1,\n            3,\n            2,\n            1,\n            1,\n            3\n        ]),\n        Int32Array.from([\n            1,\n            3,\n            2,\n            3,\n            1,\n            1\n        ]),\n        Int32Array.from([\n            2,\n            1,\n            1,\n            3,\n            1,\n            3\n        ]),\n        Int32Array.from([\n            2,\n            3,\n            1,\n            1,\n            1,\n            3\n        ]),\n        Int32Array.from([\n            2,\n            3,\n            1,\n            3,\n            1,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            1,\n            2,\n            1,\n            3,\n            3\n        ]),\n        Int32Array.from([\n            1,\n            1,\n            2,\n            3,\n            3,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            3,\n            2,\n            1,\n            3,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            1,\n            3,\n            1,\n            2,\n            3\n        ]),\n        Int32Array.from([\n            1,\n            1,\n            3,\n            3,\n            2,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            3,\n            3,\n            1,\n            2,\n            1\n        ]),\n        Int32Array.from([\n            3,\n            1,\n            3,\n            1,\n            2,\n            1\n        ]),\n        Int32Array.from([\n            2,\n            1,\n            1,\n            3,\n            3,\n            1\n        ]),\n        Int32Array.from([\n            2,\n            3,\n            1,\n            1,\n            3,\n            1\n        ]),\n        Int32Array.from([\n            2,\n            1,\n            3,\n            1,\n            1,\n            3\n        ]),\n        Int32Array.from([\n            2,\n            1,\n            3,\n            3,\n            1,\n            1\n        ]),\n        Int32Array.from([\n            2,\n            1,\n            3,\n            1,\n            3,\n            1\n        ]),\n        Int32Array.from([\n            3,\n            1,\n            1,\n            1,\n            2,\n            3\n        ]),\n        Int32Array.from([\n            3,\n            1,\n            1,\n            3,\n            2,\n            1\n        ]),\n        Int32Array.from([\n            3,\n            3,\n            1,\n            1,\n            2,\n            1\n        ]),\n        Int32Array.from([\n            3,\n            1,\n            2,\n            1,\n            1,\n            3\n        ]),\n        Int32Array.from([\n            3,\n            1,\n            2,\n            3,\n            1,\n            1\n        ]),\n        Int32Array.from([\n            3,\n            3,\n            2,\n            1,\n            1,\n            1\n        ]),\n        Int32Array.from([\n            3,\n            1,\n            4,\n            1,\n            1,\n            1\n        ]),\n        Int32Array.from([\n            2,\n            2,\n            1,\n            4,\n            1,\n            1\n        ]),\n        Int32Array.from([\n            4,\n            3,\n            1,\n            1,\n            1,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            1,\n            1,\n            2,\n            2,\n            4\n        ]),\n        Int32Array.from([\n            1,\n            1,\n            1,\n            4,\n            2,\n            2\n        ]),\n        Int32Array.from([\n            1,\n            2,\n            1,\n            1,\n            2,\n            4\n        ]),\n        Int32Array.from([\n            1,\n            2,\n            1,\n            4,\n            2,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            4,\n            1,\n            1,\n            2,\n            2\n        ]),\n        Int32Array.from([\n            1,\n            4,\n            1,\n            2,\n            2,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            1,\n            2,\n            2,\n            1,\n            4\n        ]),\n        Int32Array.from([\n            1,\n            1,\n            2,\n            4,\n            1,\n            2\n        ]),\n        Int32Array.from([\n            1,\n            2,\n            2,\n            1,\n            1,\n            4\n        ]),\n        Int32Array.from([\n            1,\n            2,\n            2,\n            4,\n            1,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            4,\n            2,\n            1,\n            1,\n            2\n        ]),\n        Int32Array.from([\n            1,\n            4,\n            2,\n            2,\n            1,\n            1\n        ]),\n        Int32Array.from([\n            2,\n            4,\n            1,\n            2,\n            1,\n            1\n        ]),\n        Int32Array.from([\n            2,\n            2,\n            1,\n            1,\n            1,\n            4\n        ]),\n        Int32Array.from([\n            4,\n            1,\n            3,\n            1,\n            1,\n            1\n        ]),\n        Int32Array.from([\n            2,\n            4,\n            1,\n            1,\n            1,\n            2\n        ]),\n        Int32Array.from([\n            1,\n            3,\n            4,\n            1,\n            1,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            1,\n            1,\n            2,\n            4,\n            2\n        ]),\n        Int32Array.from([\n            1,\n            2,\n            1,\n            1,\n            4,\n            2\n        ]),\n        Int32Array.from([\n            1,\n            2,\n            1,\n            2,\n            4,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            1,\n            4,\n            2,\n            1,\n            2\n        ]),\n        Int32Array.from([\n            1,\n            2,\n            4,\n            1,\n            1,\n            2\n        ]),\n        Int32Array.from([\n            1,\n            2,\n            4,\n            2,\n            1,\n            1\n        ]),\n        Int32Array.from([\n            4,\n            1,\n            1,\n            2,\n            1,\n            2\n        ]),\n        Int32Array.from([\n            4,\n            2,\n            1,\n            1,\n            1,\n            2\n        ]),\n        Int32Array.from([\n            4,\n            2,\n            1,\n            2,\n            1,\n            1\n        ]),\n        Int32Array.from([\n            2,\n            1,\n            2,\n            1,\n            4,\n            1\n        ]),\n        Int32Array.from([\n            2,\n            1,\n            4,\n            1,\n            2,\n            1\n        ]),\n        Int32Array.from([\n            4,\n            1,\n            2,\n            1,\n            2,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            1,\n            1,\n            1,\n            4,\n            3\n        ]),\n        Int32Array.from([\n            1,\n            1,\n            1,\n            3,\n            4,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            3,\n            1,\n            1,\n            4,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            1,\n            4,\n            1,\n            1,\n            3\n        ]),\n        Int32Array.from([\n            1,\n            1,\n            4,\n            3,\n            1,\n            1\n        ]),\n        Int32Array.from([\n            4,\n            1,\n            1,\n            1,\n            1,\n            3\n        ]),\n        Int32Array.from([\n            4,\n            1,\n            1,\n            3,\n            1,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            1,\n            3,\n            1,\n            4,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            1,\n            4,\n            1,\n            3,\n            1\n        ]),\n        Int32Array.from([\n            3,\n            1,\n            1,\n            1,\n            4,\n            1\n        ]),\n        Int32Array.from([\n            4,\n            1,\n            1,\n            1,\n            3,\n            1\n        ]),\n        Int32Array.from([\n            2,\n            1,\n            1,\n            4,\n            1,\n            2\n        ]),\n        Int32Array.from([\n            2,\n            1,\n            1,\n            2,\n            1,\n            4\n        ]),\n        Int32Array.from([\n            2,\n            1,\n            1,\n            2,\n            3,\n            2\n        ]),\n        Int32Array.from([\n            2,\n            3,\n            3,\n            1,\n            1,\n            1,\n            2\n        ])\n    ], e.MAX_AVG_VARIANCE = .25, e.MAX_INDIVIDUAL_VARIANCE = .7, e.CODE_SHIFT = 98, e.CODE_CODE_C = 99, e.CODE_CODE_B = 100, e.CODE_CODE_A = 101, e.CODE_FNC_1 = 102, e.CODE_FNC_2 = 97, e.CODE_FNC_3 = 96, e.CODE_FNC_4_A = 101, e.CODE_FNC_4_B = 100, e.CODE_START_A = 103, e.CODE_START_B = 104, e.CODE_START_C = 105, e.CODE_STOP = 106, e;\n}(Lt), xt = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), Vt = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, Ut = function(t) {\n    function e(e, r) {\n        void 0 === e && (e = !1), void 0 === r && (r = !1);\n        var n = t.call(this) || this;\n        return n.usingCheckDigit = e, n.extendedMode = r, n.decodeRowResult = \"\", n.counters = new Int32Array(9), n;\n    }\n    return xt(e, t), e.prototype.decodeRow = function(t, r, n) {\n        var o, i, a, u, s = this.counters;\n        s.fill(0), this.decodeRowResult = \"\";\n        var c, f, h = e.findAsteriskPattern(r, s), l = r.getNextSet(h[1]), d = r.getSize();\n        do {\n            e.recordPattern(r, l, s);\n            var p = e.toNarrowWidePattern(s);\n            if (p < 0) throw new U;\n            c = e.patternToChar(p), this.decodeRowResult += c, f = l;\n            try {\n                for(var y = (o = void 0, Vt(s)), w = y.next(); !w.done; w = y.next()){\n                    l += w.value;\n                }\n            } catch (t) {\n                o = {\n                    error: t\n                };\n            } finally{\n                try {\n                    w && !w.done && (i = y.return) && i.call(y);\n                } finally{\n                    if (o) throw o.error;\n                }\n            }\n            l = r.getNextSet(l);\n        }while (\"*\" !== c);\n        this.decodeRowResult = this.decodeRowResult.substring(0, this.decodeRowResult.length - 1);\n        var _, v = 0;\n        try {\n            for(var m = Vt(s), A = m.next(); !A.done; A = m.next()){\n                v += A.value;\n            }\n        } catch (t) {\n            a = {\n                error: t\n            };\n        } finally{\n            try {\n                A && !A.done && (u = m.return) && u.call(m);\n            } finally{\n                if (a) throw a.error;\n            }\n        }\n        if (l !== d && 2 * (l - f - v) < v) throw new U;\n        if (this.usingCheckDigit) {\n            for(var E = this.decodeRowResult.length - 1, C = 0, I = 0; I < E; I++)C += e.ALPHABET_STRING.indexOf(this.decodeRowResult.charAt(I));\n            if (this.decodeRowResult.charAt(E) !== e.ALPHABET_STRING.charAt(C % 43)) throw new g;\n            this.decodeRowResult = this.decodeRowResult.substring(0, E);\n        }\n        if (0 === this.decodeRowResult.length) throw new U;\n        _ = this.extendedMode ? e.decodeExtended(this.decodeRowResult) : this.decodeRowResult;\n        var S = (h[1] + h[0]) / 2, O = f + v / 2;\n        return new et(_, null, 0, [\n            new At(S, t),\n            new At(O, t)\n        ], nt.CODE_39, (new Date).getTime());\n    }, e.findAsteriskPattern = function(t, r) {\n        for(var n = t.getSize(), o = t.getNextSet(0), i = 0, a = o, u = !1, s = r.length, c = o; c < n; c++)if (t.get(c) !== u) r[i]++;\n        else {\n            if (i === s - 1) {\n                if (this.toNarrowWidePattern(r) === e.ASTERISK_ENCODING && t.isRange(Math.max(0, a - Math.floor((c - a) / 2)), a, !1)) return [\n                    a,\n                    c\n                ];\n                a += r[0] + r[1], r.copyWithin(0, 2, 2 + i - 1), r[i - 1] = 0, r[i] = 0, i--;\n            } else i++;\n            r[i] = 1, u = !u;\n        }\n        throw new U;\n    }, e.toNarrowWidePattern = function(t) {\n        var e, r, n, o = t.length, i = 0;\n        do {\n            var a = 2147483647;\n            try {\n                for(var u = (e = void 0, Vt(t)), s = u.next(); !s.done; s = u.next()){\n                    (l = s.value) < a && l > i && (a = l);\n                }\n            } catch (t) {\n                e = {\n                    error: t\n                };\n            } finally{\n                try {\n                    s && !s.done && (r = u.return) && r.call(u);\n                } finally{\n                    if (e) throw e.error;\n                }\n            }\n            i = a, n = 0;\n            for(var c = 0, f = 0, h = 0; h < o; h++){\n                (l = t[h]) > i && (f |= 1 << o - 1 - h, n++, c += l);\n            }\n            if (3 === n) {\n                for(h = 0; h < o && n > 0; h++){\n                    var l;\n                    if ((l = t[h]) > i && (n--, 2 * l >= c)) return -1;\n                }\n                return f;\n            }\n        }while (n > 3);\n        return -1;\n    }, e.patternToChar = function(t) {\n        for(var r = 0; r < e.CHARACTER_ENCODINGS.length; r++)if (e.CHARACTER_ENCODINGS[r] === t) return e.ALPHABET_STRING.charAt(r);\n        if (t === e.ASTERISK_ENCODING) return \"*\";\n        throw new U;\n    }, e.decodeExtended = function(t) {\n        for(var e = t.length, r = \"\", n = 0; n < e; n++){\n            var o = t.charAt(n);\n            if (\"+\" === o || \"$\" === o || \"%\" === o || \"/\" === o) {\n                var i = t.charAt(n + 1), a = \"\\x00\";\n                switch(o){\n                    case \"+\":\n                        if (!(i >= \"A\" && i <= \"Z\")) throw new R;\n                        a = String.fromCharCode(i.charCodeAt(0) + 32);\n                        break;\n                    case \"$\":\n                        if (!(i >= \"A\" && i <= \"Z\")) throw new R;\n                        a = String.fromCharCode(i.charCodeAt(0) - 64);\n                        break;\n                    case \"%\":\n                        if (i >= \"A\" && i <= \"E\") a = String.fromCharCode(i.charCodeAt(0) - 38);\n                        else if (i >= \"F\" && i <= \"J\") a = String.fromCharCode(i.charCodeAt(0) - 11);\n                        else if (i >= \"K\" && i <= \"O\") a = String.fromCharCode(i.charCodeAt(0) + 16);\n                        else if (i >= \"P\" && i <= \"T\") a = String.fromCharCode(i.charCodeAt(0) + 43);\n                        else if (\"U\" === i) a = \"\\x00\";\n                        else if (\"V\" === i) a = \"@\";\n                        else if (\"W\" === i) a = \"`\";\n                        else {\n                            if (\"X\" !== i && \"Y\" !== i && \"Z\" !== i) throw new R;\n                            a = \"\\x7f\";\n                        }\n                        break;\n                    case \"/\":\n                        if (i >= \"A\" && i <= \"O\") a = String.fromCharCode(i.charCodeAt(0) - 32);\n                        else {\n                            if (\"Z\" !== i) throw new R;\n                            a = \":\";\n                        }\n                }\n                r += a, n++;\n            } else r += o;\n        }\n        return r;\n    }, e.ALPHABET_STRING = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%\", e.CHARACTER_ENCODINGS = [\n        52,\n        289,\n        97,\n        352,\n        49,\n        304,\n        112,\n        37,\n        292,\n        100,\n        265,\n        73,\n        328,\n        25,\n        280,\n        88,\n        13,\n        268,\n        76,\n        28,\n        259,\n        67,\n        322,\n        19,\n        274,\n        82,\n        7,\n        262,\n        70,\n        22,\n        385,\n        193,\n        448,\n        145,\n        400,\n        208,\n        133,\n        388,\n        196,\n        168,\n        162,\n        138,\n        42\n    ], e.ASTERISK_ENCODING = 148, e;\n}(Lt), Ht = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), Gt = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, Xt = function(t) {\n    function e() {\n        var e = null !== t && t.apply(this, arguments) || this;\n        return e.narrowLineWidth = -1, e;\n    }\n    return Ht(e, t), e.prototype.decodeRow = function(t, r, n) {\n        var o, i, a = this.decodeStart(r), u = this.decodeEnd(r), s = new k;\n        e.decodeMiddle(r, a[1], u[0], s);\n        var c = s.toString(), f = null;\n        null != n && (f = n.get(T.ALLOWED_LENGTHS)), null == f && (f = e.DEFAULT_ALLOWED_LENGTHS);\n        var h = c.length, l = !1, d = 0;\n        try {\n            for(var p = Gt(f), g = p.next(); !g.done; g = p.next()){\n                var y = g.value;\n                if (h === y) {\n                    l = !0;\n                    break;\n                }\n                y > d && (d = y);\n            }\n        } catch (t) {\n            o = {\n                error: t\n            };\n        } finally{\n            try {\n                g && !g.done && (i = p.return) && i.call(p);\n            } finally{\n                if (o) throw o.error;\n            }\n        }\n        if (!l && h > d && (l = !0), !l) throw new R;\n        var w = [\n            new At(a[1], t),\n            new At(u[0], t)\n        ];\n        return new et(c, null, 0, w, nt.ITF, (new Date).getTime());\n    }, e.decodeMiddle = function(t, r, n, o) {\n        var i = new Int32Array(10), a = new Int32Array(5), u = new Int32Array(5);\n        for(i.fill(0), a.fill(0), u.fill(0); r < n;){\n            Lt.recordPattern(t, r, i);\n            for(var s = 0; s < 5; s++){\n                var c = 2 * s;\n                a[s] = i[c], u[s] = i[c + 1];\n            }\n            var f = e.decodeDigit(a);\n            o.append(f.toString()), f = this.decodeDigit(u), o.append(f.toString()), i.forEach(function(t) {\n                r += t;\n            });\n        }\n    }, e.prototype.decodeStart = function(t) {\n        var r = e.skipWhiteSpace(t), n = e.findGuardPattern(t, r, e.START_PATTERN);\n        return this.narrowLineWidth = (n[1] - n[0]) / 4, this.validateQuietZone(t, n[0]), n;\n    }, e.prototype.validateQuietZone = function(t, e) {\n        var r = 10 * this.narrowLineWidth;\n        r = r < e ? r : e;\n        for(var n = e - 1; r > 0 && n >= 0 && !t.get(n); n--)r--;\n        if (0 !== r) throw new U;\n    }, e.skipWhiteSpace = function(t) {\n        var e = t.getSize(), r = t.getNextSet(0);\n        if (r === e) throw new U;\n        return r;\n    }, e.prototype.decodeEnd = function(t) {\n        t.reverse();\n        try {\n            var r = e.skipWhiteSpace(t), n = void 0;\n            try {\n                n = e.findGuardPattern(t, r, e.END_PATTERN_REVERSED[0]);\n            } catch (o) {\n                o instanceof U && (n = e.findGuardPattern(t, r, e.END_PATTERN_REVERSED[1]));\n            }\n            this.validateQuietZone(t, n[0]);\n            var o = n[0];\n            return n[0] = t.getSize() - n[1], n[1] = t.getSize() - o, n;\n        } finally{\n            t.reverse();\n        }\n    }, e.findGuardPattern = function(t, r, n) {\n        var o = n.length, i = new Int32Array(o), a = t.getSize(), u = !1, s = 0, c = r;\n        i.fill(0);\n        for(var f = r; f < a; f++)if (t.get(f) !== u) i[s]++;\n        else {\n            if (s === o - 1) {\n                if (Lt.patternMatchVariance(i, n, e.MAX_INDIVIDUAL_VARIANCE) < e.MAX_AVG_VARIANCE) return [\n                    c,\n                    f\n                ];\n                c += i[0] + i[1], w.arraycopy(i, 2, i, 0, s - 1), i[s - 1] = 0, i[s] = 0, s--;\n            } else s++;\n            i[s] = 1, u = !u;\n        }\n        throw new U;\n    }, e.decodeDigit = function(t) {\n        for(var r = e.MAX_AVG_VARIANCE, n = -1, o = e.PATTERNS.length, i = 0; i < o; i++){\n            var a = e.PATTERNS[i], u = Lt.patternMatchVariance(t, a, e.MAX_INDIVIDUAL_VARIANCE);\n            u < r ? (r = u, n = i) : u === r && (n = -1);\n        }\n        if (n >= 0) return n % 10;\n        throw new U;\n    }, e.PATTERNS = [\n        Int32Array.from([\n            1,\n            1,\n            2,\n            2,\n            1\n        ]),\n        Int32Array.from([\n            2,\n            1,\n            1,\n            1,\n            2\n        ]),\n        Int32Array.from([\n            1,\n            2,\n            1,\n            1,\n            2\n        ]),\n        Int32Array.from([\n            2,\n            2,\n            1,\n            1,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            1,\n            2,\n            1,\n            2\n        ]),\n        Int32Array.from([\n            2,\n            1,\n            2,\n            1,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            2,\n            2,\n            1,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            1,\n            1,\n            2,\n            2\n        ]),\n        Int32Array.from([\n            2,\n            1,\n            1,\n            2,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            2,\n            1,\n            2,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            1,\n            3,\n            3,\n            1\n        ]),\n        Int32Array.from([\n            3,\n            1,\n            1,\n            1,\n            3\n        ]),\n        Int32Array.from([\n            1,\n            3,\n            1,\n            1,\n            3\n        ]),\n        Int32Array.from([\n            3,\n            3,\n            1,\n            1,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            1,\n            3,\n            1,\n            3\n        ]),\n        Int32Array.from([\n            3,\n            1,\n            3,\n            1,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            3,\n            3,\n            1,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            1,\n            1,\n            3,\n            3\n        ]),\n        Int32Array.from([\n            3,\n            1,\n            1,\n            3,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            3,\n            1,\n            3,\n            1\n        ])\n    ], e.MAX_AVG_VARIANCE = .38, e.MAX_INDIVIDUAL_VARIANCE = .5, e.DEFAULT_ALLOWED_LENGTHS = [\n        6,\n        8,\n        10,\n        12,\n        14\n    ], e.START_PATTERN = Int32Array.from([\n        1,\n        1,\n        1,\n        1\n    ]), e.END_PATTERN_REVERSED = [\n        Int32Array.from([\n            1,\n            1,\n            2\n        ]),\n        Int32Array.from([\n            1,\n            1,\n            3\n        ])\n    ], e;\n}(Lt), Wt = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), jt = function(t) {\n    function e() {\n        var e = null !== t && t.apply(this, arguments) || this;\n        return e.decodeRowStringBuffer = \"\", e;\n    }\n    return Wt(e, t), e.findStartGuardPattern = function(t) {\n        for(var r, n = !1, o = 0, i = Int32Array.from([\n            0,\n            0,\n            0\n        ]); !n;){\n            i = Int32Array.from([\n                0,\n                0,\n                0\n            ]);\n            var a = (r = e.findGuardPattern(t, o, !1, this.START_END_PATTERN, i))[0], u = a - ((o = r[1]) - a);\n            u >= 0 && (n = t.isRange(u, a, !1));\n        }\n        return r;\n    }, e.checkChecksum = function(t) {\n        return e.checkStandardUPCEANChecksum(t);\n    }, e.checkStandardUPCEANChecksum = function(t) {\n        var r = t.length;\n        if (0 === r) return !1;\n        var n = parseInt(t.charAt(r - 1), 10);\n        return e.getStandardUPCEANChecksum(t.substring(0, r - 1)) === n;\n    }, e.getStandardUPCEANChecksum = function(t) {\n        for(var e = t.length, r = 0, n = e - 1; n >= 0; n -= 2){\n            if ((o = t.charAt(n).charCodeAt(0) - \"0\".charCodeAt(0)) < 0 || o > 9) throw new R;\n            r += o;\n        }\n        r *= 3;\n        for(n = e - 2; n >= 0; n -= 2){\n            var o;\n            if ((o = t.charAt(n).charCodeAt(0) - \"0\".charCodeAt(0)) < 0 || o > 9) throw new R;\n            r += o;\n        }\n        return (1e3 - r) % 10;\n    }, e.decodeEnd = function(t, r) {\n        return e.findGuardPattern(t, r, !1, e.START_END_PATTERN, new Int32Array(e.START_END_PATTERN.length).fill(0));\n    }, e.findGuardPatternWithoutCounters = function(t, e, r, n) {\n        return this.findGuardPattern(t, e, r, n, new Int32Array(n.length));\n    }, e.findGuardPattern = function(t, r, n, o, i) {\n        for(var a = t.getSize(), u = 0, s = r = n ? t.getNextUnset(r) : t.getNextSet(r), c = o.length, f = n, h = r; h < a; h++)if (t.get(h) !== f) i[u]++;\n        else {\n            if (u === c - 1) {\n                if (Lt.patternMatchVariance(i, o, e.MAX_INDIVIDUAL_VARIANCE) < e.MAX_AVG_VARIANCE) return Int32Array.from([\n                    s,\n                    h\n                ]);\n                s += i[0] + i[1];\n                for(var l = i.slice(2, i.length - 1), d = 0; d < u - 1; d++)i[d] = l[d];\n                i[u - 1] = 0, i[u] = 0, u--;\n            } else u++;\n            i[u] = 1, f = !f;\n        }\n        throw new U;\n    }, e.decodeDigit = function(t, r, n, o) {\n        this.recordPattern(t, n, r);\n        for(var i = this.MAX_AVG_VARIANCE, a = -1, u = o.length, s = 0; s < u; s++){\n            var c = o[s], f = Lt.patternMatchVariance(r, c, e.MAX_INDIVIDUAL_VARIANCE);\n            f < i && (i = f, a = s);\n        }\n        if (a >= 0) return a;\n        throw new U;\n    }, e.MAX_AVG_VARIANCE = .48, e.MAX_INDIVIDUAL_VARIANCE = .7, e.START_END_PATTERN = Int32Array.from([\n        1,\n        1,\n        1\n    ]), e.MIDDLE_PATTERN = Int32Array.from([\n        1,\n        1,\n        1,\n        1,\n        1\n    ]), e.END_PATTERN = Int32Array.from([\n        1,\n        1,\n        1,\n        1,\n        1,\n        1\n    ]), e.L_PATTERNS = [\n        Int32Array.from([\n            3,\n            2,\n            1,\n            1\n        ]),\n        Int32Array.from([\n            2,\n            2,\n            2,\n            1\n        ]),\n        Int32Array.from([\n            2,\n            1,\n            2,\n            2\n        ]),\n        Int32Array.from([\n            1,\n            4,\n            1,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            1,\n            3,\n            2\n        ]),\n        Int32Array.from([\n            1,\n            2,\n            3,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            1,\n            1,\n            4\n        ]),\n        Int32Array.from([\n            1,\n            3,\n            1,\n            2\n        ]),\n        Int32Array.from([\n            1,\n            2,\n            1,\n            3\n        ]),\n        Int32Array.from([\n            3,\n            1,\n            1,\n            2\n        ])\n    ], e;\n}(Lt), zt = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, Yt = function() {\n    function t() {\n        this.CHECK_DIGIT_ENCODINGS = [\n            24,\n            20,\n            18,\n            17,\n            12,\n            6,\n            3,\n            10,\n            9,\n            5\n        ], this.decodeMiddleCounters = Int32Array.from([\n            0,\n            0,\n            0,\n            0\n        ]), this.decodeRowStringBuffer = \"\";\n    }\n    return t.prototype.decodeRow = function(e, r, n) {\n        var o = this.decodeRowStringBuffer, i = this.decodeMiddle(r, n, o), a = o.toString(), u = t.parseExtensionString(a), s = [\n            new At((n[0] + n[1]) / 2, e),\n            new At(i, e)\n        ], c = new et(a, null, 0, s, nt.UPC_EAN_EXTENSION, (new Date).getTime());\n        return null != u && c.putAllMetadata(u), c;\n    }, t.prototype.decodeMiddle = function(e, r, n) {\n        var o, i, a = this.decodeMiddleCounters;\n        a[0] = 0, a[1] = 0, a[2] = 0, a[3] = 0;\n        for(var u = e.getSize(), s = r[1], c = 0, f = 0; f < 5 && s < u; f++){\n            var h = jt.decodeDigit(e, a, s, jt.L_AND_G_PATTERNS);\n            n += String.fromCharCode(\"0\".charCodeAt(0) + h % 10);\n            try {\n                for(var l = (o = void 0, zt(a)), d = l.next(); !d.done; d = l.next()){\n                    s += d.value;\n                }\n            } catch (t) {\n                o = {\n                    error: t\n                };\n            } finally{\n                try {\n                    d && !d.done && (i = l.return) && i.call(l);\n                } finally{\n                    if (o) throw o.error;\n                }\n            }\n            h >= 10 && (c |= 1 << 4 - f), 4 !== f && (s = e.getNextSet(s), s = e.getNextUnset(s));\n        }\n        if (5 !== n.length) throw new U;\n        var p = this.determineCheckDigit(c);\n        if (t.extensionChecksum(n.toString()) !== p) throw new U;\n        return s;\n    }, t.extensionChecksum = function(t) {\n        for(var e = t.length, r = 0, n = e - 2; n >= 0; n -= 2)r += t.charAt(n).charCodeAt(0) - \"0\".charCodeAt(0);\n        r *= 3;\n        for(n = e - 1; n >= 0; n -= 2)r += t.charAt(n).charCodeAt(0) - \"0\".charCodeAt(0);\n        return (r *= 3) % 10;\n    }, t.prototype.determineCheckDigit = function(t) {\n        for(var e = 0; e < 10; e++)if (t === this.CHECK_DIGIT_ENCODINGS[e]) return e;\n        throw new U;\n    }, t.parseExtensionString = function(e) {\n        if (5 !== e.length) return null;\n        var r = t.parseExtension5String(e);\n        return null == r ? null : new Map([\n            [\n                it.SUGGESTED_PRICE,\n                r\n            ]\n        ]);\n    }, t.parseExtension5String = function(t) {\n        var e;\n        switch(t.charAt(0)){\n            case \"0\":\n                e = \"\\xa3\";\n                break;\n            case \"5\":\n                e = \"$\";\n                break;\n            case \"9\":\n                switch(t){\n                    case \"90000\":\n                        return null;\n                    case \"99991\":\n                        return \"0.00\";\n                    case \"99990\":\n                        return \"Used\";\n                }\n                e = \"\";\n                break;\n            default:\n                e = \"\";\n        }\n        var r = parseInt(t.substring(1)), n = r % 100;\n        return e + (r / 100).toString() + \".\" + (n < 10 ? \"0\" + n : n.toString());\n    }, t;\n}(), Zt = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, Kt = function() {\n    function t() {\n        this.decodeMiddleCounters = Int32Array.from([\n            0,\n            0,\n            0,\n            0\n        ]), this.decodeRowStringBuffer = \"\";\n    }\n    return t.prototype.decodeRow = function(e, r, n) {\n        var o = this.decodeRowStringBuffer, i = this.decodeMiddle(r, n, o), a = o.toString(), u = t.parseExtensionString(a), s = [\n            new At((n[0] + n[1]) / 2, e),\n            new At(i, e)\n        ], c = new et(a, null, 0, s, nt.UPC_EAN_EXTENSION, (new Date).getTime());\n        return null != u && c.putAllMetadata(u), c;\n    }, t.prototype.decodeMiddle = function(t, e, r) {\n        var n, o, i = this.decodeMiddleCounters;\n        i[0] = 0, i[1] = 0, i[2] = 0, i[3] = 0;\n        for(var a = t.getSize(), u = e[1], s = 0, c = 0; c < 2 && u < a; c++){\n            var f = jt.decodeDigit(t, i, u, jt.L_AND_G_PATTERNS);\n            r += String.fromCharCode(\"0\".charCodeAt(0) + f % 10);\n            try {\n                for(var h = (n = void 0, Zt(i)), l = h.next(); !l.done; l = h.next()){\n                    u += l.value;\n                }\n            } catch (t) {\n                n = {\n                    error: t\n                };\n            } finally{\n                try {\n                    l && !l.done && (o = h.return) && o.call(h);\n                } finally{\n                    if (n) throw n.error;\n                }\n            }\n            f >= 10 && (s |= 1 << 1 - c), 1 !== c && (u = t.getNextSet(u), u = t.getNextUnset(u));\n        }\n        if (2 !== r.length) throw new U;\n        if (parseInt(r.toString()) % 4 !== s) throw new U;\n        return u;\n    }, t.parseExtensionString = function(t) {\n        return 2 !== t.length ? null : new Map([\n            [\n                it.ISSUE_NUMBER,\n                parseInt(t)\n            ]\n        ]);\n    }, t;\n}(), qt = function() {\n    function t() {}\n    return t.decodeRow = function(t, e, r) {\n        var n = jt.findGuardPattern(e, r, !1, this.EXTENSION_START_PATTERN, new Int32Array(this.EXTENSION_START_PATTERN.length).fill(0));\n        try {\n            return (new Yt).decodeRow(t, e, n);\n        } catch (r) {\n            return (new Kt).decodeRow(t, e, n);\n        }\n    }, t.EXTENSION_START_PATTERN = Int32Array.from([\n        1,\n        1,\n        2\n    ]), t;\n}(), Qt = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), Jt = function(t) {\n    function e() {\n        var r = t.call(this) || this;\n        r.decodeRowStringBuffer = \"\", e.L_AND_G_PATTERNS = e.L_PATTERNS.map(function(t) {\n            return Int32Array.from(t);\n        });\n        for(var n = 10; n < 20; n++){\n            for(var o = e.L_PATTERNS[n - 10], i = new Int32Array(o.length), a = 0; a < o.length; a++)i[a] = o[o.length - a - 1];\n            e.L_AND_G_PATTERNS[n] = i;\n        }\n        return r;\n    }\n    return Qt(e, t), e.prototype.decodeRow = function(t, r, n) {\n        var o = e.findStartGuardPattern(r), i = null == n ? null : n.get(T.NEED_RESULT_POINT_CALLBACK);\n        if (null != i) {\n            var a = new At((o[0] + o[1]) / 2, t);\n            i.foundPossibleResultPoint(a);\n        }\n        var u = this.decodeMiddle(r, o, this.decodeRowStringBuffer), s = u.rowOffset, c = u.resultString;\n        if (null != i) {\n            var f = new At(s, t);\n            i.foundPossibleResultPoint(f);\n        }\n        var h = e.decodeEnd(r, s);\n        if (null != i) {\n            var l = new At((h[0] + h[1]) / 2, t);\n            i.foundPossibleResultPoint(l);\n        }\n        var d = h[1], p = d + (d - h[0]);\n        if (p >= r.getSize() || !r.isRange(d, p, !1)) throw new U;\n        var y = c.toString();\n        if (y.length < 8) throw new R;\n        if (!e.checkChecksum(y)) throw new g;\n        var w = (o[1] + o[0]) / 2, _ = (h[1] + h[0]) / 2, v = this.getBarcodeFormat(), m = [\n            new At(w, t),\n            new At(_, t)\n        ], A = new et(y, null, 0, m, v, (new Date).getTime()), E = 0;\n        try {\n            var C = qt.decodeRow(t, r, h[1]);\n            A.putMetadata(it.UPC_EAN_EXTENSION, C.getText()), A.putAllMetadata(C.getResultMetadata()), A.addResultPoints(C.getResultPoints()), E = C.getText().length;\n        } catch (t) {}\n        var I = null == n ? null : n.get(T.ALLOWED_EAN_EXTENSIONS);\n        if (null != I) {\n            var S = !1;\n            for(var O in I)if (E.toString() === O) {\n                S = !0;\n                break;\n            }\n            if (!S) throw new U;\n        }\n        return v === nt.EAN_13 || nt.UPC_A, A;\n    }, e.checkChecksum = function(t) {\n        return e.checkStandardUPCEANChecksum(t);\n    }, e.checkStandardUPCEANChecksum = function(t) {\n        var r = t.length;\n        if (0 === r) return !1;\n        var n = parseInt(t.charAt(r - 1), 10);\n        return e.getStandardUPCEANChecksum(t.substring(0, r - 1)) === n;\n    }, e.getStandardUPCEANChecksum = function(t) {\n        for(var e = t.length, r = 0, n = e - 1; n >= 0; n -= 2){\n            if ((o = t.charAt(n).charCodeAt(0) - \"0\".charCodeAt(0)) < 0 || o > 9) throw new R;\n            r += o;\n        }\n        r *= 3;\n        for(n = e - 2; n >= 0; n -= 2){\n            var o;\n            if ((o = t.charAt(n).charCodeAt(0) - \"0\".charCodeAt(0)) < 0 || o > 9) throw new R;\n            r += o;\n        }\n        return (1e3 - r) % 10;\n    }, e.decodeEnd = function(t, r) {\n        return e.findGuardPattern(t, r, !1, e.START_END_PATTERN, new Int32Array(e.START_END_PATTERN.length).fill(0));\n    }, e;\n}(jt), $t = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), te = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, ee = function(t) {\n    function e() {\n        var e = t.call(this) || this;\n        return e.decodeMiddleCounters = Int32Array.from([\n            0,\n            0,\n            0,\n            0\n        ]), e;\n    }\n    return $t(e, t), e.prototype.decodeMiddle = function(t, r, n) {\n        var o, i, a, u, s = this.decodeMiddleCounters;\n        s[0] = 0, s[1] = 0, s[2] = 0, s[3] = 0;\n        for(var c = t.getSize(), f = r[1], h = 0, l = 0; l < 6 && f < c; l++){\n            var d = Jt.decodeDigit(t, s, f, Jt.L_AND_G_PATTERNS);\n            n += String.fromCharCode(\"0\".charCodeAt(0) + d % 10);\n            try {\n                for(var p = (o = void 0, te(s)), g = p.next(); !g.done; g = p.next()){\n                    f += g.value;\n                }\n            } catch (t) {\n                o = {\n                    error: t\n                };\n            } finally{\n                try {\n                    g && !g.done && (i = p.return) && i.call(p);\n                } finally{\n                    if (o) throw o.error;\n                }\n            }\n            d >= 10 && (h |= 1 << 5 - l);\n        }\n        n = e.determineFirstDigit(n, h), f = Jt.findGuardPattern(t, f, !0, Jt.MIDDLE_PATTERN, new Int32Array(Jt.MIDDLE_PATTERN.length).fill(0))[1];\n        for(l = 0; l < 6 && f < c; l++){\n            d = Jt.decodeDigit(t, s, f, Jt.L_PATTERNS);\n            n += String.fromCharCode(\"0\".charCodeAt(0) + d);\n            try {\n                for(var y = (a = void 0, te(s)), w = y.next(); !w.done; w = y.next()){\n                    f += w.value;\n                }\n            } catch (t) {\n                a = {\n                    error: t\n                };\n            } finally{\n                try {\n                    w && !w.done && (u = y.return) && u.call(y);\n                } finally{\n                    if (a) throw a.error;\n                }\n            }\n        }\n        return {\n            rowOffset: f,\n            resultString: n\n        };\n    }, e.prototype.getBarcodeFormat = function() {\n        return nt.EAN_13;\n    }, e.determineFirstDigit = function(t, e) {\n        for(var r = 0; r < 10; r++)if (e === this.FIRST_DIGIT_ENCODINGS[r]) return t = String.fromCharCode(\"0\".charCodeAt(0) + r) + t;\n        throw new U;\n    }, e.FIRST_DIGIT_ENCODINGS = [\n        0,\n        11,\n        13,\n        14,\n        19,\n        25,\n        28,\n        21,\n        22,\n        26\n    ], e;\n}(Jt), re = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), ne = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, oe = function(t) {\n    function e() {\n        var e = t.call(this) || this;\n        return e.decodeMiddleCounters = Int32Array.from([\n            0,\n            0,\n            0,\n            0\n        ]), e;\n    }\n    return re(e, t), e.prototype.decodeMiddle = function(t, e, r) {\n        var n, o, i, a, u = this.decodeMiddleCounters;\n        u[0] = 0, u[1] = 0, u[2] = 0, u[3] = 0;\n        for(var s = t.getSize(), c = e[1], f = 0; f < 4 && c < s; f++){\n            var h = Jt.decodeDigit(t, u, c, Jt.L_PATTERNS);\n            r += String.fromCharCode(\"0\".charCodeAt(0) + h);\n            try {\n                for(var l = (n = void 0, ne(u)), d = l.next(); !d.done; d = l.next()){\n                    c += d.value;\n                }\n            } catch (t) {\n                n = {\n                    error: t\n                };\n            } finally{\n                try {\n                    d && !d.done && (o = l.return) && o.call(l);\n                } finally{\n                    if (n) throw n.error;\n                }\n            }\n        }\n        c = Jt.findGuardPattern(t, c, !0, Jt.MIDDLE_PATTERN, new Int32Array(Jt.MIDDLE_PATTERN.length).fill(0))[1];\n        for(f = 0; f < 4 && c < s; f++){\n            h = Jt.decodeDigit(t, u, c, Jt.L_PATTERNS);\n            r += String.fromCharCode(\"0\".charCodeAt(0) + h);\n            try {\n                for(var p = (i = void 0, ne(u)), g = p.next(); !g.done; g = p.next()){\n                    c += g.value;\n                }\n            } catch (t) {\n                i = {\n                    error: t\n                };\n            } finally{\n                try {\n                    g && !g.done && (a = p.return) && a.call(p);\n                } finally{\n                    if (i) throw i.error;\n                }\n            }\n        }\n        return {\n            rowOffset: c,\n            resultString: r\n        };\n    }, e.prototype.getBarcodeFormat = function() {\n        return nt.EAN_8;\n    }, e;\n}(Jt), ie = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), ae = function(t) {\n    function e() {\n        var e = null !== t && t.apply(this, arguments) || this;\n        return e.ean13Reader = new ee, e;\n    }\n    return ie(e, t), e.prototype.getBarcodeFormat = function() {\n        return nt.UPC_A;\n    }, e.prototype.decode = function(t, e) {\n        return this.maybeReturnResult(this.ean13Reader.decode(t));\n    }, e.prototype.decodeRow = function(t, e, r) {\n        return this.maybeReturnResult(this.ean13Reader.decodeRow(t, e, r));\n    }, e.prototype.decodeMiddle = function(t, e, r) {\n        return this.ean13Reader.decodeMiddle(t, e, r);\n    }, e.prototype.maybeReturnResult = function(t) {\n        var e = t.getText();\n        if (\"0\" === e.charAt(0)) {\n            var r = new et(e.substring(1), null, null, t.getResultPoints(), nt.UPC_A);\n            return null != t.getResultMetadata() && r.putAllMetadata(t.getResultMetadata()), r;\n        }\n        throw new U;\n    }, e.prototype.reset = function() {\n        this.ean13Reader.reset();\n    }, e;\n}(Jt), ue = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), se = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, ce = function(t) {\n    function e() {\n        var e = t.call(this) || this;\n        return e.decodeMiddleCounters = new Int32Array(4), e;\n    }\n    return ue(e, t), e.prototype.decodeMiddle = function(t, r, n) {\n        var o, i, a = this.decodeMiddleCounters.map(function(t) {\n            return t;\n        });\n        a[0] = 0, a[1] = 0, a[2] = 0, a[3] = 0;\n        for(var u = t.getSize(), s = r[1], c = 0, f = 0; f < 6 && s < u; f++){\n            var h = e.decodeDigit(t, a, s, e.L_AND_G_PATTERNS);\n            n += String.fromCharCode(\"0\".charCodeAt(0) + h % 10);\n            try {\n                for(var l = (o = void 0, se(a)), d = l.next(); !d.done; d = l.next()){\n                    s += d.value;\n                }\n            } catch (t) {\n                o = {\n                    error: t\n                };\n            } finally{\n                try {\n                    d && !d.done && (i = l.return) && i.call(l);\n                } finally{\n                    if (o) throw o.error;\n                }\n            }\n            h >= 10 && (c |= 1 << 5 - f);\n        }\n        return e.determineNumSysAndCheckDigit(new k(n), c), s;\n    }, e.prototype.decodeEnd = function(t, r) {\n        return e.findGuardPatternWithoutCounters(t, r, !0, e.MIDDLE_END_PATTERN);\n    }, e.prototype.checkChecksum = function(t) {\n        return Jt.checkChecksum(e.convertUPCEtoUPCA(t));\n    }, e.determineNumSysAndCheckDigit = function(t, e) {\n        for(var r = 0; r <= 1; r++)for(var n = 0; n < 10; n++)if (e === this.NUMSYS_AND_CHECK_DIGIT_PATTERNS[r][n]) return t.insert(0, \"0\" + r), void t.append(\"0\" + n);\n        throw U.getNotFoundInstance();\n    }, e.prototype.getBarcodeFormat = function() {\n        return nt.UPC_E;\n    }, e.convertUPCEtoUPCA = function(t) {\n        var e = t.slice(1, 7).split(\"\").map(function(t) {\n            return t.charCodeAt(0);\n        }), r = new k;\n        r.append(t.charAt(0));\n        var n = e[5];\n        switch(n){\n            case 0:\n            case 1:\n            case 2:\n                r.appendChars(e, 0, 2), r.append(n), r.append(\"0000\"), r.appendChars(e, 2, 3);\n                break;\n            case 3:\n                r.appendChars(e, 0, 3), r.append(\"00000\"), r.appendChars(e, 3, 2);\n                break;\n            case 4:\n                r.appendChars(e, 0, 4), r.append(\"00000\"), r.append(e[4]);\n                break;\n            default:\n                r.appendChars(e, 0, 5), r.append(\"0000\"), r.append(n);\n        }\n        return t.length >= 8 && r.append(t.charAt(7)), r.toString();\n    }, e.MIDDLE_END_PATTERN = Int32Array.from([\n        1,\n        1,\n        1,\n        1,\n        1,\n        1\n    ]), e.NUMSYS_AND_CHECK_DIGIT_PATTERNS = [\n        Int32Array.from([\n            56,\n            52,\n            50,\n            49,\n            44,\n            38,\n            35,\n            42,\n            41,\n            37\n        ]),\n        Int32Array.from([\n            7,\n            11,\n            13,\n            14,\n            19,\n            25,\n            28,\n            21,\n            22,\n            1\n        ])\n    ], e;\n}(Jt), fe = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), he = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, le = function(t) {\n    function e(e) {\n        var r = t.call(this) || this, n = null == e ? null : e.get(T.POSSIBLE_FORMATS), o = [];\n        return null != n && (n.indexOf(nt.EAN_13) > -1 ? o.push(new ee) : n.indexOf(nt.UPC_A) > -1 && o.push(new ae), n.indexOf(nt.EAN_8) > -1 && o.push(new oe), n.indexOf(nt.UPC_E) > -1 && o.push(new ce)), 0 === o.length && (o.push(new ee), o.push(new oe), o.push(new ce)), r.readers = o, r;\n    }\n    return fe(e, t), e.prototype.decodeRow = function(t, e, r) {\n        var n, o;\n        try {\n            for(var i = he(this.readers), a = i.next(); !a.done; a = i.next()){\n                var u = a.value;\n                try {\n                    var s = u.decodeRow(t, e, r), c = s.getBarcodeFormat() === nt.EAN_13 && \"0\" === s.getText().charAt(0), f = null == r ? null : r.get(T.POSSIBLE_FORMATS), h = null == f || f.includes(nt.UPC_A);\n                    if (c && h) {\n                        var l = s.getRawBytes(), d = new et(s.getText().substring(1), l, l.length, s.getResultPoints(), nt.UPC_A);\n                        return d.putAllMetadata(s.getResultMetadata()), d;\n                    }\n                    return s;\n                } catch (t) {}\n            }\n        } catch (t) {\n            n = {\n                error: t\n            };\n        } finally{\n            try {\n                a && !a.done && (o = i.return) && o.call(i);\n            } finally{\n                if (n) throw n.error;\n            }\n        }\n        throw new U;\n    }, e.prototype.reset = function() {\n        var t, e;\n        try {\n            for(var r = he(this.readers), n = r.next(); !n.done; n = r.next()){\n                n.value.reset();\n            }\n        } catch (e) {\n            t = {\n                error: e\n            };\n        } finally{\n            try {\n                n && !n.done && (e = r.return) && e.call(r);\n            } finally{\n                if (t) throw t.error;\n            }\n        }\n    }, e;\n}(Lt), de = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), pe = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, ge = function(t) {\n    function e() {\n        var e = t.call(this) || this;\n        return e.decodeFinderCounters = new Int32Array(4), e.dataCharacterCounters = new Int32Array(8), e.oddRoundingErrors = new Array(4), e.evenRoundingErrors = new Array(4), e.oddCounts = new Array(e.dataCharacterCounters.length / 2), e.evenCounts = new Array(e.dataCharacterCounters.length / 2), e;\n    }\n    return de(e, t), e.prototype.getDecodeFinderCounters = function() {\n        return this.decodeFinderCounters;\n    }, e.prototype.getDataCharacterCounters = function() {\n        return this.dataCharacterCounters;\n    }, e.prototype.getOddRoundingErrors = function() {\n        return this.oddRoundingErrors;\n    }, e.prototype.getEvenRoundingErrors = function() {\n        return this.evenRoundingErrors;\n    }, e.prototype.getOddCounts = function() {\n        return this.oddCounts;\n    }, e.prototype.getEvenCounts = function() {\n        return this.evenCounts;\n    }, e.prototype.parseFinderValue = function(t, r) {\n        for(var n = 0; n < r.length; n++)if (Lt.patternMatchVariance(t, r[n], e.MAX_INDIVIDUAL_VARIANCE) < e.MAX_AVG_VARIANCE) return n;\n        throw new U;\n    }, e.count = function(t) {\n        return vt.sum(new Int32Array(t));\n    }, e.increment = function(t, e) {\n        for(var r = 0, n = e[0], o = 1; o < t.length; o++)e[o] > n && (n = e[o], r = o);\n        t[r]++;\n    }, e.decrement = function(t, e) {\n        for(var r = 0, n = e[0], o = 1; o < t.length; o++)e[o] < n && (n = e[o], r = o);\n        t[r]--;\n    }, e.isFinderPattern = function(t) {\n        var r, n, o = t[0] + t[1], i = o / (o + t[2] + t[3]);\n        if (i >= e.MIN_FINDER_PATTERN_RATIO && i <= e.MAX_FINDER_PATTERN_RATIO) {\n            var a = Number.MAX_SAFE_INTEGER, u = Number.MIN_SAFE_INTEGER;\n            try {\n                for(var s = pe(t), c = s.next(); !c.done; c = s.next()){\n                    var f = c.value;\n                    f > u && (u = f), f < a && (a = f);\n                }\n            } catch (t) {\n                r = {\n                    error: t\n                };\n            } finally{\n                try {\n                    c && !c.done && (n = s.return) && n.call(s);\n                } finally{\n                    if (r) throw r.error;\n                }\n            }\n            return u < 10 * a;\n        }\n        return !1;\n    }, e.MAX_AVG_VARIANCE = .2, e.MAX_INDIVIDUAL_VARIANCE = .45, e.MIN_FINDER_PATTERN_RATIO = 9.5 / 12, e.MAX_FINDER_PATTERN_RATIO = 12.5 / 14, e;\n}(Lt), ye = function() {\n    function t(t, e) {\n        this.value = t, this.checksumPortion = e;\n    }\n    return t.prototype.getValue = function() {\n        return this.value;\n    }, t.prototype.getChecksumPortion = function() {\n        return this.checksumPortion;\n    }, t.prototype.toString = function() {\n        return this.value + \"(\" + this.checksumPortion + \")\";\n    }, t.prototype.equals = function(e) {\n        if (!(e instanceof t)) return !1;\n        var r = e;\n        return this.value === r.value && this.checksumPortion === r.checksumPortion;\n    }, t.prototype.hashCode = function() {\n        return this.value ^ this.checksumPortion;\n    }, t;\n}(), we = function() {\n    function t(t, e, r, n, o) {\n        this.value = t, this.startEnd = e, this.value = t, this.startEnd = e, this.resultPoints = new Array, this.resultPoints.push(new At(r, o)), this.resultPoints.push(new At(n, o));\n    }\n    return t.prototype.getValue = function() {\n        return this.value;\n    }, t.prototype.getStartEnd = function() {\n        return this.startEnd;\n    }, t.prototype.getResultPoints = function() {\n        return this.resultPoints;\n    }, t.prototype.equals = function(e) {\n        if (!(e instanceof t)) return !1;\n        var r = e;\n        return this.value === r.value;\n    }, t.prototype.hashCode = function() {\n        return this.value;\n    }, t;\n}(), _e = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, ve = function() {\n    function t() {}\n    return t.getRSSvalue = function(e, r, n) {\n        var o, i, a = 0;\n        try {\n            for(var u = _e(e), s = u.next(); !s.done; s = u.next()){\n                a += s.value;\n            }\n        } catch (t) {\n            o = {\n                error: t\n            };\n        } finally{\n            try {\n                s && !s.done && (i = u.return) && i.call(u);\n            } finally{\n                if (o) throw o.error;\n            }\n        }\n        for(var c = 0, f = 0, h = e.length, l = 0; l < h - 1; l++){\n            var d = void 0;\n            for(d = 1, f |= 1 << l; d < e[l]; d++, f &= ~(1 << l)){\n                var p = t.combins(a - d - 1, h - l - 2);\n                if (n && 0 === f && a - d - (h - l - 1) >= h - l - 1 && (p -= t.combins(a - d - (h - l), h - l - 2)), h - l - 1 > 1) {\n                    for(var g = 0, y = a - d - (h - l - 2); y > r; y--)g += t.combins(a - d - y - 1, h - l - 3);\n                    p -= g * (h - 1 - l);\n                } else a - d > r && p--;\n                c += p;\n            }\n            a -= d;\n        }\n        return c;\n    }, t.combins = function(t, e) {\n        var r, n;\n        t - e > e ? (n = e, r = t - e) : (n = t - e, r = e);\n        for(var o = 1, i = 1, a = t; a > r; a--)o *= a, i <= n && (o /= i, i++);\n        for(; i <= n;)o /= i, i++;\n        return o;\n    }, t;\n}(), me = function() {\n    function t() {}\n    return t.buildBitArray = function(t) {\n        var e = 2 * t.length - 1;\n        null == t[t.length - 1].getRightChar() && (e -= 1);\n        for(var r = new S(12 * e), n = 0, o = t[0].getRightChar().getValue(), i = 11; i >= 0; --i)0 != (o & 1 << i) && r.set(n), n++;\n        for(i = 1; i < t.length; ++i){\n            for(var a = t[i], u = a.getLeftChar().getValue(), s = 11; s >= 0; --s)0 != (u & 1 << s) && r.set(n), n++;\n            if (null != a.getRightChar()) {\n                var c = a.getRightChar().getValue();\n                for(s = 11; s >= 0; --s)0 != (c & 1 << s) && r.set(n), n++;\n            }\n        }\n        return r;\n    }, t;\n}(), Ae = function() {\n    function t(t, e) {\n        e ? this.decodedInformation = null : (this.finished = t, this.decodedInformation = e);\n    }\n    return t.prototype.getDecodedInformation = function() {\n        return this.decodedInformation;\n    }, t.prototype.isFinished = function() {\n        return this.finished;\n    }, t;\n}(), Ee = function() {\n    function t(t) {\n        this.newPosition = t;\n    }\n    return t.prototype.getNewPosition = function() {\n        return this.newPosition;\n    }, t;\n}(), Ce = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), Ie = function(t) {\n    function e(e, r) {\n        var n = t.call(this, e) || this;\n        return n.value = r, n;\n    }\n    return Ce(e, t), e.prototype.getValue = function() {\n        return this.value;\n    }, e.prototype.isFNC1 = function() {\n        return this.value === e.FNC1;\n    }, e.FNC1 = \"$\", e;\n}(Ee), Se = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), Oe = function(t) {\n    function e(e, r, n) {\n        var o = t.call(this, e) || this;\n        return n ? (o.remaining = !0, o.remainingValue = o.remainingValue) : (o.remaining = !1, o.remainingValue = 0), o.newString = r, o;\n    }\n    return Se(e, t), e.prototype.getNewString = function() {\n        return this.newString;\n    }, e.prototype.isRemaining = function() {\n        return this.remaining;\n    }, e.prototype.getRemainingValue = function() {\n        return this.remainingValue;\n    }, e;\n}(Ee), Te = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), be = function(t) {\n    function e(e, r, n) {\n        var o = t.call(this, e) || this;\n        if (r < 0 || r > 10 || n < 0 || n > 10) throw new R;\n        return o.firstDigit = r, o.secondDigit = n, o;\n    }\n    return Te(e, t), e.prototype.getFirstDigit = function() {\n        return this.firstDigit;\n    }, e.prototype.getSecondDigit = function() {\n        return this.secondDigit;\n    }, e.prototype.getValue = function() {\n        return 10 * this.firstDigit + this.secondDigit;\n    }, e.prototype.isFirstDigitFNC1 = function() {\n        return this.firstDigit === e.FNC1;\n    }, e.prototype.isSecondDigitFNC1 = function() {\n        return this.secondDigit === e.FNC1;\n    }, e.prototype.isAnyFNC1 = function() {\n        return this.firstDigit === e.FNC1 || this.secondDigit === e.FNC1;\n    }, e.FNC1 = 10, e;\n}(Ee), Re = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, Ne = function() {\n    function t() {}\n    return t.parseFieldsInGeneralPurpose = function(e) {\n        var r, n, o, i, a, u, s, c;\n        if (!e) return null;\n        if (e.length < 2) throw new U;\n        var f = e.substring(0, 2);\n        try {\n            for(var h = Re(t.TWO_DIGIT_DATA_LENGTH), l = h.next(); !l.done; l = h.next()){\n                if ((A = l.value)[0] === f) return A[1] === t.VARIABLE_LENGTH ? t.processVariableAI(2, A[2], e) : t.processFixedAI(2, A[1], e);\n            }\n        } catch (t) {\n            r = {\n                error: t\n            };\n        } finally{\n            try {\n                l && !l.done && (n = h.return) && n.call(h);\n            } finally{\n                if (r) throw r.error;\n            }\n        }\n        if (e.length < 3) throw new U;\n        var d = e.substring(0, 3);\n        try {\n            for(var p = Re(t.THREE_DIGIT_DATA_LENGTH), g = p.next(); !g.done; g = p.next()){\n                if ((A = g.value)[0] === d) return A[1] === t.VARIABLE_LENGTH ? t.processVariableAI(3, A[2], e) : t.processFixedAI(3, A[1], e);\n            }\n        } catch (t) {\n            o = {\n                error: t\n            };\n        } finally{\n            try {\n                g && !g.done && (i = p.return) && i.call(p);\n            } finally{\n                if (o) throw o.error;\n            }\n        }\n        try {\n            for(var y = Re(t.THREE_DIGIT_PLUS_DIGIT_DATA_LENGTH), w = y.next(); !w.done; w = y.next()){\n                if ((A = w.value)[0] === d) return A[1] === t.VARIABLE_LENGTH ? t.processVariableAI(4, A[2], e) : t.processFixedAI(4, A[1], e);\n            }\n        } catch (t) {\n            a = {\n                error: t\n            };\n        } finally{\n            try {\n                w && !w.done && (u = y.return) && u.call(y);\n            } finally{\n                if (a) throw a.error;\n            }\n        }\n        if (e.length < 4) throw new U;\n        var _ = e.substring(0, 4);\n        try {\n            for(var v = Re(t.FOUR_DIGIT_DATA_LENGTH), m = v.next(); !m.done; m = v.next()){\n                var A;\n                if ((A = m.value)[0] === _) return A[1] === t.VARIABLE_LENGTH ? t.processVariableAI(4, A[2], e) : t.processFixedAI(4, A[1], e);\n            }\n        } catch (t) {\n            s = {\n                error: t\n            };\n        } finally{\n            try {\n                m && !m.done && (c = v.return) && c.call(v);\n            } finally{\n                if (s) throw s.error;\n            }\n        }\n        throw new U;\n    }, t.processFixedAI = function(e, r, n) {\n        if (n.length < e) throw new U;\n        var o = n.substring(0, e);\n        if (n.length < e + r) throw new U;\n        var i = n.substring(e, e + r), a = n.substring(e + r), u = \"(\" + o + \")\" + i, s = t.parseFieldsInGeneralPurpose(a);\n        return null == s ? u : u + s;\n    }, t.processVariableAI = function(e, r, n) {\n        var o, i = n.substring(0, e);\n        o = n.length < e + r ? n.length : e + r;\n        var a = n.substring(e, o), u = n.substring(o), s = \"(\" + i + \")\" + a, c = t.parseFieldsInGeneralPurpose(u);\n        return null == c ? s : s + c;\n    }, t.VARIABLE_LENGTH = [], t.TWO_DIGIT_DATA_LENGTH = [\n        [\n            \"00\",\n            18\n        ],\n        [\n            \"01\",\n            14\n        ],\n        [\n            \"02\",\n            14\n        ],\n        [\n            \"10\",\n            t.VARIABLE_LENGTH,\n            20\n        ],\n        [\n            \"11\",\n            6\n        ],\n        [\n            \"12\",\n            6\n        ],\n        [\n            \"13\",\n            6\n        ],\n        [\n            \"15\",\n            6\n        ],\n        [\n            \"17\",\n            6\n        ],\n        [\n            \"20\",\n            2\n        ],\n        [\n            \"21\",\n            t.VARIABLE_LENGTH,\n            20\n        ],\n        [\n            \"22\",\n            t.VARIABLE_LENGTH,\n            29\n        ],\n        [\n            \"30\",\n            t.VARIABLE_LENGTH,\n            8\n        ],\n        [\n            \"37\",\n            t.VARIABLE_LENGTH,\n            8\n        ],\n        [\n            \"90\",\n            t.VARIABLE_LENGTH,\n            30\n        ],\n        [\n            \"91\",\n            t.VARIABLE_LENGTH,\n            30\n        ],\n        [\n            \"92\",\n            t.VARIABLE_LENGTH,\n            30\n        ],\n        [\n            \"93\",\n            t.VARIABLE_LENGTH,\n            30\n        ],\n        [\n            \"94\",\n            t.VARIABLE_LENGTH,\n            30\n        ],\n        [\n            \"95\",\n            t.VARIABLE_LENGTH,\n            30\n        ],\n        [\n            \"96\",\n            t.VARIABLE_LENGTH,\n            30\n        ],\n        [\n            \"97\",\n            t.VARIABLE_LENGTH,\n            3\n        ],\n        [\n            \"98\",\n            t.VARIABLE_LENGTH,\n            30\n        ],\n        [\n            \"99\",\n            t.VARIABLE_LENGTH,\n            30\n        ]\n    ], t.THREE_DIGIT_DATA_LENGTH = [\n        [\n            \"240\",\n            t.VARIABLE_LENGTH,\n            30\n        ],\n        [\n            \"241\",\n            t.VARIABLE_LENGTH,\n            30\n        ],\n        [\n            \"242\",\n            t.VARIABLE_LENGTH,\n            6\n        ],\n        [\n            \"250\",\n            t.VARIABLE_LENGTH,\n            30\n        ],\n        [\n            \"251\",\n            t.VARIABLE_LENGTH,\n            30\n        ],\n        [\n            \"253\",\n            t.VARIABLE_LENGTH,\n            17\n        ],\n        [\n            \"254\",\n            t.VARIABLE_LENGTH,\n            20\n        ],\n        [\n            \"400\",\n            t.VARIABLE_LENGTH,\n            30\n        ],\n        [\n            \"401\",\n            t.VARIABLE_LENGTH,\n            30\n        ],\n        [\n            \"402\",\n            17\n        ],\n        [\n            \"403\",\n            t.VARIABLE_LENGTH,\n            30\n        ],\n        [\n            \"410\",\n            13\n        ],\n        [\n            \"411\",\n            13\n        ],\n        [\n            \"412\",\n            13\n        ],\n        [\n            \"413\",\n            13\n        ],\n        [\n            \"414\",\n            13\n        ],\n        [\n            \"420\",\n            t.VARIABLE_LENGTH,\n            20\n        ],\n        [\n            \"421\",\n            t.VARIABLE_LENGTH,\n            15\n        ],\n        [\n            \"422\",\n            3\n        ],\n        [\n            \"423\",\n            t.VARIABLE_LENGTH,\n            15\n        ],\n        [\n            \"424\",\n            3\n        ],\n        [\n            \"425\",\n            3\n        ],\n        [\n            \"426\",\n            3\n        ]\n    ], t.THREE_DIGIT_PLUS_DIGIT_DATA_LENGTH = [\n        [\n            \"310\",\n            6\n        ],\n        [\n            \"311\",\n            6\n        ],\n        [\n            \"312\",\n            6\n        ],\n        [\n            \"313\",\n            6\n        ],\n        [\n            \"314\",\n            6\n        ],\n        [\n            \"315\",\n            6\n        ],\n        [\n            \"316\",\n            6\n        ],\n        [\n            \"320\",\n            6\n        ],\n        [\n            \"321\",\n            6\n        ],\n        [\n            \"322\",\n            6\n        ],\n        [\n            \"323\",\n            6\n        ],\n        [\n            \"324\",\n            6\n        ],\n        [\n            \"325\",\n            6\n        ],\n        [\n            \"326\",\n            6\n        ],\n        [\n            \"327\",\n            6\n        ],\n        [\n            \"328\",\n            6\n        ],\n        [\n            \"329\",\n            6\n        ],\n        [\n            \"330\",\n            6\n        ],\n        [\n            \"331\",\n            6\n        ],\n        [\n            \"332\",\n            6\n        ],\n        [\n            \"333\",\n            6\n        ],\n        [\n            \"334\",\n            6\n        ],\n        [\n            \"335\",\n            6\n        ],\n        [\n            \"336\",\n            6\n        ],\n        [\n            \"340\",\n            6\n        ],\n        [\n            \"341\",\n            6\n        ],\n        [\n            \"342\",\n            6\n        ],\n        [\n            \"343\",\n            6\n        ],\n        [\n            \"344\",\n            6\n        ],\n        [\n            \"345\",\n            6\n        ],\n        [\n            \"346\",\n            6\n        ],\n        [\n            \"347\",\n            6\n        ],\n        [\n            \"348\",\n            6\n        ],\n        [\n            \"349\",\n            6\n        ],\n        [\n            \"350\",\n            6\n        ],\n        [\n            \"351\",\n            6\n        ],\n        [\n            \"352\",\n            6\n        ],\n        [\n            \"353\",\n            6\n        ],\n        [\n            \"354\",\n            6\n        ],\n        [\n            \"355\",\n            6\n        ],\n        [\n            \"356\",\n            6\n        ],\n        [\n            \"357\",\n            6\n        ],\n        [\n            \"360\",\n            6\n        ],\n        [\n            \"361\",\n            6\n        ],\n        [\n            \"362\",\n            6\n        ],\n        [\n            \"363\",\n            6\n        ],\n        [\n            \"364\",\n            6\n        ],\n        [\n            \"365\",\n            6\n        ],\n        [\n            \"366\",\n            6\n        ],\n        [\n            \"367\",\n            6\n        ],\n        [\n            \"368\",\n            6\n        ],\n        [\n            \"369\",\n            6\n        ],\n        [\n            \"390\",\n            t.VARIABLE_LENGTH,\n            15\n        ],\n        [\n            \"391\",\n            t.VARIABLE_LENGTH,\n            18\n        ],\n        [\n            \"392\",\n            t.VARIABLE_LENGTH,\n            15\n        ],\n        [\n            \"393\",\n            t.VARIABLE_LENGTH,\n            18\n        ],\n        [\n            \"703\",\n            t.VARIABLE_LENGTH,\n            30\n        ]\n    ], t.FOUR_DIGIT_DATA_LENGTH = [\n        [\n            \"7001\",\n            13\n        ],\n        [\n            \"7002\",\n            t.VARIABLE_LENGTH,\n            30\n        ],\n        [\n            \"7003\",\n            10\n        ],\n        [\n            \"8001\",\n            14\n        ],\n        [\n            \"8002\",\n            t.VARIABLE_LENGTH,\n            20\n        ],\n        [\n            \"8003\",\n            t.VARIABLE_LENGTH,\n            30\n        ],\n        [\n            \"8004\",\n            t.VARIABLE_LENGTH,\n            30\n        ],\n        [\n            \"8005\",\n            6\n        ],\n        [\n            \"8006\",\n            18\n        ],\n        [\n            \"8007\",\n            t.VARIABLE_LENGTH,\n            30\n        ],\n        [\n            \"8008\",\n            t.VARIABLE_LENGTH,\n            12\n        ],\n        [\n            \"8018\",\n            18\n        ],\n        [\n            \"8020\",\n            t.VARIABLE_LENGTH,\n            25\n        ],\n        [\n            \"8100\",\n            6\n        ],\n        [\n            \"8101\",\n            10\n        ],\n        [\n            \"8102\",\n            2\n        ],\n        [\n            \"8110\",\n            t.VARIABLE_LENGTH,\n            70\n        ],\n        [\n            \"8200\",\n            t.VARIABLE_LENGTH,\n            70\n        ]\n    ], t;\n}(), De = function() {\n    function t(t) {\n        this.buffer = new k, this.information = t;\n    }\n    return t.prototype.decodeAllCodes = function(t, e) {\n        for(var r = e, n = null;;){\n            var o = this.decodeGeneralPurposeField(r, n), i = Ne.parseFieldsInGeneralPurpose(o.getNewString());\n            if (null != i && t.append(i), n = o.isRemaining() ? \"\" + o.getRemainingValue() : null, r === o.getNewPosition()) break;\n            r = o.getNewPosition();\n        }\n        return t.toString();\n    }, t.prototype.isStillNumeric = function(t) {\n        if (t + 7 > this.information.getSize()) return t + 4 <= this.information.getSize();\n        for(var e = t; e < t + 3; ++e)if (this.information.get(e)) return !0;\n        return this.information.get(t + 3);\n    }, t.prototype.decodeNumeric = function(t) {\n        if (t + 7 > this.information.getSize()) {\n            var e = this.extractNumericValueFromBitArray(t, 4);\n            return new be(this.information.getSize(), 0 === e ? be.FNC1 : e - 1, be.FNC1);\n        }\n        var r = this.extractNumericValueFromBitArray(t, 7);\n        return new be(t + 7, (r - 8) / 11, (r - 8) % 11);\n    }, t.prototype.extractNumericValueFromBitArray = function(e, r) {\n        return t.extractNumericValueFromBitArray(this.information, e, r);\n    }, t.extractNumericValueFromBitArray = function(t, e, r) {\n        for(var n = 0, o = 0; o < r; ++o)t.get(e + o) && (n |= 1 << r - o - 1);\n        return n;\n    }, t.prototype.decodeGeneralPurposeField = function(t, e) {\n        this.buffer.setLengthToZero(), null != e && this.buffer.append(e), this.current.setPosition(t);\n        var r = this.parseBlocks();\n        return null != r && r.isRemaining() ? new Oe(this.current.getPosition(), this.buffer.toString(), r.getRemainingValue()) : new Oe(this.current.getPosition(), this.buffer.toString());\n    }, t.prototype.parseBlocks = function() {\n        var t, e;\n        do {\n            var r = this.current.getPosition();\n            if (t = this.current.isAlpha() ? (e = this.parseAlphaBlock()).isFinished() : this.current.isIsoIec646() ? (e = this.parseIsoIec646Block()).isFinished() : (e = this.parseNumericBlock()).isFinished(), !(r !== this.current.getPosition()) && !t) break;\n        }while (!t);\n        return e.getDecodedInformation();\n    }, t.prototype.parseNumericBlock = function() {\n        for(; this.isStillNumeric(this.current.getPosition());){\n            var t = this.decodeNumeric(this.current.getPosition());\n            if (this.current.setPosition(t.getNewPosition()), t.isFirstDigitFNC1()) {\n                var e = void 0;\n                return e = t.isSecondDigitFNC1() ? new Oe(this.current.getPosition(), this.buffer.toString()) : new Oe(this.current.getPosition(), this.buffer.toString(), t.getSecondDigit()), new Ae(!0, e);\n            }\n            if (this.buffer.append(t.getFirstDigit()), t.isSecondDigitFNC1()) {\n                e = new Oe(this.current.getPosition(), this.buffer.toString());\n                return new Ae(!0, e);\n            }\n            this.buffer.append(t.getSecondDigit());\n        }\n        return this.isNumericToAlphaNumericLatch(this.current.getPosition()) && (this.current.setAlpha(), this.current.incrementPosition(4)), new Ae(!1);\n    }, t.prototype.parseIsoIec646Block = function() {\n        for(; this.isStillIsoIec646(this.current.getPosition());){\n            var t = this.decodeIsoIec646(this.current.getPosition());\n            if (this.current.setPosition(t.getNewPosition()), t.isFNC1()) {\n                var e = new Oe(this.current.getPosition(), this.buffer.toString());\n                return new Ae(!0, e);\n            }\n            this.buffer.append(t.getValue());\n        }\n        return this.isAlphaOr646ToNumericLatch(this.current.getPosition()) ? (this.current.incrementPosition(3), this.current.setNumeric()) : this.isAlphaTo646ToAlphaLatch(this.current.getPosition()) && (this.current.getPosition() + 5 < this.information.getSize() ? this.current.incrementPosition(5) : this.current.setPosition(this.information.getSize()), this.current.setAlpha()), new Ae(!1);\n    }, t.prototype.parseAlphaBlock = function() {\n        for(; this.isStillAlpha(this.current.getPosition());){\n            var t = this.decodeAlphanumeric(this.current.getPosition());\n            if (this.current.setPosition(t.getNewPosition()), t.isFNC1()) {\n                var e = new Oe(this.current.getPosition(), this.buffer.toString());\n                return new Ae(!0, e);\n            }\n            this.buffer.append(t.getValue());\n        }\n        return this.isAlphaOr646ToNumericLatch(this.current.getPosition()) ? (this.current.incrementPosition(3), this.current.setNumeric()) : this.isAlphaTo646ToAlphaLatch(this.current.getPosition()) && (this.current.getPosition() + 5 < this.information.getSize() ? this.current.incrementPosition(5) : this.current.setPosition(this.information.getSize()), this.current.setIsoIec646()), new Ae(!1);\n    }, t.prototype.isStillIsoIec646 = function(t) {\n        if (t + 5 > this.information.getSize()) return !1;\n        var e = this.extractNumericValueFromBitArray(t, 5);\n        if (e >= 5 && e < 16) return !0;\n        if (t + 7 > this.information.getSize()) return !1;\n        var r = this.extractNumericValueFromBitArray(t, 7);\n        if (r >= 64 && r < 116) return !0;\n        if (t + 8 > this.information.getSize()) return !1;\n        var n = this.extractNumericValueFromBitArray(t, 8);\n        return n >= 232 && n < 253;\n    }, t.prototype.decodeIsoIec646 = function(t) {\n        var e = this.extractNumericValueFromBitArray(t, 5);\n        if (15 === e) return new Ie(t + 5, Ie.FNC1);\n        if (e >= 5 && e < 15) return new Ie(t + 5, \"0\" + (e - 5));\n        var r, n = this.extractNumericValueFromBitArray(t, 7);\n        if (n >= 64 && n < 90) return new Ie(t + 7, \"\" + (n + 1));\n        if (n >= 90 && n < 116) return new Ie(t + 7, \"\" + (n + 7));\n        switch(this.extractNumericValueFromBitArray(t, 8)){\n            case 232:\n                r = \"!\";\n                break;\n            case 233:\n                r = '\"';\n                break;\n            case 234:\n                r = \"%\";\n                break;\n            case 235:\n                r = \"&\";\n                break;\n            case 236:\n                r = \"'\";\n                break;\n            case 237:\n                r = \"(\";\n                break;\n            case 238:\n                r = \")\";\n                break;\n            case 239:\n                r = \"*\";\n                break;\n            case 240:\n                r = \"+\";\n                break;\n            case 241:\n                r = \",\";\n                break;\n            case 242:\n                r = \"-\";\n                break;\n            case 243:\n                r = \".\";\n                break;\n            case 244:\n                r = \"/\";\n                break;\n            case 245:\n                r = \":\";\n                break;\n            case 246:\n                r = \";\";\n                break;\n            case 247:\n                r = \"<\";\n                break;\n            case 248:\n                r = \"=\";\n                break;\n            case 249:\n                r = \">\";\n                break;\n            case 250:\n                r = \"?\";\n                break;\n            case 251:\n                r = \"_\";\n                break;\n            case 252:\n                r = \" \";\n                break;\n            default:\n                throw new R;\n        }\n        return new Ie(t + 8, r);\n    }, t.prototype.isStillAlpha = function(t) {\n        if (t + 5 > this.information.getSize()) return !1;\n        var e = this.extractNumericValueFromBitArray(t, 5);\n        if (e >= 5 && e < 16) return !0;\n        if (t + 6 > this.information.getSize()) return !1;\n        var r = this.extractNumericValueFromBitArray(t, 6);\n        return r >= 16 && r < 63;\n    }, t.prototype.decodeAlphanumeric = function(t) {\n        var e = this.extractNumericValueFromBitArray(t, 5);\n        if (15 === e) return new Ie(t + 5, Ie.FNC1);\n        if (e >= 5 && e < 15) return new Ie(t + 5, \"0\" + (e - 5));\n        var r, n = this.extractNumericValueFromBitArray(t, 6);\n        if (n >= 32 && n < 58) return new Ie(t + 6, \"\" + (n + 33));\n        switch(n){\n            case 58:\n                r = \"*\";\n                break;\n            case 59:\n                r = \",\";\n                break;\n            case 60:\n                r = \"-\";\n                break;\n            case 61:\n                r = \".\";\n                break;\n            case 62:\n                r = \"/\";\n                break;\n            default:\n                throw new yt(\"Decoding invalid alphanumeric value: \" + n);\n        }\n        return new Ie(t + 6, r);\n    }, t.prototype.isAlphaTo646ToAlphaLatch = function(t) {\n        if (t + 1 > this.information.getSize()) return !1;\n        for(var e = 0; e < 5 && e + t < this.information.getSize(); ++e)if (2 === e) {\n            if (!this.information.get(t + 2)) return !1;\n        } else if (this.information.get(t + e)) return !1;\n        return !0;\n    }, t.prototype.isAlphaOr646ToNumericLatch = function(t) {\n        if (t + 3 > this.information.getSize()) return !1;\n        for(var e = t; e < t + 3; ++e)if (this.information.get(e)) return !1;\n        return !0;\n    }, t.prototype.isNumericToAlphaNumericLatch = function(t) {\n        if (t + 1 > this.information.getSize()) return !1;\n        for(var e = 0; e < 4 && e + t < this.information.getSize(); ++e)if (this.information.get(t + e)) return !1;\n        return !0;\n    }, t;\n}(), Pe = function() {\n    function t(t) {\n        this.information = t, this.generalDecoder = new De(t);\n    }\n    return t.prototype.getInformation = function() {\n        return this.information;\n    }, t.prototype.getGeneralDecoder = function() {\n        return this.generalDecoder;\n    }, t;\n}(), Me = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), Be = function(t) {\n    function e(e) {\n        return t.call(this, e) || this;\n    }\n    return Me(e, t), e.prototype.encodeCompressedGtin = function(t, e) {\n        t.append(\"(01)\");\n        var r = t.length();\n        t.append(\"9\"), this.encodeCompressedGtinWithoutAI(t, e, r);\n    }, e.prototype.encodeCompressedGtinWithoutAI = function(t, r, n) {\n        for(var o = 0; o < 4; ++o){\n            var i = this.getGeneralDecoder().extractNumericValueFromBitArray(r + 10 * o, 10);\n            i / 100 == 0 && t.append(\"0\"), i / 10 == 0 && t.append(\"0\"), t.append(i);\n        }\n        e.appendCheckDigit(t, n);\n    }, e.appendCheckDigit = function(t, e) {\n        for(var r = 0, n = 0; n < 13; n++){\n            var o = t.charAt(n + e).charCodeAt(0) - \"0\".charCodeAt(0);\n            r += 0 == (1 & n) ? 3 * o : o;\n        }\n        10 === (r = 10 - r % 10) && (r = 0), t.append(r);\n    }, e.GTIN_SIZE = 40, e;\n}(Pe), Le = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), Fe = function(t) {\n    function e(e) {\n        return t.call(this, e) || this;\n    }\n    return Le(e, t), e.prototype.parseInformation = function() {\n        var t = new k;\n        t.append(\"(01)\");\n        var r = t.length(), n = this.getGeneralDecoder().extractNumericValueFromBitArray(e.HEADER_SIZE, 4);\n        return t.append(n), this.encodeCompressedGtinWithoutAI(t, e.HEADER_SIZE + 4, r), this.getGeneralDecoder().decodeAllCodes(t, e.HEADER_SIZE + 44);\n    }, e.HEADER_SIZE = 4, e;\n}(Be), ke = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), xe = function(t) {\n    function e(e) {\n        return t.call(this, e) || this;\n    }\n    return ke(e, t), e.prototype.parseInformation = function() {\n        var t = new k;\n        return this.getGeneralDecoder().decodeAllCodes(t, e.HEADER_SIZE);\n    }, e.HEADER_SIZE = 5, e;\n}(Pe), Ve = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), Ue = function(t) {\n    function e(e) {\n        return t.call(this, e) || this;\n    }\n    return Ve(e, t), e.prototype.encodeCompressedWeight = function(t, e, r) {\n        var n = this.getGeneralDecoder().extractNumericValueFromBitArray(e, r);\n        this.addWeightCode(t, n);\n        for(var o = this.checkWeight(n), i = 1e5, a = 0; a < 5; ++a)o / i == 0 && t.append(\"0\"), i /= 10;\n        t.append(o);\n    }, e;\n}(Be), He = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), Ge = function(t) {\n    function e(e) {\n        return t.call(this, e) || this;\n    }\n    return He(e, t), e.prototype.parseInformation = function() {\n        if (this.getInformation().getSize() != e.HEADER_SIZE + Ue.GTIN_SIZE + e.WEIGHT_SIZE) throw new U;\n        var t = new k;\n        return this.encodeCompressedGtin(t, e.HEADER_SIZE), this.encodeCompressedWeight(t, e.HEADER_SIZE + Ue.GTIN_SIZE, e.WEIGHT_SIZE), t.toString();\n    }, e.HEADER_SIZE = 5, e.WEIGHT_SIZE = 15, e;\n}(Ue), Xe = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), We = function(t) {\n    function e(e) {\n        return t.call(this, e) || this;\n    }\n    return Xe(e, t), e.prototype.addWeightCode = function(t, e) {\n        t.append(\"(3103)\");\n    }, e.prototype.checkWeight = function(t) {\n        return t;\n    }, e;\n}(Ge), je = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), ze = function(t) {\n    function e(e) {\n        return t.call(this, e) || this;\n    }\n    return je(e, t), e.prototype.addWeightCode = function(t, e) {\n        e < 1e4 ? t.append(\"(3202)\") : t.append(\"(3203)\");\n    }, e.prototype.checkWeight = function(t) {\n        return t < 1e4 ? t : t - 1e4;\n    }, e;\n}(Ge), Ye = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), Ze = function(t) {\n    function e(e) {\n        return t.call(this, e) || this;\n    }\n    return Ye(e, t), e.prototype.parseInformation = function() {\n        if (this.getInformation().getSize() < e.HEADER_SIZE + Be.GTIN_SIZE) throw new U;\n        var t = new k;\n        this.encodeCompressedGtin(t, e.HEADER_SIZE);\n        var r = this.getGeneralDecoder().extractNumericValueFromBitArray(e.HEADER_SIZE + Be.GTIN_SIZE, e.LAST_DIGIT_SIZE);\n        t.append(\"(392\"), t.append(r), t.append(\")\");\n        var n = this.getGeneralDecoder().decodeGeneralPurposeField(e.HEADER_SIZE + Be.GTIN_SIZE + e.LAST_DIGIT_SIZE, null);\n        return t.append(n.getNewString()), t.toString();\n    }, e.HEADER_SIZE = 8, e.LAST_DIGIT_SIZE = 2, e;\n}(Be), Ke = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), qe = function(t) {\n    function e(e) {\n        return t.call(this, e) || this;\n    }\n    return Ke(e, t), e.prototype.parseInformation = function() {\n        if (this.getInformation().getSize() < e.HEADER_SIZE + Be.GTIN_SIZE) throw new U;\n        var t = new k;\n        this.encodeCompressedGtin(t, e.HEADER_SIZE);\n        var r = this.getGeneralDecoder().extractNumericValueFromBitArray(e.HEADER_SIZE + Be.GTIN_SIZE, e.LAST_DIGIT_SIZE);\n        t.append(\"(393\"), t.append(r), t.append(\")\");\n        var n = this.getGeneralDecoder().extractNumericValueFromBitArray(e.HEADER_SIZE + Be.GTIN_SIZE + e.LAST_DIGIT_SIZE, e.FIRST_THREE_DIGITS_SIZE);\n        n / 100 == 0 && t.append(\"0\"), n / 10 == 0 && t.append(\"0\"), t.append(n);\n        var o = this.getGeneralDecoder().decodeGeneralPurposeField(e.HEADER_SIZE + Be.GTIN_SIZE + e.LAST_DIGIT_SIZE + e.FIRST_THREE_DIGITS_SIZE, null);\n        return t.append(o.getNewString()), t.toString();\n    }, e.HEADER_SIZE = 8, e.LAST_DIGIT_SIZE = 2, e.FIRST_THREE_DIGITS_SIZE = 10, e;\n}(Be), Qe = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), Je = function(t) {\n    function e(e, r, n) {\n        var o = t.call(this, e) || this;\n        return o.dateCode = n, o.firstAIdigits = r, o;\n    }\n    return Qe(e, t), e.prototype.parseInformation = function() {\n        if (this.getInformation().getSize() != e.HEADER_SIZE + e.GTIN_SIZE + e.WEIGHT_SIZE + e.DATE_SIZE) throw new U;\n        var t = new k;\n        return this.encodeCompressedGtin(t, e.HEADER_SIZE), this.encodeCompressedWeight(t, e.HEADER_SIZE + e.GTIN_SIZE, e.WEIGHT_SIZE), this.encodeCompressedDate(t, e.HEADER_SIZE + e.GTIN_SIZE + e.WEIGHT_SIZE), t.toString();\n    }, e.prototype.encodeCompressedDate = function(t, r) {\n        var n = this.getGeneralDecoder().extractNumericValueFromBitArray(r, e.DATE_SIZE);\n        if (38400 != n) {\n            t.append(\"(\"), t.append(this.dateCode), t.append(\")\");\n            var o = n % 32, i = (n /= 32) % 12 + 1, a = n /= 12;\n            a / 10 == 0 && t.append(\"0\"), t.append(a), i / 10 == 0 && t.append(\"0\"), t.append(i), o / 10 == 0 && t.append(\"0\"), t.append(o);\n        }\n    }, e.prototype.addWeightCode = function(t, e) {\n        t.append(\"(\"), t.append(this.firstAIdigits), t.append(e / 1e5), t.append(\")\");\n    }, e.prototype.checkWeight = function(t) {\n        return t % 1e5;\n    }, e.HEADER_SIZE = 8, e.WEIGHT_SIZE = 20, e.DATE_SIZE = 16, e;\n}(Ue);\nvar $e = function() {\n    function t(t, e, r, n) {\n        this.leftchar = t, this.rightchar = e, this.finderpattern = r, this.maybeLast = n;\n    }\n    return t.prototype.mayBeLast = function() {\n        return this.maybeLast;\n    }, t.prototype.getLeftChar = function() {\n        return this.leftchar;\n    }, t.prototype.getRightChar = function() {\n        return this.rightchar;\n    }, t.prototype.getFinderPattern = function() {\n        return this.finderpattern;\n    }, t.prototype.mustBeLast = function() {\n        return null == this.rightchar;\n    }, t.prototype.toString = function() {\n        return \"[ \" + this.leftchar + \", \" + this.rightchar + \" : \" + (null == this.finderpattern ? \"null\" : this.finderpattern.getValue()) + \" ]\";\n    }, t.equals = function(e, r) {\n        return e instanceof t && t.equalsOrNull(e.leftchar, r.leftchar) && t.equalsOrNull(e.rightchar, r.rightchar) && t.equalsOrNull(e.finderpattern, r.finderpattern);\n    }, t.equalsOrNull = function(e, r) {\n        return null === e ? null === r : t.equals(e, r);\n    }, t.prototype.hashCode = function() {\n        return this.leftchar.getValue() ^ this.rightchar.getValue() ^ this.finderpattern.getValue();\n    }, t;\n}(), tr = function() {\n    function t(t, e, r) {\n        this.pairs = t, this.rowNumber = e, this.wasReversed = r;\n    }\n    return t.prototype.getPairs = function() {\n        return this.pairs;\n    }, t.prototype.getRowNumber = function() {\n        return this.rowNumber;\n    }, t.prototype.isReversed = function() {\n        return this.wasReversed;\n    }, t.prototype.isEquivalent = function(t) {\n        return this.checkEqualitity(this, t);\n    }, t.prototype.toString = function() {\n        return \"{ \" + this.pairs + \" }\";\n    }, t.prototype.equals = function(e, r) {\n        return e instanceof t && this.checkEqualitity(e, r) && e.wasReversed === r.wasReversed;\n    }, t.prototype.checkEqualitity = function(t, e) {\n        var r;\n        if (t && e) return t.forEach(function(t, n) {\n            e.forEach(function(e) {\n                t.getLeftChar().getValue() === e.getLeftChar().getValue() && t.getRightChar().getValue() === e.getRightChar().getValue() && t.getFinderPatter().getValue() === e.getFinderPatter().getValue() && (r = !0);\n            });\n        }), r;\n    }, t;\n}(), er = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), rr = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, nr = function(t) {\n    function e() {\n        var r = null !== t && t.apply(this, arguments) || this;\n        return r.pairs = new Array(e.MAX_PAIRS), r.rows = new Array, r.startEnd = [\n            2\n        ], r;\n    }\n    return er(e, t), e.prototype.decodeRow = function(t, r, n) {\n        this.pairs.length = 0, this.startFromEven = !1;\n        try {\n            return e.constructResult(this.decodeRow2pairs(t, r));\n        } catch (t) {}\n        return this.pairs.length = 0, this.startFromEven = !0, e.constructResult(this.decodeRow2pairs(t, r));\n    }, e.prototype.reset = function() {\n        this.pairs.length = 0, this.rows.length = 0;\n    }, e.prototype.decodeRow2pairs = function(t, e) {\n        for(var r, n = !1; !n;)try {\n            this.pairs.push(this.retrieveNextPair(e, this.pairs, t));\n        } catch (t) {\n            if (t instanceof U) {\n                if (!this.pairs.length) throw new U;\n                n = !0;\n            }\n        }\n        if (this.checkChecksum()) return this.pairs;\n        if (r = !!this.rows.length, this.storeRow(t, !1), r) {\n            var o = this.checkRowsBoolean(!1);\n            if (null != o) return o;\n            if (null != (o = this.checkRowsBoolean(!0))) return o;\n        }\n        throw new U;\n    }, e.prototype.checkRowsBoolean = function(t) {\n        if (this.rows.length > 25) return this.rows.length = 0, null;\n        this.pairs.length = 0, t && (this.rows = this.rows.reverse());\n        var e = null;\n        try {\n            e = this.checkRows(new Array, 0);\n        } catch (t) {\n            console.log(t);\n        }\n        return t && (this.rows = this.rows.reverse()), e;\n    }, e.prototype.checkRows = function(t, r) {\n        for(var n, o, i = r; i < this.rows.length; i++){\n            var a = this.rows[i];\n            this.pairs.length = 0;\n            try {\n                for(var u = (n = void 0, rr(t)), s = u.next(); !s.done; s = u.next()){\n                    var c = s.value;\n                    this.pairs.push(c.getPairs());\n                }\n            } catch (t) {\n                n = {\n                    error: t\n                };\n            } finally{\n                try {\n                    s && !s.done && (o = u.return) && o.call(u);\n                } finally{\n                    if (n) throw n.error;\n                }\n            }\n            if (this.pairs.push(a.getPairs()), e.isValidSequence(this.pairs)) {\n                if (this.checkChecksum()) return this.pairs;\n                var f = new Array(t);\n                f.push(a);\n                try {\n                    return this.checkRows(f, i + 1);\n                } catch (t) {\n                    console.log(t);\n                }\n            }\n        }\n        throw new U;\n    }, e.isValidSequence = function(t) {\n        var r, n;\n        try {\n            for(var o = rr(e.FINDER_PATTERN_SEQUENCES), i = o.next(); !i.done; i = o.next()){\n                var a = i.value;\n                if (!(t.length > a.length)) {\n                    for(var u = !0, s = 0; s < t.length; s++)if (t[s].getFinderPattern().getValue() != a[s]) {\n                        u = !1;\n                        break;\n                    }\n                    if (u) return !0;\n                }\n            }\n        } catch (t) {\n            r = {\n                error: t\n            };\n        } finally{\n            try {\n                i && !i.done && (n = o.return) && n.call(o);\n            } finally{\n                if (r) throw r.error;\n            }\n        }\n        return !1;\n    }, e.prototype.storeRow = function(t, r) {\n        for(var n = 0, o = !1, i = !1; n < this.rows.length;){\n            var a = this.rows[n];\n            if (a.getRowNumber() > t) {\n                i = a.isEquivalent(this.pairs);\n                break;\n            }\n            o = a.isEquivalent(this.pairs), n++;\n        }\n        i || o || e.isPartialRow(this.pairs, this.rows) || (this.rows.push(n, new tr(this.pairs, t, r)), this.removePartialRows(this.pairs, this.rows));\n    }, e.prototype.removePartialRows = function(t, e) {\n        var r, n, o, i, a, u;\n        try {\n            for(var s = rr(e), c = s.next(); !c.done; c = s.next()){\n                var f = c.value;\n                if (f.getPairs().length !== t.length) {\n                    try {\n                        for(var h = (o = void 0, rr(f.getPairs())), l = h.next(); !l.done; l = h.next()){\n                            var d = l.value, p = !1;\n                            try {\n                                for(var g = (a = void 0, rr(t)), y = g.next(); !y.done; y = g.next()){\n                                    var w = y.value;\n                                    if ($e.equals(d, w)) {\n                                        p = !0;\n                                        break;\n                                    }\n                                }\n                            } catch (t) {\n                                a = {\n                                    error: t\n                                };\n                            } finally{\n                                try {\n                                    y && !y.done && (u = g.return) && u.call(g);\n                                } finally{\n                                    if (a) throw a.error;\n                                }\n                            }\n                            p || !1;\n                        }\n                    } catch (t) {\n                        o = {\n                            error: t\n                        };\n                    } finally{\n                        try {\n                            l && !l.done && (i = h.return) && i.call(h);\n                        } finally{\n                            if (o) throw o.error;\n                        }\n                    }\n                }\n            }\n        } catch (t) {\n            r = {\n                error: t\n            };\n        } finally{\n            try {\n                c && !c.done && (n = s.return) && n.call(s);\n            } finally{\n                if (r) throw r.error;\n            }\n        }\n    }, e.isPartialRow = function(t, e) {\n        var r, n, o, i, a, u;\n        try {\n            for(var s = rr(e), c = s.next(); !c.done; c = s.next()){\n                var f = c.value, h = !0;\n                try {\n                    for(var l = (o = void 0, rr(t)), d = l.next(); !d.done; d = l.next()){\n                        var p = d.value, g = !1;\n                        try {\n                            for(var y = (a = void 0, rr(f.getPairs())), w = y.next(); !w.done; w = y.next()){\n                                var _ = w.value;\n                                if (p.equals(_)) {\n                                    g = !0;\n                                    break;\n                                }\n                            }\n                        } catch (t) {\n                            a = {\n                                error: t\n                            };\n                        } finally{\n                            try {\n                                w && !w.done && (u = y.return) && u.call(y);\n                            } finally{\n                                if (a) throw a.error;\n                            }\n                        }\n                        if (!g) {\n                            h = !1;\n                            break;\n                        }\n                    }\n                } catch (t) {\n                    o = {\n                        error: t\n                    };\n                } finally{\n                    try {\n                        d && !d.done && (i = l.return) && i.call(l);\n                    } finally{\n                        if (o) throw o.error;\n                    }\n                }\n                if (h) return !0;\n            }\n        } catch (t) {\n            r = {\n                error: t\n            };\n        } finally{\n            try {\n                c && !c.done && (n = s.return) && n.call(s);\n            } finally{\n                if (r) throw r.error;\n            }\n        }\n        return !1;\n    }, e.prototype.getRows = function() {\n        return this.rows;\n    }, e.constructResult = function(t) {\n        var e = (function(t) {\n            try {\n                if (t.get(1)) return new Fe(t);\n                if (!t.get(2)) return new xe(t);\n                switch(De.extractNumericValueFromBitArray(t, 1, 4)){\n                    case 4:\n                        return new We(t);\n                    case 5:\n                        return new ze(t);\n                }\n                switch(De.extractNumericValueFromBitArray(t, 1, 5)){\n                    case 12:\n                        return new Ze(t);\n                    case 13:\n                        return new qe(t);\n                }\n                switch(De.extractNumericValueFromBitArray(t, 1, 7)){\n                    case 56:\n                        return new Je(t, \"310\", \"11\");\n                    case 57:\n                        return new Je(t, \"320\", \"11\");\n                    case 58:\n                        return new Je(t, \"310\", \"13\");\n                    case 59:\n                        return new Je(t, \"320\", \"13\");\n                    case 60:\n                        return new Je(t, \"310\", \"15\");\n                    case 61:\n                        return new Je(t, \"320\", \"15\");\n                    case 62:\n                        return new Je(t, \"310\", \"17\");\n                    case 63:\n                        return new Je(t, \"320\", \"17\");\n                }\n            } catch (e) {\n                throw console.log(e), new yt(\"unknown decoder: \" + t);\n            }\n        })(me.buildBitArray(t)).parseInformation(), r = t[0].getFinderPattern().getResultPoints(), n = t[t.length - 1].getFinderPattern().getResultPoints(), o = [\n            r[0],\n            r[1],\n            n[0],\n            n[1]\n        ];\n        return new et(e, null, null, o, nt.RSS_EXPANDED, null);\n    }, e.prototype.checkChecksum = function() {\n        var t = this.pairs.get(0), e = t.getLeftChar(), r = t.getRightChar();\n        if (null == r) return !1;\n        for(var n = r.getChecksumPortion(), o = 2, i = 1; i < this.pairs.size(); ++i){\n            var a = this.pairs.get(i);\n            n += a.getLeftChar().getChecksumPortion(), o++;\n            var u = a.getRightChar();\n            null != u && (n += u.getChecksumPortion(), o++);\n        }\n        return 211 * (o - 4) + (n %= 211) == e.getValue();\n    }, e.getNextSecondBar = function(t, e) {\n        var r;\n        return t.get(e) ? (r = t.getNextUnset(e), r = t.getNextSet(r)) : (r = t.getNextSet(e), r = t.getNextUnset(r)), r;\n    }, e.prototype.retrieveNextPair = function(t, r, n) {\n        var o, i = r.length % 2 == 0;\n        this.startFromEven && (i = !i);\n        var a = !0, u = -1;\n        do {\n            this.findNextPair(t, r, u), null == (o = this.parseFoundFinderPattern(t, n, i)) ? u = e.getNextSecondBar(t, this.startEnd[0]) : a = !1;\n        }while (a);\n        var s, c = this.decodeDataCharacter(t, o, i, !0);\n        if (!this.isEmptyPair(r) && r[r.length - 1].mustBeLast()) throw new U;\n        try {\n            s = this.decodeDataCharacter(t, o, i, !1);\n        } catch (t) {\n            s = null, console.log(t);\n        }\n        return new $e(c, s, o, !0);\n    }, e.prototype.isEmptyPair = function(t) {\n        return 0 === t.length;\n    }, e.prototype.findNextPair = function(t, r, n) {\n        var o = this.getDecodeFinderCounters();\n        o[0] = 0, o[1] = 0, o[2] = 0, o[3] = 0;\n        var i, a = t.getSize();\n        if (n >= 0) i = n;\n        else if (this.isEmptyPair(r)) i = 0;\n        else {\n            i = r[r.length - 1].getFinderPattern().getStartEnd()[1];\n        }\n        var u = r.length % 2 != 0;\n        this.startFromEven && (u = !u);\n        for(var s = !1; i < a && (s = !t.get(i));)i++;\n        for(var c = 0, f = i, h = i; h < a; h++)if (t.get(h) != s) o[c]++;\n        else {\n            if (3 == c) {\n                if (u && e.reverseCounters(o), e.isFinderPattern(o)) return this.startEnd[0] = f, void (this.startEnd[1] = h);\n                u && e.reverseCounters(o), f += o[0] + o[1], o[0] = o[2], o[1] = o[3], o[2] = 0, o[3] = 0, c--;\n            } else c++;\n            o[c] = 1, s = !s;\n        }\n        throw new U;\n    }, e.reverseCounters = function(t) {\n        for(var e = t.length, r = 0; r < e / 2; ++r){\n            var n = t[r];\n            t[r] = t[e - r - 1], t[e - r - 1] = n;\n        }\n    }, e.prototype.parseFoundFinderPattern = function(t, r, n) {\n        var o, i, a;\n        if (n) {\n            for(var u = this.startEnd[0] - 1; u >= 0 && !t.get(u);)u--;\n            u++, o = this.startEnd[0] - u, i = u, a = this.startEnd[1];\n        } else i = this.startEnd[0], o = (a = t.getNextUnset(this.startEnd[1] + 1)) - this.startEnd[1];\n        var s, c = this.getDecodeFinderCounters();\n        w.arraycopy(c, 0, c, 1, c.length - 1), c[0] = o;\n        try {\n            s = this.parseFinderValue(c, e.FINDER_PATTERNS);\n        } catch (t) {\n            return null;\n        }\n        return new we(s, [\n            i,\n            a\n        ], i, a, r);\n    }, e.prototype.decodeDataCharacter = function(t, r, n, o) {\n        for(var i = this.getDataCharacterCounters(), a = 0; a < i.length; a++)i[a] = 0;\n        if (o) e.recordPatternInReverse(t, r.getStartEnd()[0], i);\n        else {\n            e.recordPattern(t, r.getStartEnd()[1], i);\n            for(var u = 0, s = i.length - 1; u < s; u++, s--){\n                var c = i[u];\n                i[u] = i[s], i[s] = c;\n            }\n        }\n        var f = vt.sum(new Int32Array(i)) / 17, h = (r.getStartEnd()[1] - r.getStartEnd()[0]) / 15;\n        if (Math.abs(f - h) / h > .3) throw new U;\n        var l = this.getOddCounts(), d = this.getEvenCounts(), p = this.getOddRoundingErrors(), g = this.getEvenRoundingErrors();\n        for(u = 0; u < i.length; u++){\n            var y = 1 * i[u] / f, w = y + .5;\n            if (w < 1) {\n                if (y < .3) throw new U;\n                w = 1;\n            } else if (w > 8) {\n                if (y > 8.7) throw new U;\n                w = 8;\n            }\n            var _ = u / 2;\n            0 == (1 & u) ? (l[_] = w, p[_] = y - w) : (d[_] = w, g[_] = y - w);\n        }\n        this.adjustOddEvenCounts(17);\n        var v = 4 * r.getValue() + (n ? 0 : 2) + (o ? 0 : 1) - 1, m = 0, A = 0;\n        for(u = l.length - 1; u >= 0; u--){\n            if (e.isNotA1left(r, n, o)) {\n                var E = e.WEIGHTS[v][2 * u];\n                A += l[u] * E;\n            }\n            m += l[u];\n        }\n        var C = 0;\n        for(u = d.length - 1; u >= 0; u--)if (e.isNotA1left(r, n, o)) {\n            E = e.WEIGHTS[v][2 * u + 1];\n            C += d[u] * E;\n        }\n        var I = A + C;\n        if (0 != (1 & m) || m > 13 || m < 4) throw new U;\n        var S = (13 - m) / 2, O = e.SYMBOL_WIDEST[S], T = 9 - O, b = ve.getRSSvalue(l, O, !0), R = ve.getRSSvalue(d, T, !1), N = e.EVEN_TOTAL_SUBSET[S], D = e.GSUM[S];\n        return new ye(b * N + R + D, I);\n    }, e.isNotA1left = function(t, e, r) {\n        return !(0 == t.getValue() && e && r);\n    }, e.prototype.adjustOddEvenCounts = function(t) {\n        var r = vt.sum(new Int32Array(this.getOddCounts())), n = vt.sum(new Int32Array(this.getEvenCounts())), o = !1, i = !1;\n        r > 13 ? i = !0 : r < 4 && (o = !0);\n        var a = !1, u = !1;\n        n > 13 ? u = !0 : n < 4 && (a = !0);\n        var s = r + n - t, c = 1 == (1 & r), f = 0 == (1 & n);\n        if (1 == s) if (c) {\n            if (f) throw new U;\n            i = !0;\n        } else {\n            if (!f) throw new U;\n            u = !0;\n        }\n        else if (-1 == s) if (c) {\n            if (f) throw new U;\n            o = !0;\n        } else {\n            if (!f) throw new U;\n            a = !0;\n        }\n        else {\n            if (0 != s) throw new U;\n            if (c) {\n                if (!f) throw new U;\n                r < n ? (o = !0, u = !0) : (i = !0, a = !0);\n            } else if (f) throw new U;\n        }\n        if (o) {\n            if (i) throw new U;\n            e.increment(this.getOddCounts(), this.getOddRoundingErrors());\n        }\n        if (i && e.decrement(this.getOddCounts(), this.getOddRoundingErrors()), a) {\n            if (u) throw new U;\n            e.increment(this.getEvenCounts(), this.getOddRoundingErrors());\n        }\n        u && e.decrement(this.getEvenCounts(), this.getEvenRoundingErrors());\n    }, e.SYMBOL_WIDEST = [\n        7,\n        5,\n        4,\n        3,\n        1\n    ], e.EVEN_TOTAL_SUBSET = [\n        4,\n        20,\n        52,\n        104,\n        204\n    ], e.GSUM = [\n        0,\n        348,\n        1388,\n        2948,\n        3988\n    ], e.FINDER_PATTERNS = [\n        Int32Array.from([\n            1,\n            8,\n            4,\n            1\n        ]),\n        Int32Array.from([\n            3,\n            6,\n            4,\n            1\n        ]),\n        Int32Array.from([\n            3,\n            4,\n            6,\n            1\n        ]),\n        Int32Array.from([\n            3,\n            2,\n            8,\n            1\n        ]),\n        Int32Array.from([\n            2,\n            6,\n            5,\n            1\n        ]),\n        Int32Array.from([\n            2,\n            2,\n            9,\n            1\n        ])\n    ], e.WEIGHTS = [\n        [\n            1,\n            3,\n            9,\n            27,\n            81,\n            32,\n            96,\n            77\n        ],\n        [\n            20,\n            60,\n            180,\n            118,\n            143,\n            7,\n            21,\n            63\n        ],\n        [\n            189,\n            145,\n            13,\n            39,\n            117,\n            140,\n            209,\n            205\n        ],\n        [\n            193,\n            157,\n            49,\n            147,\n            19,\n            57,\n            171,\n            91\n        ],\n        [\n            62,\n            186,\n            136,\n            197,\n            169,\n            85,\n            44,\n            132\n        ],\n        [\n            185,\n            133,\n            188,\n            142,\n            4,\n            12,\n            36,\n            108\n        ],\n        [\n            113,\n            128,\n            173,\n            97,\n            80,\n            29,\n            87,\n            50\n        ],\n        [\n            150,\n            28,\n            84,\n            41,\n            123,\n            158,\n            52,\n            156\n        ],\n        [\n            46,\n            138,\n            203,\n            187,\n            139,\n            206,\n            196,\n            166\n        ],\n        [\n            76,\n            17,\n            51,\n            153,\n            37,\n            111,\n            122,\n            155\n        ],\n        [\n            43,\n            129,\n            176,\n            106,\n            107,\n            110,\n            119,\n            146\n        ],\n        [\n            16,\n            48,\n            144,\n            10,\n            30,\n            90,\n            59,\n            177\n        ],\n        [\n            109,\n            116,\n            137,\n            200,\n            178,\n            112,\n            125,\n            164\n        ],\n        [\n            70,\n            210,\n            208,\n            202,\n            184,\n            130,\n            179,\n            115\n        ],\n        [\n            134,\n            191,\n            151,\n            31,\n            93,\n            68,\n            204,\n            190\n        ],\n        [\n            148,\n            22,\n            66,\n            198,\n            172,\n            94,\n            71,\n            2\n        ],\n        [\n            6,\n            18,\n            54,\n            162,\n            64,\n            192,\n            154,\n            40\n        ],\n        [\n            120,\n            149,\n            25,\n            75,\n            14,\n            42,\n            126,\n            167\n        ],\n        [\n            79,\n            26,\n            78,\n            23,\n            69,\n            207,\n            199,\n            175\n        ],\n        [\n            103,\n            98,\n            83,\n            38,\n            114,\n            131,\n            182,\n            124\n        ],\n        [\n            161,\n            61,\n            183,\n            127,\n            170,\n            88,\n            53,\n            159\n        ],\n        [\n            55,\n            165,\n            73,\n            8,\n            24,\n            72,\n            5,\n            15\n        ],\n        [\n            45,\n            135,\n            194,\n            160,\n            58,\n            174,\n            100,\n            89\n        ]\n    ], e.FINDER_PAT_A = 0, e.FINDER_PAT_B = 1, e.FINDER_PAT_C = 2, e.FINDER_PAT_D = 3, e.FINDER_PAT_E = 4, e.FINDER_PAT_F = 5, e.FINDER_PATTERN_SEQUENCES = [\n        [\n            e.FINDER_PAT_A,\n            e.FINDER_PAT_A\n        ],\n        [\n            e.FINDER_PAT_A,\n            e.FINDER_PAT_B,\n            e.FINDER_PAT_B\n        ],\n        [\n            e.FINDER_PAT_A,\n            e.FINDER_PAT_C,\n            e.FINDER_PAT_B,\n            e.FINDER_PAT_D\n        ],\n        [\n            e.FINDER_PAT_A,\n            e.FINDER_PAT_E,\n            e.FINDER_PAT_B,\n            e.FINDER_PAT_D,\n            e.FINDER_PAT_C\n        ],\n        [\n            e.FINDER_PAT_A,\n            e.FINDER_PAT_E,\n            e.FINDER_PAT_B,\n            e.FINDER_PAT_D,\n            e.FINDER_PAT_D,\n            e.FINDER_PAT_F\n        ],\n        [\n            e.FINDER_PAT_A,\n            e.FINDER_PAT_E,\n            e.FINDER_PAT_B,\n            e.FINDER_PAT_D,\n            e.FINDER_PAT_E,\n            e.FINDER_PAT_F,\n            e.FINDER_PAT_F\n        ],\n        [\n            e.FINDER_PAT_A,\n            e.FINDER_PAT_A,\n            e.FINDER_PAT_B,\n            e.FINDER_PAT_B,\n            e.FINDER_PAT_C,\n            e.FINDER_PAT_C,\n            e.FINDER_PAT_D,\n            e.FINDER_PAT_D\n        ],\n        [\n            e.FINDER_PAT_A,\n            e.FINDER_PAT_A,\n            e.FINDER_PAT_B,\n            e.FINDER_PAT_B,\n            e.FINDER_PAT_C,\n            e.FINDER_PAT_C,\n            e.FINDER_PAT_D,\n            e.FINDER_PAT_E,\n            e.FINDER_PAT_E\n        ],\n        [\n            e.FINDER_PAT_A,\n            e.FINDER_PAT_A,\n            e.FINDER_PAT_B,\n            e.FINDER_PAT_B,\n            e.FINDER_PAT_C,\n            e.FINDER_PAT_C,\n            e.FINDER_PAT_D,\n            e.FINDER_PAT_E,\n            e.FINDER_PAT_F,\n            e.FINDER_PAT_F\n        ],\n        [\n            e.FINDER_PAT_A,\n            e.FINDER_PAT_A,\n            e.FINDER_PAT_B,\n            e.FINDER_PAT_B,\n            e.FINDER_PAT_C,\n            e.FINDER_PAT_D,\n            e.FINDER_PAT_D,\n            e.FINDER_PAT_E,\n            e.FINDER_PAT_E,\n            e.FINDER_PAT_F,\n            e.FINDER_PAT_F\n        ]\n    ], e.MAX_PAIRS = 11, e;\n}(ge), or = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), ir = function(t) {\n    function e(e, r, n) {\n        var o = t.call(this, e, r) || this;\n        return o.count = 0, o.finderPattern = n, o;\n    }\n    return or(e, t), e.prototype.getFinderPattern = function() {\n        return this.finderPattern;\n    }, e.prototype.getCount = function() {\n        return this.count;\n    }, e.prototype.incrementCount = function() {\n        this.count++;\n    }, e;\n}(ye), ar = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), ur = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, sr = function(t) {\n    function e() {\n        var e = null !== t && t.apply(this, arguments) || this;\n        return e.possibleLeftPairs = [], e.possibleRightPairs = [], e;\n    }\n    return ar(e, t), e.prototype.decodeRow = function(t, r, n) {\n        var o, i, a, u, s = this.decodePair(r, !1, t, n);\n        e.addOrTally(this.possibleLeftPairs, s), r.reverse();\n        var c = this.decodePair(r, !0, t, n);\n        e.addOrTally(this.possibleRightPairs, c), r.reverse();\n        try {\n            for(var f = ur(this.possibleLeftPairs), h = f.next(); !h.done; h = f.next()){\n                var l = h.value;\n                if (l.getCount() > 1) try {\n                    for(var d = (a = void 0, ur(this.possibleRightPairs)), p = d.next(); !p.done; p = d.next()){\n                        var g = p.value;\n                        if (g.getCount() > 1 && e.checkChecksum(l, g)) return e.constructResult(l, g);\n                    }\n                } catch (t) {\n                    a = {\n                        error: t\n                    };\n                } finally{\n                    try {\n                        p && !p.done && (u = d.return) && u.call(d);\n                    } finally{\n                        if (a) throw a.error;\n                    }\n                }\n            }\n        } catch (t) {\n            o = {\n                error: t\n            };\n        } finally{\n            try {\n                h && !h.done && (i = f.return) && i.call(f);\n            } finally{\n                if (o) throw o.error;\n            }\n        }\n        throw new U;\n    }, e.addOrTally = function(t, e) {\n        var r, n;\n        if (null != e) {\n            var o = !1;\n            try {\n                for(var i = ur(t), a = i.next(); !a.done; a = i.next()){\n                    var u = a.value;\n                    if (u.getValue() === e.getValue()) {\n                        u.incrementCount(), o = !0;\n                        break;\n                    }\n                }\n            } catch (t) {\n                r = {\n                    error: t\n                };\n            } finally{\n                try {\n                    a && !a.done && (n = i.return) && n.call(i);\n                } finally{\n                    if (r) throw r.error;\n                }\n            }\n            o || t.push(e);\n        }\n    }, e.prototype.reset = function() {\n        this.possibleLeftPairs.length = 0, this.possibleRightPairs.length = 0;\n    }, e.constructResult = function(t, e) {\n        for(var r = 4537077 * t.getValue() + e.getValue(), n = new String(r).toString(), o = new k, i = 13 - n.length; i > 0; i--)o.append(\"0\");\n        o.append(n);\n        var a = 0;\n        for(i = 0; i < 13; i++){\n            var u = o.charAt(i).charCodeAt(0) - \"0\".charCodeAt(0);\n            a += 0 == (1 & i) ? 3 * u : u;\n        }\n        10 === (a = 10 - a % 10) && (a = 0), o.append(a.toString());\n        var s = t.getFinderPattern().getResultPoints(), c = e.getFinderPattern().getResultPoints();\n        return new et(o.toString(), null, 0, [\n            s[0],\n            s[1],\n            c[0],\n            c[1]\n        ], nt.RSS_14, (new Date).getTime());\n    }, e.checkChecksum = function(t, e) {\n        var r = (t.getChecksumPortion() + 16 * e.getChecksumPortion()) % 79, n = 9 * t.getFinderPattern().getValue() + e.getFinderPattern().getValue();\n        return n > 72 && n--, n > 8 && n--, r === n;\n    }, e.prototype.decodePair = function(t, e, r, n) {\n        try {\n            var o = this.findFinderPattern(t, e), i = this.parseFoundFinderPattern(t, r, e, o), a = null == n ? null : n.get(T.NEED_RESULT_POINT_CALLBACK);\n            if (null != a) {\n                var u = (o[0] + o[1]) / 2;\n                e && (u = t.getSize() - 1 - u), a.foundPossibleResultPoint(new At(u, r));\n            }\n            var s = this.decodeDataCharacter(t, i, !0), c = this.decodeDataCharacter(t, i, !1);\n            return new ir(1597 * s.getValue() + c.getValue(), s.getChecksumPortion() + 4 * c.getChecksumPortion(), i);\n        } catch (t) {\n            return null;\n        }\n    }, e.prototype.decodeDataCharacter = function(t, r, n) {\n        for(var o = this.getDataCharacterCounters(), i = 0; i < o.length; i++)o[i] = 0;\n        if (n) Lt.recordPatternInReverse(t, r.getStartEnd()[0], o);\n        else {\n            Lt.recordPattern(t, r.getStartEnd()[1] + 1, o);\n            for(var a = 0, u = o.length - 1; a < u; a++, u--){\n                var s = o[a];\n                o[a] = o[u], o[u] = s;\n            }\n        }\n        var c = n ? 16 : 15, f = vt.sum(new Int32Array(o)) / c, h = this.getOddCounts(), l = this.getEvenCounts(), d = this.getOddRoundingErrors(), p = this.getEvenRoundingErrors();\n        for(a = 0; a < o.length; a++){\n            var g = o[a] / f, y = Math.floor(g + .5);\n            y < 1 ? y = 1 : y > 8 && (y = 8);\n            var w = Math.floor(a / 2);\n            0 == (1 & a) ? (h[w] = y, d[w] = g - y) : (l[w] = y, p[w] = g - y);\n        }\n        this.adjustOddEvenCounts(n, c);\n        var _ = 0, v = 0;\n        for(a = h.length - 1; a >= 0; a--)v *= 9, v += h[a], _ += h[a];\n        var m = 0, A = 0;\n        for(a = l.length - 1; a >= 0; a--)m *= 9, m += l[a], A += l[a];\n        var E = v + 3 * m;\n        if (n) {\n            if (0 != (1 & _) || _ > 12 || _ < 4) throw new U;\n            var C = (12 - _) / 2, I = 9 - (R = e.OUTSIDE_ODD_WIDEST[C]), S = ve.getRSSvalue(h, R, !1), O = ve.getRSSvalue(l, I, !0), T = e.OUTSIDE_EVEN_TOTAL_SUBSET[C], b = e.OUTSIDE_GSUM[C];\n            return new ye(S * T + O + b, E);\n        }\n        if (0 != (1 & A) || A > 10 || A < 4) throw new U;\n        C = (10 - A) / 2, I = 9 - (R = e.INSIDE_ODD_WIDEST[C]), S = ve.getRSSvalue(h, R, !0), O = ve.getRSSvalue(l, I, !1);\n        var R, N = e.INSIDE_ODD_TOTAL_SUBSET[C];\n        b = e.INSIDE_GSUM[C];\n        return new ye(O * N + S + b, E);\n    }, e.prototype.findFinderPattern = function(t, e) {\n        var r = this.getDecodeFinderCounters();\n        r[0] = 0, r[1] = 0, r[2] = 0, r[3] = 0;\n        for(var n = t.getSize(), o = !1, i = 0; i < n && e !== (o = !t.get(i));)i++;\n        for(var a = 0, u = i, s = i; s < n; s++)if (t.get(s) !== o) r[a]++;\n        else {\n            if (3 === a) {\n                if (ge.isFinderPattern(r)) return [\n                    u,\n                    s\n                ];\n                u += r[0] + r[1], r[0] = r[2], r[1] = r[3], r[2] = 0, r[3] = 0, a--;\n            } else a++;\n            r[a] = 1, o = !o;\n        }\n        throw new U;\n    }, e.prototype.parseFoundFinderPattern = function(t, r, n, o) {\n        for(var i = t.get(o[0]), a = o[0] - 1; a >= 0 && i !== t.get(a);)a--;\n        a++;\n        var u = o[0] - a, s = this.getDecodeFinderCounters(), c = new Int32Array(s.length);\n        w.arraycopy(s, 0, c, 1, s.length - 1), c[0] = u;\n        var f = this.parseFinderValue(c, e.FINDER_PATTERNS), h = a, l = o[1];\n        return n && (h = t.getSize() - 1 - h, l = t.getSize() - 1 - l), new we(f, [\n            a,\n            o[1]\n        ], h, l, r);\n    }, e.prototype.adjustOddEvenCounts = function(t, e) {\n        var r = vt.sum(new Int32Array(this.getOddCounts())), n = vt.sum(new Int32Array(this.getEvenCounts())), o = !1, i = !1, a = !1, u = !1;\n        t ? (r > 12 ? i = !0 : r < 4 && (o = !0), n > 12 ? u = !0 : n < 4 && (a = !0)) : (r > 11 ? i = !0 : r < 5 && (o = !0), n > 10 ? u = !0 : n < 4 && (a = !0));\n        var s = r + n - e, c = (1 & r) == (t ? 1 : 0), f = 1 == (1 & n);\n        if (1 === s) if (c) {\n            if (f) throw new U;\n            i = !0;\n        } else {\n            if (!f) throw new U;\n            u = !0;\n        }\n        else if (-1 === s) if (c) {\n            if (f) throw new U;\n            o = !0;\n        } else {\n            if (!f) throw new U;\n            a = !0;\n        }\n        else {\n            if (0 !== s) throw new U;\n            if (c) {\n                if (!f) throw new U;\n                r < n ? (o = !0, u = !0) : (i = !0, a = !0);\n            } else if (f) throw new U;\n        }\n        if (o) {\n            if (i) throw new U;\n            ge.increment(this.getOddCounts(), this.getOddRoundingErrors());\n        }\n        if (i && ge.decrement(this.getOddCounts(), this.getOddRoundingErrors()), a) {\n            if (u) throw new U;\n            ge.increment(this.getEvenCounts(), this.getOddRoundingErrors());\n        }\n        u && ge.decrement(this.getEvenCounts(), this.getEvenRoundingErrors());\n    }, e.OUTSIDE_EVEN_TOTAL_SUBSET = [\n        1,\n        10,\n        34,\n        70,\n        126\n    ], e.INSIDE_ODD_TOTAL_SUBSET = [\n        4,\n        20,\n        48,\n        81\n    ], e.OUTSIDE_GSUM = [\n        0,\n        161,\n        961,\n        2015,\n        2715\n    ], e.INSIDE_GSUM = [\n        0,\n        336,\n        1036,\n        1516\n    ], e.OUTSIDE_ODD_WIDEST = [\n        8,\n        6,\n        4,\n        3,\n        1\n    ], e.INSIDE_ODD_WIDEST = [\n        2,\n        4,\n        6,\n        8\n    ], e.FINDER_PATTERNS = [\n        Int32Array.from([\n            3,\n            8,\n            2,\n            1\n        ]),\n        Int32Array.from([\n            3,\n            5,\n            5,\n            1\n        ]),\n        Int32Array.from([\n            3,\n            3,\n            7,\n            1\n        ]),\n        Int32Array.from([\n            3,\n            1,\n            9,\n            1\n        ]),\n        Int32Array.from([\n            2,\n            7,\n            4,\n            1\n        ]),\n        Int32Array.from([\n            2,\n            5,\n            6,\n            1\n        ]),\n        Int32Array.from([\n            2,\n            3,\n            8,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            5,\n            7,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            3,\n            9,\n            1\n        ])\n    ], e;\n}(ge), cr = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), fr = function(t) {\n    function e(e) {\n        var r = t.call(this) || this;\n        r.readers = [];\n        var n = e ? e.get(T.POSSIBLE_FORMATS) : null, o = e && void 0 !== e.get(T.ASSUME_CODE_39_CHECK_DIGIT);\n        return n && ((n.includes(nt.EAN_13) || n.includes(nt.UPC_A) || n.includes(nt.EAN_8) || n.includes(nt.UPC_E)) && r.readers.push(new le(e)), n.includes(nt.CODE_39) && r.readers.push(new Ut(o)), n.includes(nt.CODE_128) && r.readers.push(new kt), n.includes(nt.ITF) && r.readers.push(new Xt), n.includes(nt.RSS_14) && r.readers.push(new sr), n.includes(nt.RSS_EXPANDED) && (console.warn(\"RSS Expanded reader IS NOT ready for production yet! use at your own risk.\"), r.readers.push(new nr))), 0 === r.readers.length && (r.readers.push(new le(e)), r.readers.push(new Ut), r.readers.push(new le(e)), r.readers.push(new kt), r.readers.push(new Xt), r.readers.push(new sr)), r;\n    }\n    return cr(e, t), e.prototype.decodeRow = function(t, e, r) {\n        for(var n = 0; n < this.readers.length; n++)try {\n            return this.readers[n].decodeRow(t, e, r);\n        } catch (t) {}\n        throw new U;\n    }, e.prototype.reset = function() {\n        this.readers.forEach(function(t) {\n            return t.reset();\n        });\n    }, e;\n}(Lt), hr = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}();\n!function(t) {\n    function e(e, r) {\n        return void 0 === e && (e = 500), t.call(this, new fr(r), e, r) || this;\n    }\n    hr(e, t);\n}(tt);\nvar lr, dr = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, pr = function() {\n    function t(t, e, r) {\n        this.ecCodewords = t, this.ecBlocks = [\n            e\n        ], r && this.ecBlocks.push(r);\n    }\n    return t.prototype.getECCodewords = function() {\n        return this.ecCodewords;\n    }, t.prototype.getECBlocks = function() {\n        return this.ecBlocks;\n    }, t;\n}(), gr = function() {\n    function t(t, e) {\n        this.count = t, this.dataCodewords = e;\n    }\n    return t.prototype.getCount = function() {\n        return this.count;\n    }, t.prototype.getDataCodewords = function() {\n        return this.dataCodewords;\n    }, t;\n}(), yr = function() {\n    function t(t, e, r, n, o, i) {\n        var a, u;\n        this.versionNumber = t, this.symbolSizeRows = e, this.symbolSizeColumns = r, this.dataRegionSizeRows = n, this.dataRegionSizeColumns = o, this.ecBlocks = i;\n        var s = 0, c = i.getECCodewords(), f = i.getECBlocks();\n        try {\n            for(var h = dr(f), l = h.next(); !l.done; l = h.next()){\n                var d = l.value;\n                s += d.getCount() * (d.getDataCodewords() + c);\n            }\n        } catch (t) {\n            a = {\n                error: t\n            };\n        } finally{\n            try {\n                l && !l.done && (u = h.return) && u.call(h);\n            } finally{\n                if (a) throw a.error;\n            }\n        }\n        this.totalCodewords = s;\n    }\n    return t.prototype.getVersionNumber = function() {\n        return this.versionNumber;\n    }, t.prototype.getSymbolSizeRows = function() {\n        return this.symbolSizeRows;\n    }, t.prototype.getSymbolSizeColumns = function() {\n        return this.symbolSizeColumns;\n    }, t.prototype.getDataRegionSizeRows = function() {\n        return this.dataRegionSizeRows;\n    }, t.prototype.getDataRegionSizeColumns = function() {\n        return this.dataRegionSizeColumns;\n    }, t.prototype.getTotalCodewords = function() {\n        return this.totalCodewords;\n    }, t.prototype.getECBlocks = function() {\n        return this.ecBlocks;\n    }, t.getVersionForDimensions = function(e, r) {\n        var n, o;\n        if (0 != (1 & e) || 0 != (1 & r)) throw new R;\n        try {\n            for(var i = dr(t.VERSIONS), a = i.next(); !a.done; a = i.next()){\n                var u = a.value;\n                if (u.symbolSizeRows === e && u.symbolSizeColumns === r) return u;\n            }\n        } catch (t) {\n            n = {\n                error: t\n            };\n        } finally{\n            try {\n                a && !a.done && (o = i.return) && o.call(i);\n            } finally{\n                if (n) throw n.error;\n            }\n        }\n        throw new R;\n    }, t.prototype.toString = function() {\n        return \"\" + this.versionNumber;\n    }, t.buildVersions = function() {\n        return [\n            new t(1, 10, 10, 8, 8, new pr(5, new gr(1, 3))),\n            new t(2, 12, 12, 10, 10, new pr(7, new gr(1, 5))),\n            new t(3, 14, 14, 12, 12, new pr(10, new gr(1, 8))),\n            new t(4, 16, 16, 14, 14, new pr(12, new gr(1, 12))),\n            new t(5, 18, 18, 16, 16, new pr(14, new gr(1, 18))),\n            new t(6, 20, 20, 18, 18, new pr(18, new gr(1, 22))),\n            new t(7, 22, 22, 20, 20, new pr(20, new gr(1, 30))),\n            new t(8, 24, 24, 22, 22, new pr(24, new gr(1, 36))),\n            new t(9, 26, 26, 24, 24, new pr(28, new gr(1, 44))),\n            new t(10, 32, 32, 14, 14, new pr(36, new gr(1, 62))),\n            new t(11, 36, 36, 16, 16, new pr(42, new gr(1, 86))),\n            new t(12, 40, 40, 18, 18, new pr(48, new gr(1, 114))),\n            new t(13, 44, 44, 20, 20, new pr(56, new gr(1, 144))),\n            new t(14, 48, 48, 22, 22, new pr(68, new gr(1, 174))),\n            new t(15, 52, 52, 24, 24, new pr(42, new gr(2, 102))),\n            new t(16, 64, 64, 14, 14, new pr(56, new gr(2, 140))),\n            new t(17, 72, 72, 16, 16, new pr(36, new gr(4, 92))),\n            new t(18, 80, 80, 18, 18, new pr(48, new gr(4, 114))),\n            new t(19, 88, 88, 20, 20, new pr(56, new gr(4, 144))),\n            new t(20, 96, 96, 22, 22, new pr(68, new gr(4, 174))),\n            new t(21, 104, 104, 24, 24, new pr(56, new gr(6, 136))),\n            new t(22, 120, 120, 18, 18, new pr(68, new gr(6, 175))),\n            new t(23, 132, 132, 20, 20, new pr(62, new gr(8, 163))),\n            new t(24, 144, 144, 22, 22, new pr(62, new gr(8, 156), new gr(2, 155))),\n            new t(25, 8, 18, 6, 16, new pr(7, new gr(1, 5))),\n            new t(26, 8, 32, 6, 14, new pr(11, new gr(1, 10))),\n            new t(27, 12, 26, 10, 24, new pr(14, new gr(1, 16))),\n            new t(28, 12, 36, 10, 16, new pr(18, new gr(1, 22))),\n            new t(29, 16, 36, 14, 16, new pr(24, new gr(1, 32))),\n            new t(30, 16, 48, 14, 22, new pr(28, new gr(1, 49)))\n        ];\n    }, t.VERSIONS = t.buildVersions(), t;\n}(), wr = function() {\n    function t(e) {\n        var r = e.getHeight();\n        if (r < 8 || r > 144 || 0 != (1 & r)) throw new R;\n        this.version = t.readVersion(e), this.mappingBitMatrix = this.extractDataRegion(e), this.readMappingMatrix = new x(this.mappingBitMatrix.getWidth(), this.mappingBitMatrix.getHeight());\n    }\n    return t.prototype.getVersion = function() {\n        return this.version;\n    }, t.readVersion = function(t) {\n        var e = t.getHeight(), r = t.getWidth();\n        return yr.getVersionForDimensions(e, r);\n    }, t.prototype.readCodewords = function() {\n        var t = new Int8Array(this.version.getTotalCodewords()), e = 0, r = 4, n = 0, o = this.mappingBitMatrix.getHeight(), i = this.mappingBitMatrix.getWidth(), a = !1, u = !1, s = !1, c = !1;\n        do {\n            if (r !== o || 0 !== n || a) if (r !== o - 2 || 0 !== n || 0 == (3 & i) || u) if (r !== o + 4 || 2 !== n || 0 != (7 & i) || s) if (r !== o - 2 || 0 !== n || 4 != (7 & i) || c) {\n                do {\n                    r < o && n >= 0 && !this.readMappingMatrix.get(n, r) && (t[e++] = 255 & this.readUtah(r, n, o, i)), r -= 2, n += 2;\n                }while (r >= 0 && n < i);\n                r += 1, n += 3;\n                do {\n                    r >= 0 && n < i && !this.readMappingMatrix.get(n, r) && (t[e++] = 255 & this.readUtah(r, n, o, i)), r += 2, n -= 2;\n                }while (r < o && n >= 0);\n                r += 3, n += 1;\n            } else t[e++] = 255 & this.readCorner4(o, i), r -= 2, n += 2, c = !0;\n            else t[e++] = 255 & this.readCorner3(o, i), r -= 2, n += 2, s = !0;\n            else t[e++] = 255 & this.readCorner2(o, i), r -= 2, n += 2, u = !0;\n            else t[e++] = 255 & this.readCorner1(o, i), r -= 2, n += 2, a = !0;\n        }while (r < o || n < i);\n        if (e !== this.version.getTotalCodewords()) throw new R;\n        return t;\n    }, t.prototype.readModule = function(t, e, r, n) {\n        return t < 0 && (t += r, e += 4 - (r + 4 & 7)), e < 0 && (e += n, t += 4 - (n + 4 & 7)), this.readMappingMatrix.set(e, t), this.mappingBitMatrix.get(e, t);\n    }, t.prototype.readUtah = function(t, e, r, n) {\n        var o = 0;\n        return this.readModule(t - 2, e - 2, r, n) && (o |= 1), o <<= 1, this.readModule(t - 2, e - 1, r, n) && (o |= 1), o <<= 1, this.readModule(t - 1, e - 2, r, n) && (o |= 1), o <<= 1, this.readModule(t - 1, e - 1, r, n) && (o |= 1), o <<= 1, this.readModule(t - 1, e, r, n) && (o |= 1), o <<= 1, this.readModule(t, e - 2, r, n) && (o |= 1), o <<= 1, this.readModule(t, e - 1, r, n) && (o |= 1), o <<= 1, this.readModule(t, e, r, n) && (o |= 1), o;\n    }, t.prototype.readCorner1 = function(t, e) {\n        var r = 0;\n        return this.readModule(t - 1, 0, t, e) && (r |= 1), r <<= 1, this.readModule(t - 1, 1, t, e) && (r |= 1), r <<= 1, this.readModule(t - 1, 2, t, e) && (r |= 1), r <<= 1, this.readModule(0, e - 2, t, e) && (r |= 1), r <<= 1, this.readModule(0, e - 1, t, e) && (r |= 1), r <<= 1, this.readModule(1, e - 1, t, e) && (r |= 1), r <<= 1, this.readModule(2, e - 1, t, e) && (r |= 1), r <<= 1, this.readModule(3, e - 1, t, e) && (r |= 1), r;\n    }, t.prototype.readCorner2 = function(t, e) {\n        var r = 0;\n        return this.readModule(t - 3, 0, t, e) && (r |= 1), r <<= 1, this.readModule(t - 2, 0, t, e) && (r |= 1), r <<= 1, this.readModule(t - 1, 0, t, e) && (r |= 1), r <<= 1, this.readModule(0, e - 4, t, e) && (r |= 1), r <<= 1, this.readModule(0, e - 3, t, e) && (r |= 1), r <<= 1, this.readModule(0, e - 2, t, e) && (r |= 1), r <<= 1, this.readModule(0, e - 1, t, e) && (r |= 1), r <<= 1, this.readModule(1, e - 1, t, e) && (r |= 1), r;\n    }, t.prototype.readCorner3 = function(t, e) {\n        var r = 0;\n        return this.readModule(t - 1, 0, t, e) && (r |= 1), r <<= 1, this.readModule(t - 1, e - 1, t, e) && (r |= 1), r <<= 1, this.readModule(0, e - 3, t, e) && (r |= 1), r <<= 1, this.readModule(0, e - 2, t, e) && (r |= 1), r <<= 1, this.readModule(0, e - 1, t, e) && (r |= 1), r <<= 1, this.readModule(1, e - 3, t, e) && (r |= 1), r <<= 1, this.readModule(1, e - 2, t, e) && (r |= 1), r <<= 1, this.readModule(1, e - 1, t, e) && (r |= 1), r;\n    }, t.prototype.readCorner4 = function(t, e) {\n        var r = 0;\n        return this.readModule(t - 3, 0, t, e) && (r |= 1), r <<= 1, this.readModule(t - 2, 0, t, e) && (r |= 1), r <<= 1, this.readModule(t - 1, 0, t, e) && (r |= 1), r <<= 1, this.readModule(0, e - 2, t, e) && (r |= 1), r <<= 1, this.readModule(0, e - 1, t, e) && (r |= 1), r <<= 1, this.readModule(1, e - 1, t, e) && (r |= 1), r <<= 1, this.readModule(2, e - 1, t, e) && (r |= 1), r <<= 1, this.readModule(3, e - 1, t, e) && (r |= 1), r;\n    }, t.prototype.extractDataRegion = function(t) {\n        var e = this.version.getSymbolSizeRows(), r = this.version.getSymbolSizeColumns();\n        if (t.getHeight() !== e) throw new l(\"Dimension of bitMatrix must match the version size\");\n        for(var n = this.version.getDataRegionSizeRows(), o = this.version.getDataRegionSizeColumns(), i = e / n | 0, a = r / o | 0, u = new x(a * o, i * n), s = 0; s < i; ++s)for(var c = s * n, f = 0; f < a; ++f)for(var h = f * o, d = 0; d < n; ++d)for(var p = s * (n + 2) + 1 + d, g = c + d, y = 0; y < o; ++y){\n            var w = f * (o + 2) + 1 + y;\n            if (t.get(w, p)) {\n                var _ = h + y;\n                u.set(_, g);\n            }\n        }\n        return u;\n    }, t;\n}(), _r = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, vr = function() {\n    function t(t, e) {\n        this.numDataCodewords = t, this.codewords = e;\n    }\n    return t.getDataBlocks = function(e, r) {\n        var n, o, i, a, u = r.getECBlocks(), s = 0, c = u.getECBlocks();\n        try {\n            for(var f = _r(c), h = f.next(); !h.done; h = f.next()){\n                s += (w = h.value).getCount();\n            }\n        } catch (t) {\n            n = {\n                error: t\n            };\n        } finally{\n            try {\n                h && !h.done && (o = f.return) && o.call(f);\n            } finally{\n                if (n) throw n.error;\n            }\n        }\n        var d = new Array(s), p = 0;\n        try {\n            for(var g = _r(c), y = g.next(); !y.done; y = g.next())for(var w = y.value, _ = 0; _ < w.getCount(); _++){\n                var v = w.getDataCodewords(), m = u.getECCodewords() + v;\n                d[p++] = new t(v, new Uint8Array(m));\n            }\n        } catch (t) {\n            i = {\n                error: t\n            };\n        } finally{\n            try {\n                y && !y.done && (a = g.return) && a.call(g);\n            } finally{\n                if (i) throw i.error;\n            }\n        }\n        var A = d[0].codewords.length - u.getECCodewords(), E = A - 1, C = 0;\n        for(_ = 0; _ < E; _++)for(var I = 0; I < p; I++)d[I].codewords[_] = e[C++];\n        var S = 24 === r.getVersionNumber(), O = S ? 8 : p;\n        for(I = 0; I < O; I++)d[I].codewords[A - 1] = e[C++];\n        var T = d[0].codewords.length;\n        for(_ = A; _ < T; _++)for(I = 0; I < p; I++){\n            var b = S ? (I + 8) % p : I, R = S && b > 7 ? _ - 1 : _;\n            d[b].codewords[R] = e[C++];\n        }\n        if (C !== e.length) throw new l;\n        return d;\n    }, t.prototype.getNumDataCodewords = function() {\n        return this.numDataCodewords;\n    }, t.prototype.getCodewords = function() {\n        return this.codewords;\n    }, t;\n}(), mr = function() {\n    function t(t) {\n        this.bytes = t, this.byteOffset = 0, this.bitOffset = 0;\n    }\n    return t.prototype.getBitOffset = function() {\n        return this.bitOffset;\n    }, t.prototype.getByteOffset = function() {\n        return this.byteOffset;\n    }, t.prototype.readBits = function(t) {\n        if (t < 1 || t > 32 || t > this.available()) throw new l(\"\" + t);\n        var e = 0, r = this.bitOffset, n = this.byteOffset, o = this.bytes;\n        if (r > 0) {\n            var i = 8 - r, a = t < i ? t : i, u = 255 >> 8 - a << (s = i - a);\n            e = (o[n] & u) >> s, t -= a, 8 === (r += a) && (r = 0, n++);\n        }\n        if (t > 0) {\n            for(; t >= 8;)e = e << 8 | 255 & o[n], n++, t -= 8;\n            if (t > 0) {\n                var s;\n                u = 255 >> (s = 8 - t) << s;\n                e = e << t | (o[n] & u) >> s, r += t;\n            }\n        }\n        return this.bitOffset = r, this.byteOffset = n, e;\n    }, t.prototype.available = function() {\n        return 8 * (this.bytes.length - this.byteOffset) - this.bitOffset;\n    }, t;\n}();\n!function(t) {\n    t[t.PAD_ENCODE = 0] = \"PAD_ENCODE\", t[t.ASCII_ENCODE = 1] = \"ASCII_ENCODE\", t[t.C40_ENCODE = 2] = \"C40_ENCODE\", t[t.TEXT_ENCODE = 3] = \"TEXT_ENCODE\", t[t.ANSIX12_ENCODE = 4] = \"ANSIX12_ENCODE\", t[t.EDIFACT_ENCODE = 5] = \"EDIFACT_ENCODE\", t[t.BASE256_ENCODE = 6] = \"BASE256_ENCODE\";\n}(lr || (lr = {}));\nvar Ar, Er = function() {\n    function t() {}\n    return t.decode = function(t) {\n        var e = new mr(t), r = new k, n = new k, o = new Array, i = lr.ASCII_ENCODE;\n        do {\n            if (i === lr.ASCII_ENCODE) i = this.decodeAsciiSegment(e, r, n);\n            else {\n                switch(i){\n                    case lr.C40_ENCODE:\n                        this.decodeC40Segment(e, r);\n                        break;\n                    case lr.TEXT_ENCODE:\n                        this.decodeTextSegment(e, r);\n                        break;\n                    case lr.ANSIX12_ENCODE:\n                        this.decodeAnsiX12Segment(e, r);\n                        break;\n                    case lr.EDIFACT_ENCODE:\n                        this.decodeEdifactSegment(e, r);\n                        break;\n                    case lr.BASE256_ENCODE:\n                        this.decodeBase256Segment(e, r, o);\n                        break;\n                    default:\n                        throw new R;\n                }\n                i = lr.ASCII_ENCODE;\n            }\n        }while (i !== lr.PAD_ENCODE && e.available() > 0);\n        return n.length() > 0 && r.append(n.toString()), new at(t, r.toString(), 0 === o.length ? null : o, null);\n    }, t.decodeAsciiSegment = function(t, e, r) {\n        var n = !1;\n        do {\n            var o = t.readBits(8);\n            if (0 === o) throw new R;\n            if (o <= 128) return n && (o += 128), e.append(String.fromCharCode(o - 1)), lr.ASCII_ENCODE;\n            if (129 === o) return lr.PAD_ENCODE;\n            if (o <= 229) {\n                var i = o - 130;\n                i < 10 && e.append(\"0\"), e.append(\"\" + i);\n            } else switch(o){\n                case 230:\n                    return lr.C40_ENCODE;\n                case 231:\n                    return lr.BASE256_ENCODE;\n                case 232:\n                    e.append(String.fromCharCode(29));\n                    break;\n                case 233:\n                case 234:\n                case 241:\n                    break;\n                case 235:\n                    n = !0;\n                    break;\n                case 236:\n                    e.append(\"[)>\\x1e05\\x1d\"), r.insert(0, \"\\x1e\\x04\");\n                    break;\n                case 237:\n                    e.append(\"[)>\\x1e06\\x1d\"), r.insert(0, \"\\x1e\\x04\");\n                    break;\n                case 238:\n                    return lr.ANSIX12_ENCODE;\n                case 239:\n                    return lr.TEXT_ENCODE;\n                case 240:\n                    return lr.EDIFACT_ENCODE;\n                default:\n                    if (254 !== o || 0 !== t.available()) throw new R;\n            }\n        }while (t.available() > 0);\n        return lr.ASCII_ENCODE;\n    }, t.decodeC40Segment = function(t, e) {\n        var r = !1, n = [], o = 0;\n        do {\n            if (8 === t.available()) return;\n            var i = t.readBits(8);\n            if (254 === i) return;\n            this.parseTwoBytes(i, t.readBits(8), n);\n            for(var a = 0; a < 3; a++){\n                var u = n[a];\n                switch(o){\n                    case 0:\n                        if (u < 3) o = u + 1;\n                        else {\n                            if (!(u < this.C40_BASIC_SET_CHARS.length)) throw new R;\n                            var s = this.C40_BASIC_SET_CHARS[u];\n                            r ? (e.append(String.fromCharCode(s.charCodeAt(0) + 128)), r = !1) : e.append(s);\n                        }\n                        break;\n                    case 1:\n                        r ? (e.append(String.fromCharCode(u + 128)), r = !1) : e.append(String.fromCharCode(u)), o = 0;\n                        break;\n                    case 2:\n                        if (u < this.C40_SHIFT2_SET_CHARS.length) {\n                            s = this.C40_SHIFT2_SET_CHARS[u];\n                            r ? (e.append(String.fromCharCode(s.charCodeAt(0) + 128)), r = !1) : e.append(s);\n                        } else switch(u){\n                            case 27:\n                                e.append(String.fromCharCode(29));\n                                break;\n                            case 30:\n                                r = !0;\n                                break;\n                            default:\n                                throw new R;\n                        }\n                        o = 0;\n                        break;\n                    case 3:\n                        r ? (e.append(String.fromCharCode(u + 224)), r = !1) : e.append(String.fromCharCode(u + 96)), o = 0;\n                        break;\n                    default:\n                        throw new R;\n                }\n            }\n        }while (t.available() > 0);\n    }, t.decodeTextSegment = function(t, e) {\n        var r = !1, n = [], o = 0;\n        do {\n            if (8 === t.available()) return;\n            var i = t.readBits(8);\n            if (254 === i) return;\n            this.parseTwoBytes(i, t.readBits(8), n);\n            for(var a = 0; a < 3; a++){\n                var u = n[a];\n                switch(o){\n                    case 0:\n                        if (u < 3) o = u + 1;\n                        else {\n                            if (!(u < this.TEXT_BASIC_SET_CHARS.length)) throw new R;\n                            var s = this.TEXT_BASIC_SET_CHARS[u];\n                            r ? (e.append(String.fromCharCode(s.charCodeAt(0) + 128)), r = !1) : e.append(s);\n                        }\n                        break;\n                    case 1:\n                        r ? (e.append(String.fromCharCode(u + 128)), r = !1) : e.append(String.fromCharCode(u)), o = 0;\n                        break;\n                    case 2:\n                        if (u < this.TEXT_SHIFT2_SET_CHARS.length) {\n                            s = this.TEXT_SHIFT2_SET_CHARS[u];\n                            r ? (e.append(String.fromCharCode(s.charCodeAt(0) + 128)), r = !1) : e.append(s);\n                        } else switch(u){\n                            case 27:\n                                e.append(String.fromCharCode(29));\n                                break;\n                            case 30:\n                                r = !0;\n                                break;\n                            default:\n                                throw new R;\n                        }\n                        o = 0;\n                        break;\n                    case 3:\n                        if (!(u < this.TEXT_SHIFT3_SET_CHARS.length)) throw new R;\n                        s = this.TEXT_SHIFT3_SET_CHARS[u];\n                        r ? (e.append(String.fromCharCode(s.charCodeAt(0) + 128)), r = !1) : e.append(s), o = 0;\n                        break;\n                    default:\n                        throw new R;\n                }\n            }\n        }while (t.available() > 0);\n    }, t.decodeAnsiX12Segment = function(t, e) {\n        var r = [];\n        do {\n            if (8 === t.available()) return;\n            var n = t.readBits(8);\n            if (254 === n) return;\n            this.parseTwoBytes(n, t.readBits(8), r);\n            for(var o = 0; o < 3; o++){\n                var i = r[o];\n                switch(i){\n                    case 0:\n                        e.append(\"\\r\");\n                        break;\n                    case 1:\n                        e.append(\"*\");\n                        break;\n                    case 2:\n                        e.append(\">\");\n                        break;\n                    case 3:\n                        e.append(\" \");\n                        break;\n                    default:\n                        if (i < 14) e.append(String.fromCharCode(i + 44));\n                        else {\n                            if (!(i < 40)) throw new R;\n                            e.append(String.fromCharCode(i + 51));\n                        }\n                }\n            }\n        }while (t.available() > 0);\n    }, t.parseTwoBytes = function(t, e, r) {\n        var n = (t << 8) + e - 1, o = Math.floor(n / 1600);\n        r[0] = o, n -= 1600 * o, o = Math.floor(n / 40), r[1] = o, r[2] = n - 40 * o;\n    }, t.decodeEdifactSegment = function(t, e) {\n        do {\n            if (t.available() <= 16) return;\n            for(var r = 0; r < 4; r++){\n                var n = t.readBits(6);\n                if (31 === n) {\n                    var o = 8 - t.getBitOffset();\n                    return void (8 !== o && t.readBits(o));\n                }\n                0 == (32 & n) && (n |= 64), e.append(String.fromCharCode(n));\n            }\n        }while (t.available() > 0);\n    }, t.decodeBase256Segment = function(t, e, r) {\n        var n, o = 1 + t.getByteOffset(), i = this.unrandomize255State(t.readBits(8), o++);\n        if ((n = 0 === i ? t.available() / 8 | 0 : i < 250 ? i : 250 * (i - 249) + this.unrandomize255State(t.readBits(8), o++)) < 0) throw new R;\n        for(var a = new Uint8Array(n), u = 0; u < n; u++){\n            if (t.available() < 8) throw new R;\n            a[u] = this.unrandomize255State(t.readBits(8), o++);\n        }\n        r.push(a);\n        try {\n            e.append(L.decode(a, F.ISO88591));\n        } catch (t) {\n            throw new yt(\"Platform does not support required encoding: \" + t.message);\n        }\n    }, t.unrandomize255State = function(t, e) {\n        var r = t - (149 * e % 255 + 1);\n        return r >= 0 ? r : r + 256;\n    }, t.C40_BASIC_SET_CHARS = [\n        \"*\",\n        \"*\",\n        \"*\",\n        \" \",\n        \"0\",\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\",\n        \"5\",\n        \"6\",\n        \"7\",\n        \"8\",\n        \"9\",\n        \"A\",\n        \"B\",\n        \"C\",\n        \"D\",\n        \"E\",\n        \"F\",\n        \"G\",\n        \"H\",\n        \"I\",\n        \"J\",\n        \"K\",\n        \"L\",\n        \"M\",\n        \"N\",\n        \"O\",\n        \"P\",\n        \"Q\",\n        \"R\",\n        \"S\",\n        \"T\",\n        \"U\",\n        \"V\",\n        \"W\",\n        \"X\",\n        \"Y\",\n        \"Z\"\n    ], t.C40_SHIFT2_SET_CHARS = [\n        \"!\",\n        '\"',\n        \"#\",\n        \"$\",\n        \"%\",\n        \"&\",\n        \"'\",\n        \"(\",\n        \")\",\n        \"*\",\n        \"+\",\n        \",\",\n        \"-\",\n        \".\",\n        \"/\",\n        \":\",\n        \";\",\n        \"<\",\n        \"=\",\n        \">\",\n        \"?\",\n        \"@\",\n        \"[\",\n        \"\\\\\",\n        \"]\",\n        \"^\",\n        \"_\"\n    ], t.TEXT_BASIC_SET_CHARS = [\n        \"*\",\n        \"*\",\n        \"*\",\n        \" \",\n        \"0\",\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\",\n        \"5\",\n        \"6\",\n        \"7\",\n        \"8\",\n        \"9\",\n        \"a\",\n        \"b\",\n        \"c\",\n        \"d\",\n        \"e\",\n        \"f\",\n        \"g\",\n        \"h\",\n        \"i\",\n        \"j\",\n        \"k\",\n        \"l\",\n        \"m\",\n        \"n\",\n        \"o\",\n        \"p\",\n        \"q\",\n        \"r\",\n        \"s\",\n        \"t\",\n        \"u\",\n        \"v\",\n        \"w\",\n        \"x\",\n        \"y\",\n        \"z\"\n    ], t.TEXT_SHIFT2_SET_CHARS = t.C40_SHIFT2_SET_CHARS, t.TEXT_SHIFT3_SET_CHARS = [\n        \"`\",\n        \"A\",\n        \"B\",\n        \"C\",\n        \"D\",\n        \"E\",\n        \"F\",\n        \"G\",\n        \"H\",\n        \"I\",\n        \"J\",\n        \"K\",\n        \"L\",\n        \"M\",\n        \"N\",\n        \"O\",\n        \"P\",\n        \"Q\",\n        \"R\",\n        \"S\",\n        \"T\",\n        \"U\",\n        \"V\",\n        \"W\",\n        \"X\",\n        \"Y\",\n        \"Z\",\n        \"{\",\n        \"|\",\n        \"}\",\n        \"~\",\n        String.fromCharCode(127)\n    ], t;\n}(), Cr = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, Ir = function() {\n    function t() {\n        this.rsDecoder = new wt(lt.DATA_MATRIX_FIELD_256);\n    }\n    return t.prototype.decode = function(t) {\n        var e, r, n = new wr(t), o = n.getVersion(), i = n.readCodewords(), a = vr.getDataBlocks(i, o), u = 0;\n        try {\n            for(var s = Cr(a), c = s.next(); !c.done; c = s.next()){\n                u += c.value.getNumDataCodewords();\n            }\n        } catch (t) {\n            e = {\n                error: t\n            };\n        } finally{\n            try {\n                c && !c.done && (r = s.return) && r.call(s);\n            } finally{\n                if (e) throw e.error;\n            }\n        }\n        for(var f = new Uint8Array(u), h = a.length, l = 0; l < h; l++){\n            var d = a[l], p = d.getCodewords(), g = d.getNumDataCodewords();\n            this.correctErrors(p, g);\n            for(var y = 0; y < g; y++)f[y * h + l] = p[y];\n        }\n        return Er.decode(f);\n    }, t.prototype.correctErrors = function(t, e) {\n        var r = new Int32Array(t);\n        try {\n            this.rsDecoder.decode(r, t.length - e);\n        } catch (t) {\n            throw new g;\n        }\n        for(var n = 0; n < e; n++)t[n] = r[n];\n    }, t;\n}(), Sr = function() {\n    function t(t) {\n        this.image = t, this.rectangleDetector = new St(this.image);\n    }\n    return t.prototype.detect = function() {\n        var e = this.rectangleDetector.detect(), r = this.detectSolid1(e);\n        if ((r = this.detectSolid2(r))[3] = this.correctTopRight(r), !r[3]) throw new U;\n        var n = (r = this.shiftToModuleCenter(r))[0], o = r[1], i = r[2], a = r[3], u = this.transitionsBetween(n, a) + 1, s = this.transitionsBetween(i, a) + 1;\n        1 == (1 & u) && (u += 1), 1 == (1 & s) && (s += 1), 4 * u < 7 * s && 4 * s < 7 * u && (u = s = Math.max(u, s));\n        var c = t.sampleGrid(this.image, n, o, i, a, u, s);\n        return new Et(c, [\n            n,\n            o,\n            i,\n            a\n        ]);\n    }, t.shiftPoint = function(t, e, r) {\n        var n = (e.getX() - t.getX()) / (r + 1), o = (e.getY() - t.getY()) / (r + 1);\n        return new At(t.getX() + n, t.getY() + o);\n    }, t.moveAway = function(t, e, r) {\n        var n = t.getX(), o = t.getY();\n        return n < e ? n -= 1 : n += 1, o < r ? o -= 1 : o += 1, new At(n, o);\n    }, t.prototype.detectSolid1 = function(t) {\n        var e = t[0], r = t[1], n = t[3], o = t[2], i = this.transitionsBetween(e, r), a = this.transitionsBetween(r, n), u = this.transitionsBetween(n, o), s = this.transitionsBetween(o, e), c = i, f = [\n            o,\n            e,\n            r,\n            n\n        ];\n        return c > a && (c = a, f[0] = e, f[1] = r, f[2] = n, f[3] = o), c > u && (c = u, f[0] = r, f[1] = n, f[2] = o, f[3] = e), c > s && (f[0] = n, f[1] = o, f[2] = e, f[3] = r), f;\n    }, t.prototype.detectSolid2 = function(e) {\n        var r = e[0], n = e[1], o = e[2], i = e[3], a = this.transitionsBetween(r, i), u = t.shiftPoint(n, o, 4 * (a + 1)), s = t.shiftPoint(o, n, 4 * (a + 1));\n        return this.transitionsBetween(u, r) < this.transitionsBetween(s, i) ? (e[0] = r, e[1] = n, e[2] = o, e[3] = i) : (e[0] = n, e[1] = o, e[2] = i, e[3] = r), e;\n    }, t.prototype.correctTopRight = function(e) {\n        var r = e[0], n = e[1], o = e[2], i = e[3], a = this.transitionsBetween(r, i), u = this.transitionsBetween(n, i), s = t.shiftPoint(r, n, 4 * (u + 1)), c = t.shiftPoint(o, n, 4 * (a + 1));\n        a = this.transitionsBetween(s, i), u = this.transitionsBetween(c, i);\n        var f = new At(i.getX() + (o.getX() - n.getX()) / (a + 1), i.getY() + (o.getY() - n.getY()) / (a + 1)), h = new At(i.getX() + (r.getX() - n.getX()) / (u + 1), i.getY() + (r.getY() - n.getY()) / (u + 1));\n        return this.isValid(f) ? this.isValid(h) ? this.transitionsBetween(s, f) + this.transitionsBetween(c, f) > this.transitionsBetween(s, h) + this.transitionsBetween(c, h) ? f : h : f : this.isValid(h) ? h : null;\n    }, t.prototype.shiftToModuleCenter = function(e) {\n        var r = e[0], n = e[1], o = e[2], i = e[3], a = this.transitionsBetween(r, i) + 1, u = this.transitionsBetween(o, i) + 1, s = t.shiftPoint(r, n, 4 * u), c = t.shiftPoint(o, n, 4 * a);\n        1 == (1 & (a = this.transitionsBetween(s, i) + 1)) && (a += 1), 1 == (1 & (u = this.transitionsBetween(c, i) + 1)) && (u += 1);\n        var f, h, l = (r.getX() + n.getX() + o.getX() + i.getX()) / 4, d = (r.getY() + n.getY() + o.getY() + i.getY()) / 4;\n        return r = t.moveAway(r, l, d), n = t.moveAway(n, l, d), o = t.moveAway(o, l, d), i = t.moveAway(i, l, d), s = t.shiftPoint(r, n, 4 * u), s = t.shiftPoint(s, i, 4 * a), f = t.shiftPoint(n, r, 4 * u), f = t.shiftPoint(f, o, 4 * a), c = t.shiftPoint(o, i, 4 * u), c = t.shiftPoint(c, n, 4 * a), h = t.shiftPoint(i, o, 4 * u), [\n            s,\n            f,\n            c,\n            h = t.shiftPoint(h, r, 4 * a)\n        ];\n    }, t.prototype.isValid = function(t) {\n        return t.getX() >= 0 && t.getX() < this.image.getWidth() && t.getY() > 0 && t.getY() < this.image.getHeight();\n    }, t.sampleGrid = function(t, e, r, n, o, i, a) {\n        return Nt.getInstance().sampleGrid(t, i, a, .5, .5, i - .5, .5, i - .5, a - .5, .5, a - .5, e.getX(), e.getY(), o.getX(), o.getY(), n.getX(), n.getY(), r.getX(), r.getY());\n    }, t.prototype.transitionsBetween = function(t, e) {\n        var r = Math.trunc(t.getX()), n = Math.trunc(t.getY()), o = Math.trunc(e.getX()), i = Math.trunc(e.getY()), a = Math.abs(i - n) > Math.abs(o - r);\n        if (a) {\n            var u = r;\n            r = n, n = u, u = o, o = i, i = u;\n        }\n        for(var s = Math.abs(o - r), c = Math.abs(i - n), f = -s / 2, h = n < i ? 1 : -1, l = r < o ? 1 : -1, d = 0, p = this.image.get(a ? n : r, a ? r : n), g = r, y = n; g !== o; g += l){\n            var w = this.image.get(a ? y : g, a ? g : y);\n            if (w !== p && (d++, p = w), (f += c) > 0) {\n                if (y === i) break;\n                y += h, f -= s;\n            }\n        }\n        return d;\n    }, t;\n}(), Or = function() {\n    function t() {\n        this.decoder = new Ir;\n    }\n    return t.prototype.decode = function(e, r) {\n        var n, o;\n        if (void 0 === r && (r = null), null != r && r.has(T.PURE_BARCODE)) {\n            var i = t.extractPureBits(e.getBlackMatrix());\n            n = this.decoder.decode(i), o = t.NO_POINTS;\n        } else {\n            var a = new Sr(e.getBlackMatrix()).detect();\n            n = this.decoder.decode(a.getBits()), o = a.getPoints();\n        }\n        var u = n.getRawBytes(), s = new et(n.getText(), u, 8 * u.length, o, nt.DATA_MATRIX, w.currentTimeMillis()), c = n.getByteSegments();\n        null != c && s.putMetadata(it.BYTE_SEGMENTS, c);\n        var f = n.getECLevel();\n        return null != f && s.putMetadata(it.ERROR_CORRECTION_LEVEL, f), s;\n    }, t.prototype.reset = function() {}, t.extractPureBits = function(t) {\n        var e = t.getTopLeftOnBit(), r = t.getBottomRightOnBit();\n        if (null == e || null == r) throw new U;\n        var n = this.moduleSize(e, t), o = e[1], i = r[1], a = e[0], u = (r[0] - a + 1) / n, s = (i - o + 1) / n;\n        if (u <= 0 || s <= 0) throw new U;\n        var c = n / 2;\n        o += c, a += c;\n        for(var f = new x(u, s), h = 0; h < s; h++)for(var l = o + h * n, d = 0; d < u; d++)t.get(a + d * n, l) && f.set(d, h);\n        return f;\n    }, t.moduleSize = function(t, e) {\n        for(var r = e.getWidth(), n = t[0], o = t[1]; n < r && e.get(n, o);)n++;\n        if (n === r) throw new U;\n        var i = n - t[0];\n        if (0 === i) throw new U;\n        return i;\n    }, t.NO_POINTS = [], t;\n}(), Tr = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}();\n!function(t) {\n    function e(e) {\n        return void 0 === e && (e = 500), t.call(this, new Or, e) || this;\n    }\n    Tr(e, t);\n}(tt), function(t) {\n    t[t.L = 0] = \"L\", t[t.M = 1] = \"M\", t[t.Q = 2] = \"Q\", t[t.H = 3] = \"H\";\n}(Ar || (Ar = {}));\nvar br, Rr = function() {\n    function t(e, r, n) {\n        this.value = e, this.stringValue = r, this.bits = n, t.FOR_BITS.set(n, this), t.FOR_VALUE.set(e, this);\n    }\n    return t.prototype.getValue = function() {\n        return this.value;\n    }, t.prototype.getBits = function() {\n        return this.bits;\n    }, t.fromString = function(e) {\n        switch(e){\n            case \"L\":\n                return t.L;\n            case \"M\":\n                return t.M;\n            case \"Q\":\n                return t.Q;\n            case \"H\":\n                return t.H;\n            default:\n                throw new f(e + \"not available\");\n        }\n    }, t.prototype.toString = function() {\n        return this.stringValue;\n    }, t.prototype.equals = function(e) {\n        if (!(e instanceof t)) return !1;\n        var r = e;\n        return this.value === r.value;\n    }, t.forBits = function(e) {\n        if (e < 0 || e >= t.FOR_BITS.size) throw new l;\n        return t.FOR_BITS.get(e);\n    }, t.FOR_BITS = new Map, t.FOR_VALUE = new Map, t.L = new t(Ar.L, \"L\", 1), t.M = new t(Ar.M, \"M\", 0), t.Q = new t(Ar.Q, \"Q\", 3), t.H = new t(Ar.H, \"H\", 2), t;\n}(), Nr = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, Dr = function() {\n    function t(t) {\n        this.errorCorrectionLevel = Rr.forBits(t >> 3 & 3), this.dataMask = 7 & t;\n    }\n    return t.numBitsDiffering = function(t, e) {\n        return I.bitCount(t ^ e);\n    }, t.decodeFormatInformation = function(e, r) {\n        var n = t.doDecodeFormatInformation(e, r);\n        return null !== n ? n : t.doDecodeFormatInformation(e ^ t.FORMAT_INFO_MASK_QR, r ^ t.FORMAT_INFO_MASK_QR);\n    }, t.doDecodeFormatInformation = function(e, r) {\n        var n, o, i = Number.MAX_SAFE_INTEGER, a = 0;\n        try {\n            for(var u = Nr(t.FORMAT_INFO_DECODE_LOOKUP), s = u.next(); !s.done; s = u.next()){\n                var c = s.value, f = c[0];\n                if (f === e || f === r) return new t(c[1]);\n                var h = t.numBitsDiffering(e, f);\n                h < i && (a = c[1], i = h), e !== r && (h = t.numBitsDiffering(r, f)) < i && (a = c[1], i = h);\n            }\n        } catch (t) {\n            n = {\n                error: t\n            };\n        } finally{\n            try {\n                s && !s.done && (o = u.return) && o.call(u);\n            } finally{\n                if (n) throw n.error;\n            }\n        }\n        return i <= 3 ? new t(a) : null;\n    }, t.prototype.getErrorCorrectionLevel = function() {\n        return this.errorCorrectionLevel;\n    }, t.prototype.getDataMask = function() {\n        return this.dataMask;\n    }, t.prototype.hashCode = function() {\n        return this.errorCorrectionLevel.getBits() << 3 | this.dataMask;\n    }, t.prototype.equals = function(e) {\n        if (!(e instanceof t)) return !1;\n        var r = e;\n        return this.errorCorrectionLevel === r.errorCorrectionLevel && this.dataMask === r.dataMask;\n    }, t.FORMAT_INFO_MASK_QR = 21522, t.FORMAT_INFO_DECODE_LOOKUP = [\n        Int32Array.from([\n            21522,\n            0\n        ]),\n        Int32Array.from([\n            20773,\n            1\n        ]),\n        Int32Array.from([\n            24188,\n            2\n        ]),\n        Int32Array.from([\n            23371,\n            3\n        ]),\n        Int32Array.from([\n            17913,\n            4\n        ]),\n        Int32Array.from([\n            16590,\n            5\n        ]),\n        Int32Array.from([\n            20375,\n            6\n        ]),\n        Int32Array.from([\n            19104,\n            7\n        ]),\n        Int32Array.from([\n            30660,\n            8\n        ]),\n        Int32Array.from([\n            29427,\n            9\n        ]),\n        Int32Array.from([\n            32170,\n            10\n        ]),\n        Int32Array.from([\n            30877,\n            11\n        ]),\n        Int32Array.from([\n            26159,\n            12\n        ]),\n        Int32Array.from([\n            25368,\n            13\n        ]),\n        Int32Array.from([\n            27713,\n            14\n        ]),\n        Int32Array.from([\n            26998,\n            15\n        ]),\n        Int32Array.from([\n            5769,\n            16\n        ]),\n        Int32Array.from([\n            5054,\n            17\n        ]),\n        Int32Array.from([\n            7399,\n            18\n        ]),\n        Int32Array.from([\n            6608,\n            19\n        ]),\n        Int32Array.from([\n            1890,\n            20\n        ]),\n        Int32Array.from([\n            597,\n            21\n        ]),\n        Int32Array.from([\n            3340,\n            22\n        ]),\n        Int32Array.from([\n            2107,\n            23\n        ]),\n        Int32Array.from([\n            13663,\n            24\n        ]),\n        Int32Array.from([\n            12392,\n            25\n        ]),\n        Int32Array.from([\n            16177,\n            26\n        ]),\n        Int32Array.from([\n            14854,\n            27\n        ]),\n        Int32Array.from([\n            9396,\n            28\n        ]),\n        Int32Array.from([\n            8579,\n            29\n        ]),\n        Int32Array.from([\n            11994,\n            30\n        ]),\n        Int32Array.from([\n            11245,\n            31\n        ])\n    ], t;\n}(), Pr = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, Mr = function() {\n    function t(t) {\n        for(var e = [], r = 1; r < arguments.length; r++)e[r - 1] = arguments[r];\n        this.ecCodewordsPerBlock = t, this.ecBlocks = e;\n    }\n    return t.prototype.getECCodewordsPerBlock = function() {\n        return this.ecCodewordsPerBlock;\n    }, t.prototype.getNumBlocks = function() {\n        var t, e, r = 0, n = this.ecBlocks;\n        try {\n            for(var o = Pr(n), i = o.next(); !i.done; i = o.next()){\n                r += i.value.getCount();\n            }\n        } catch (e) {\n            t = {\n                error: e\n            };\n        } finally{\n            try {\n                i && !i.done && (e = o.return) && e.call(o);\n            } finally{\n                if (t) throw t.error;\n            }\n        }\n        return r;\n    }, t.prototype.getTotalECCodewords = function() {\n        return this.ecCodewordsPerBlock * this.getNumBlocks();\n    }, t.prototype.getECBlocks = function() {\n        return this.ecBlocks;\n    }, t;\n}(), Br = function() {\n    function t(t, e) {\n        this.count = t, this.dataCodewords = e;\n    }\n    return t.prototype.getCount = function() {\n        return this.count;\n    }, t.prototype.getDataCodewords = function() {\n        return this.dataCodewords;\n    }, t;\n}(), Lr = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, Fr = function() {\n    function t(t, e) {\n        for(var r, n, o = [], i = 2; i < arguments.length; i++)o[i - 2] = arguments[i];\n        this.versionNumber = t, this.alignmentPatternCenters = e, this.ecBlocks = o;\n        var a = 0, u = o[0].getECCodewordsPerBlock(), s = o[0].getECBlocks();\n        try {\n            for(var c = Lr(s), f = c.next(); !f.done; f = c.next()){\n                var h = f.value;\n                a += h.getCount() * (h.getDataCodewords() + u);\n            }\n        } catch (t) {\n            r = {\n                error: t\n            };\n        } finally{\n            try {\n                f && !f.done && (n = c.return) && n.call(c);\n            } finally{\n                if (r) throw r.error;\n            }\n        }\n        this.totalCodewords = a;\n    }\n    return t.prototype.getVersionNumber = function() {\n        return this.versionNumber;\n    }, t.prototype.getAlignmentPatternCenters = function() {\n        return this.alignmentPatternCenters;\n    }, t.prototype.getTotalCodewords = function() {\n        return this.totalCodewords;\n    }, t.prototype.getDimensionForVersion = function() {\n        return 17 + 4 * this.versionNumber;\n    }, t.prototype.getECBlocksForLevel = function(t) {\n        return this.ecBlocks[t.getValue()];\n    }, t.getProvisionalVersionForDimension = function(t) {\n        if (t % 4 != 1) throw new R;\n        try {\n            return this.getVersionForNumber((t - 17) / 4);\n        } catch (t) {\n            throw new R;\n        }\n    }, t.getVersionForNumber = function(e) {\n        if (e < 1 || e > 40) throw new l;\n        return t.VERSIONS[e - 1];\n    }, t.decodeVersionInformation = function(e) {\n        for(var r = Number.MAX_SAFE_INTEGER, n = 0, o = 0; o < t.VERSION_DECODE_INFO.length; o++){\n            var i = t.VERSION_DECODE_INFO[o];\n            if (i === e) return t.getVersionForNumber(o + 7);\n            var a = Dr.numBitsDiffering(e, i);\n            a < r && (n = o + 7, r = a);\n        }\n        return r <= 3 ? t.getVersionForNumber(n) : null;\n    }, t.prototype.buildFunctionPattern = function() {\n        var t = this.getDimensionForVersion(), e = new x(t);\n        e.setRegion(0, 0, 9, 9), e.setRegion(t - 8, 0, 8, 9), e.setRegion(0, t - 8, 9, 8);\n        for(var r = this.alignmentPatternCenters.length, n = 0; n < r; n++)for(var o = this.alignmentPatternCenters[n] - 2, i = 0; i < r; i++)0 === n && (0 === i || i === r - 1) || n === r - 1 && 0 === i || e.setRegion(this.alignmentPatternCenters[i] - 2, o, 5, 5);\n        return e.setRegion(6, 9, 1, t - 17), e.setRegion(9, 6, t - 17, 1), this.versionNumber > 6 && (e.setRegion(t - 11, 0, 3, 6), e.setRegion(0, t - 11, 6, 3)), e;\n    }, t.prototype.toString = function() {\n        return \"\" + this.versionNumber;\n    }, t.VERSION_DECODE_INFO = Int32Array.from([\n        31892,\n        34236,\n        39577,\n        42195,\n        48118,\n        51042,\n        55367,\n        58893,\n        63784,\n        68472,\n        70749,\n        76311,\n        79154,\n        84390,\n        87683,\n        92361,\n        96236,\n        102084,\n        102881,\n        110507,\n        110734,\n        117786,\n        119615,\n        126325,\n        127568,\n        133589,\n        136944,\n        141498,\n        145311,\n        150283,\n        152622,\n        158308,\n        161089,\n        167017\n    ]), t.VERSIONS = [\n        new t(1, new Int32Array(0), new Mr(7, new Br(1, 19)), new Mr(10, new Br(1, 16)), new Mr(13, new Br(1, 13)), new Mr(17, new Br(1, 9))),\n        new t(2, Int32Array.from([\n            6,\n            18\n        ]), new Mr(10, new Br(1, 34)), new Mr(16, new Br(1, 28)), new Mr(22, new Br(1, 22)), new Mr(28, new Br(1, 16))),\n        new t(3, Int32Array.from([\n            6,\n            22\n        ]), new Mr(15, new Br(1, 55)), new Mr(26, new Br(1, 44)), new Mr(18, new Br(2, 17)), new Mr(22, new Br(2, 13))),\n        new t(4, Int32Array.from([\n            6,\n            26\n        ]), new Mr(20, new Br(1, 80)), new Mr(18, new Br(2, 32)), new Mr(26, new Br(2, 24)), new Mr(16, new Br(4, 9))),\n        new t(5, Int32Array.from([\n            6,\n            30\n        ]), new Mr(26, new Br(1, 108)), new Mr(24, new Br(2, 43)), new Mr(18, new Br(2, 15), new Br(2, 16)), new Mr(22, new Br(2, 11), new Br(2, 12))),\n        new t(6, Int32Array.from([\n            6,\n            34\n        ]), new Mr(18, new Br(2, 68)), new Mr(16, new Br(4, 27)), new Mr(24, new Br(4, 19)), new Mr(28, new Br(4, 15))),\n        new t(7, Int32Array.from([\n            6,\n            22,\n            38\n        ]), new Mr(20, new Br(2, 78)), new Mr(18, new Br(4, 31)), new Mr(18, new Br(2, 14), new Br(4, 15)), new Mr(26, new Br(4, 13), new Br(1, 14))),\n        new t(8, Int32Array.from([\n            6,\n            24,\n            42\n        ]), new Mr(24, new Br(2, 97)), new Mr(22, new Br(2, 38), new Br(2, 39)), new Mr(22, new Br(4, 18), new Br(2, 19)), new Mr(26, new Br(4, 14), new Br(2, 15))),\n        new t(9, Int32Array.from([\n            6,\n            26,\n            46\n        ]), new Mr(30, new Br(2, 116)), new Mr(22, new Br(3, 36), new Br(2, 37)), new Mr(20, new Br(4, 16), new Br(4, 17)), new Mr(24, new Br(4, 12), new Br(4, 13))),\n        new t(10, Int32Array.from([\n            6,\n            28,\n            50\n        ]), new Mr(18, new Br(2, 68), new Br(2, 69)), new Mr(26, new Br(4, 43), new Br(1, 44)), new Mr(24, new Br(6, 19), new Br(2, 20)), new Mr(28, new Br(6, 15), new Br(2, 16))),\n        new t(11, Int32Array.from([\n            6,\n            30,\n            54\n        ]), new Mr(20, new Br(4, 81)), new Mr(30, new Br(1, 50), new Br(4, 51)), new Mr(28, new Br(4, 22), new Br(4, 23)), new Mr(24, new Br(3, 12), new Br(8, 13))),\n        new t(12, Int32Array.from([\n            6,\n            32,\n            58\n        ]), new Mr(24, new Br(2, 92), new Br(2, 93)), new Mr(22, new Br(6, 36), new Br(2, 37)), new Mr(26, new Br(4, 20), new Br(6, 21)), new Mr(28, new Br(7, 14), new Br(4, 15))),\n        new t(13, Int32Array.from([\n            6,\n            34,\n            62\n        ]), new Mr(26, new Br(4, 107)), new Mr(22, new Br(8, 37), new Br(1, 38)), new Mr(24, new Br(8, 20), new Br(4, 21)), new Mr(22, new Br(12, 11), new Br(4, 12))),\n        new t(14, Int32Array.from([\n            6,\n            26,\n            46,\n            66\n        ]), new Mr(30, new Br(3, 115), new Br(1, 116)), new Mr(24, new Br(4, 40), new Br(5, 41)), new Mr(20, new Br(11, 16), new Br(5, 17)), new Mr(24, new Br(11, 12), new Br(5, 13))),\n        new t(15, Int32Array.from([\n            6,\n            26,\n            48,\n            70\n        ]), new Mr(22, new Br(5, 87), new Br(1, 88)), new Mr(24, new Br(5, 41), new Br(5, 42)), new Mr(30, new Br(5, 24), new Br(7, 25)), new Mr(24, new Br(11, 12), new Br(7, 13))),\n        new t(16, Int32Array.from([\n            6,\n            26,\n            50,\n            74\n        ]), new Mr(24, new Br(5, 98), new Br(1, 99)), new Mr(28, new Br(7, 45), new Br(3, 46)), new Mr(24, new Br(15, 19), new Br(2, 20)), new Mr(30, new Br(3, 15), new Br(13, 16))),\n        new t(17, Int32Array.from([\n            6,\n            30,\n            54,\n            78\n        ]), new Mr(28, new Br(1, 107), new Br(5, 108)), new Mr(28, new Br(10, 46), new Br(1, 47)), new Mr(28, new Br(1, 22), new Br(15, 23)), new Mr(28, new Br(2, 14), new Br(17, 15))),\n        new t(18, Int32Array.from([\n            6,\n            30,\n            56,\n            82\n        ]), new Mr(30, new Br(5, 120), new Br(1, 121)), new Mr(26, new Br(9, 43), new Br(4, 44)), new Mr(28, new Br(17, 22), new Br(1, 23)), new Mr(28, new Br(2, 14), new Br(19, 15))),\n        new t(19, Int32Array.from([\n            6,\n            30,\n            58,\n            86\n        ]), new Mr(28, new Br(3, 113), new Br(4, 114)), new Mr(26, new Br(3, 44), new Br(11, 45)), new Mr(26, new Br(17, 21), new Br(4, 22)), new Mr(26, new Br(9, 13), new Br(16, 14))),\n        new t(20, Int32Array.from([\n            6,\n            34,\n            62,\n            90\n        ]), new Mr(28, new Br(3, 107), new Br(5, 108)), new Mr(26, new Br(3, 41), new Br(13, 42)), new Mr(30, new Br(15, 24), new Br(5, 25)), new Mr(28, new Br(15, 15), new Br(10, 16))),\n        new t(21, Int32Array.from([\n            6,\n            28,\n            50,\n            72,\n            94\n        ]), new Mr(28, new Br(4, 116), new Br(4, 117)), new Mr(26, new Br(17, 42)), new Mr(28, new Br(17, 22), new Br(6, 23)), new Mr(30, new Br(19, 16), new Br(6, 17))),\n        new t(22, Int32Array.from([\n            6,\n            26,\n            50,\n            74,\n            98\n        ]), new Mr(28, new Br(2, 111), new Br(7, 112)), new Mr(28, new Br(17, 46)), new Mr(30, new Br(7, 24), new Br(16, 25)), new Mr(24, new Br(34, 13))),\n        new t(23, Int32Array.from([\n            6,\n            30,\n            54,\n            78,\n            102\n        ]), new Mr(30, new Br(4, 121), new Br(5, 122)), new Mr(28, new Br(4, 47), new Br(14, 48)), new Mr(30, new Br(11, 24), new Br(14, 25)), new Mr(30, new Br(16, 15), new Br(14, 16))),\n        new t(24, Int32Array.from([\n            6,\n            28,\n            54,\n            80,\n            106\n        ]), new Mr(30, new Br(6, 117), new Br(4, 118)), new Mr(28, new Br(6, 45), new Br(14, 46)), new Mr(30, new Br(11, 24), new Br(16, 25)), new Mr(30, new Br(30, 16), new Br(2, 17))),\n        new t(25, Int32Array.from([\n            6,\n            32,\n            58,\n            84,\n            110\n        ]), new Mr(26, new Br(8, 106), new Br(4, 107)), new Mr(28, new Br(8, 47), new Br(13, 48)), new Mr(30, new Br(7, 24), new Br(22, 25)), new Mr(30, new Br(22, 15), new Br(13, 16))),\n        new t(26, Int32Array.from([\n            6,\n            30,\n            58,\n            86,\n            114\n        ]), new Mr(28, new Br(10, 114), new Br(2, 115)), new Mr(28, new Br(19, 46), new Br(4, 47)), new Mr(28, new Br(28, 22), new Br(6, 23)), new Mr(30, new Br(33, 16), new Br(4, 17))),\n        new t(27, Int32Array.from([\n            6,\n            34,\n            62,\n            90,\n            118\n        ]), new Mr(30, new Br(8, 122), new Br(4, 123)), new Mr(28, new Br(22, 45), new Br(3, 46)), new Mr(30, new Br(8, 23), new Br(26, 24)), new Mr(30, new Br(12, 15), new Br(28, 16))),\n        new t(28, Int32Array.from([\n            6,\n            26,\n            50,\n            74,\n            98,\n            122\n        ]), new Mr(30, new Br(3, 117), new Br(10, 118)), new Mr(28, new Br(3, 45), new Br(23, 46)), new Mr(30, new Br(4, 24), new Br(31, 25)), new Mr(30, new Br(11, 15), new Br(31, 16))),\n        new t(29, Int32Array.from([\n            6,\n            30,\n            54,\n            78,\n            102,\n            126\n        ]), new Mr(30, new Br(7, 116), new Br(7, 117)), new Mr(28, new Br(21, 45), new Br(7, 46)), new Mr(30, new Br(1, 23), new Br(37, 24)), new Mr(30, new Br(19, 15), new Br(26, 16))),\n        new t(30, Int32Array.from([\n            6,\n            26,\n            52,\n            78,\n            104,\n            130\n        ]), new Mr(30, new Br(5, 115), new Br(10, 116)), new Mr(28, new Br(19, 47), new Br(10, 48)), new Mr(30, new Br(15, 24), new Br(25, 25)), new Mr(30, new Br(23, 15), new Br(25, 16))),\n        new t(31, Int32Array.from([\n            6,\n            30,\n            56,\n            82,\n            108,\n            134\n        ]), new Mr(30, new Br(13, 115), new Br(3, 116)), new Mr(28, new Br(2, 46), new Br(29, 47)), new Mr(30, new Br(42, 24), new Br(1, 25)), new Mr(30, new Br(23, 15), new Br(28, 16))),\n        new t(32, Int32Array.from([\n            6,\n            34,\n            60,\n            86,\n            112,\n            138\n        ]), new Mr(30, new Br(17, 115)), new Mr(28, new Br(10, 46), new Br(23, 47)), new Mr(30, new Br(10, 24), new Br(35, 25)), new Mr(30, new Br(19, 15), new Br(35, 16))),\n        new t(33, Int32Array.from([\n            6,\n            30,\n            58,\n            86,\n            114,\n            142\n        ]), new Mr(30, new Br(17, 115), new Br(1, 116)), new Mr(28, new Br(14, 46), new Br(21, 47)), new Mr(30, new Br(29, 24), new Br(19, 25)), new Mr(30, new Br(11, 15), new Br(46, 16))),\n        new t(34, Int32Array.from([\n            6,\n            34,\n            62,\n            90,\n            118,\n            146\n        ]), new Mr(30, new Br(13, 115), new Br(6, 116)), new Mr(28, new Br(14, 46), new Br(23, 47)), new Mr(30, new Br(44, 24), new Br(7, 25)), new Mr(30, new Br(59, 16), new Br(1, 17))),\n        new t(35, Int32Array.from([\n            6,\n            30,\n            54,\n            78,\n            102,\n            126,\n            150\n        ]), new Mr(30, new Br(12, 121), new Br(7, 122)), new Mr(28, new Br(12, 47), new Br(26, 48)), new Mr(30, new Br(39, 24), new Br(14, 25)), new Mr(30, new Br(22, 15), new Br(41, 16))),\n        new t(36, Int32Array.from([\n            6,\n            24,\n            50,\n            76,\n            102,\n            128,\n            154\n        ]), new Mr(30, new Br(6, 121), new Br(14, 122)), new Mr(28, new Br(6, 47), new Br(34, 48)), new Mr(30, new Br(46, 24), new Br(10, 25)), new Mr(30, new Br(2, 15), new Br(64, 16))),\n        new t(37, Int32Array.from([\n            6,\n            28,\n            54,\n            80,\n            106,\n            132,\n            158\n        ]), new Mr(30, new Br(17, 122), new Br(4, 123)), new Mr(28, new Br(29, 46), new Br(14, 47)), new Mr(30, new Br(49, 24), new Br(10, 25)), new Mr(30, new Br(24, 15), new Br(46, 16))),\n        new t(38, Int32Array.from([\n            6,\n            32,\n            58,\n            84,\n            110,\n            136,\n            162\n        ]), new Mr(30, new Br(4, 122), new Br(18, 123)), new Mr(28, new Br(13, 46), new Br(32, 47)), new Mr(30, new Br(48, 24), new Br(14, 25)), new Mr(30, new Br(42, 15), new Br(32, 16))),\n        new t(39, Int32Array.from([\n            6,\n            26,\n            54,\n            82,\n            110,\n            138,\n            166\n        ]), new Mr(30, new Br(20, 117), new Br(4, 118)), new Mr(28, new Br(40, 47), new Br(7, 48)), new Mr(30, new Br(43, 24), new Br(22, 25)), new Mr(30, new Br(10, 15), new Br(67, 16))),\n        new t(40, Int32Array.from([\n            6,\n            30,\n            58,\n            86,\n            114,\n            142,\n            170\n        ]), new Mr(30, new Br(19, 118), new Br(6, 119)), new Mr(28, new Br(18, 47), new Br(31, 48)), new Mr(30, new Br(34, 24), new Br(34, 25)), new Mr(30, new Br(20, 15), new Br(61, 16)))\n    ], t;\n}();\n!function(t) {\n    t[t.DATA_MASK_000 = 0] = \"DATA_MASK_000\", t[t.DATA_MASK_001 = 1] = \"DATA_MASK_001\", t[t.DATA_MASK_010 = 2] = \"DATA_MASK_010\", t[t.DATA_MASK_011 = 3] = \"DATA_MASK_011\", t[t.DATA_MASK_100 = 4] = \"DATA_MASK_100\", t[t.DATA_MASK_101 = 5] = \"DATA_MASK_101\", t[t.DATA_MASK_110 = 6] = \"DATA_MASK_110\", t[t.DATA_MASK_111 = 7] = \"DATA_MASK_111\";\n}(br || (br = {}));\nvar kr, xr = function() {\n    function t(t, e) {\n        this.value = t, this.isMasked = e;\n    }\n    return t.prototype.unmaskBitMatrix = function(t, e) {\n        for(var r = 0; r < e; r++)for(var n = 0; n < e; n++)this.isMasked(r, n) && t.flip(n, r);\n    }, t.values = new Map([\n        [\n            br.DATA_MASK_000,\n            new t(br.DATA_MASK_000, function(t, e) {\n                return 0 == (t + e & 1);\n            })\n        ],\n        [\n            br.DATA_MASK_001,\n            new t(br.DATA_MASK_001, function(t, e) {\n                return 0 == (1 & t);\n            })\n        ],\n        [\n            br.DATA_MASK_010,\n            new t(br.DATA_MASK_010, function(t, e) {\n                return e % 3 == 0;\n            })\n        ],\n        [\n            br.DATA_MASK_011,\n            new t(br.DATA_MASK_011, function(t, e) {\n                return (t + e) % 3 == 0;\n            })\n        ],\n        [\n            br.DATA_MASK_100,\n            new t(br.DATA_MASK_100, function(t, e) {\n                return 0 == (Math.floor(t / 2) + Math.floor(e / 3) & 1);\n            })\n        ],\n        [\n            br.DATA_MASK_101,\n            new t(br.DATA_MASK_101, function(t, e) {\n                return t * e % 6 == 0;\n            })\n        ],\n        [\n            br.DATA_MASK_110,\n            new t(br.DATA_MASK_110, function(t, e) {\n                return t * e % 6 < 3;\n            })\n        ],\n        [\n            br.DATA_MASK_111,\n            new t(br.DATA_MASK_111, function(t, e) {\n                return 0 == (t + e + t * e % 3 & 1);\n            })\n        ]\n    ]), t;\n}(), Vr = function() {\n    function t(t) {\n        var e = t.getHeight();\n        if (e < 21 || 1 != (3 & e)) throw new R;\n        this.bitMatrix = t;\n    }\n    return t.prototype.readFormatInformation = function() {\n        if (null !== this.parsedFormatInfo && void 0 !== this.parsedFormatInfo) return this.parsedFormatInfo;\n        for(var t = 0, e = 0; e < 6; e++)t = this.copyBit(e, 8, t);\n        t = this.copyBit(7, 8, t), t = this.copyBit(8, 8, t), t = this.copyBit(8, 7, t);\n        for(var r = 5; r >= 0; r--)t = this.copyBit(8, r, t);\n        var n = this.bitMatrix.getHeight(), o = 0, i = n - 7;\n        for(r = n - 1; r >= i; r--)o = this.copyBit(8, r, o);\n        for(e = n - 8; e < n; e++)o = this.copyBit(e, 8, o);\n        if (this.parsedFormatInfo = Dr.decodeFormatInformation(t, o), null !== this.parsedFormatInfo) return this.parsedFormatInfo;\n        throw new R;\n    }, t.prototype.readVersion = function() {\n        if (null !== this.parsedVersion && void 0 !== this.parsedVersion) return this.parsedVersion;\n        var t = this.bitMatrix.getHeight(), e = Math.floor((t - 17) / 4);\n        if (e <= 6) return Fr.getVersionForNumber(e);\n        for(var r = 0, n = t - 11, o = 5; o >= 0; o--)for(var i = t - 9; i >= n; i--)r = this.copyBit(i, o, r);\n        var a = Fr.decodeVersionInformation(r);\n        if (null !== a && a.getDimensionForVersion() === t) return this.parsedVersion = a, a;\n        r = 0;\n        for(i = 5; i >= 0; i--)for(o = t - 9; o >= n; o--)r = this.copyBit(i, o, r);\n        if (null !== (a = Fr.decodeVersionInformation(r)) && a.getDimensionForVersion() === t) return this.parsedVersion = a, a;\n        throw new R;\n    }, t.prototype.copyBit = function(t, e, r) {\n        return (this.isMirror ? this.bitMatrix.get(e, t) : this.bitMatrix.get(t, e)) ? r << 1 | 1 : r << 1;\n    }, t.prototype.readCodewords = function() {\n        var t = this.readFormatInformation(), e = this.readVersion(), r = xr.values.get(t.getDataMask()), n = this.bitMatrix.getHeight();\n        r.unmaskBitMatrix(this.bitMatrix, n);\n        for(var o = e.buildFunctionPattern(), i = !0, a = new Uint8Array(e.getTotalCodewords()), u = 0, s = 0, c = 0, f = n - 1; f > 0; f -= 2){\n            6 === f && f--;\n            for(var h = 0; h < n; h++)for(var l = i ? n - 1 - h : h, d = 0; d < 2; d++)o.get(f - d, l) || (c++, s <<= 1, this.bitMatrix.get(f - d, l) && (s |= 1), 8 === c && (a[u++] = s, c = 0, s = 0));\n            i = !i;\n        }\n        if (u !== e.getTotalCodewords()) throw new R;\n        return a;\n    }, t.prototype.remask = function() {\n        if (null !== this.parsedFormatInfo) {\n            var t = xr.values[this.parsedFormatInfo.getDataMask()], e = this.bitMatrix.getHeight();\n            t.unmaskBitMatrix(this.bitMatrix, e);\n        }\n    }, t.prototype.setMirror = function(t) {\n        this.parsedVersion = null, this.parsedFormatInfo = null, this.isMirror = t;\n    }, t.prototype.mirror = function() {\n        for(var t = this.bitMatrix, e = 0, r = t.getWidth(); e < r; e++)for(var n = e + 1, o = t.getHeight(); n < o; n++)t.get(e, n) !== t.get(n, e) && (t.flip(n, e), t.flip(e, n));\n    }, t;\n}(), Ur = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, Hr = function() {\n    function t(t, e) {\n        this.numDataCodewords = t, this.codewords = e;\n    }\n    return t.getDataBlocks = function(e, r, n) {\n        var o, i, a, u;\n        if (e.length !== r.getTotalCodewords()) throw new l;\n        var s = r.getECBlocksForLevel(n), c = 0, f = s.getECBlocks();\n        try {\n            for(var h = Ur(f), d = h.next(); !d.done; d = h.next()){\n                c += (_ = d.value).getCount();\n            }\n        } catch (t) {\n            o = {\n                error: t\n            };\n        } finally{\n            try {\n                d && !d.done && (i = h.return) && i.call(h);\n            } finally{\n                if (o) throw o.error;\n            }\n        }\n        var p = new Array(c), g = 0;\n        try {\n            for(var y = Ur(f), w = y.next(); !w.done; w = y.next())for(var _ = w.value, v = 0; v < _.getCount(); v++){\n                var m = _.getDataCodewords(), A = s.getECCodewordsPerBlock() + m;\n                p[g++] = new t(m, new Uint8Array(A));\n            }\n        } catch (t) {\n            a = {\n                error: t\n            };\n        } finally{\n            try {\n                w && !w.done && (u = y.return) && u.call(y);\n            } finally{\n                if (a) throw a.error;\n            }\n        }\n        for(var E = p[0].codewords.length, C = p.length - 1; C >= 0;){\n            if (p[C].codewords.length === E) break;\n            C--;\n        }\n        C++;\n        var I = E - s.getECCodewordsPerBlock(), S = 0;\n        for(v = 0; v < I; v++)for(var O = 0; O < g; O++)p[O].codewords[v] = e[S++];\n        for(O = C; O < g; O++)p[O].codewords[I] = e[S++];\n        var T = p[0].codewords.length;\n        for(v = I; v < T; v++)for(O = 0; O < g; O++){\n            var b = O < C ? v : v + 1;\n            p[O].codewords[b] = e[S++];\n        }\n        return p;\n    }, t.prototype.getNumDataCodewords = function() {\n        return this.numDataCodewords;\n    }, t.prototype.getCodewords = function() {\n        return this.codewords;\n    }, t;\n}();\n!function(t) {\n    t[t.TERMINATOR = 0] = \"TERMINATOR\", t[t.NUMERIC = 1] = \"NUMERIC\", t[t.ALPHANUMERIC = 2] = \"ALPHANUMERIC\", t[t.STRUCTURED_APPEND = 3] = \"STRUCTURED_APPEND\", t[t.BYTE = 4] = \"BYTE\", t[t.ECI = 5] = \"ECI\", t[t.KANJI = 6] = \"KANJI\", t[t.FNC1_FIRST_POSITION = 7] = \"FNC1_FIRST_POSITION\", t[t.FNC1_SECOND_POSITION = 8] = \"FNC1_SECOND_POSITION\", t[t.HANZI = 9] = \"HANZI\";\n}(kr || (kr = {}));\nvar Gr, Xr, Wr = function() {\n    function t(e, r, n, o) {\n        this.value = e, this.stringValue = r, this.characterCountBitsForVersions = n, this.bits = o, t.FOR_BITS.set(o, this), t.FOR_VALUE.set(e, this);\n    }\n    return t.forBits = function(e) {\n        var r = t.FOR_BITS.get(e);\n        if (void 0 === r) throw new l;\n        return r;\n    }, t.prototype.getCharacterCountBits = function(t) {\n        var e, r = t.getVersionNumber();\n        return e = r <= 9 ? 0 : r <= 26 ? 1 : 2, this.characterCountBitsForVersions[e];\n    }, t.prototype.getValue = function() {\n        return this.value;\n    }, t.prototype.getBits = function() {\n        return this.bits;\n    }, t.prototype.equals = function(e) {\n        if (!(e instanceof t)) return !1;\n        var r = e;\n        return this.value === r.value;\n    }, t.prototype.toString = function() {\n        return this.stringValue;\n    }, t.FOR_BITS = new Map, t.FOR_VALUE = new Map, t.TERMINATOR = new t(kr.TERMINATOR, \"TERMINATOR\", Int32Array.from([\n        0,\n        0,\n        0\n    ]), 0), t.NUMERIC = new t(kr.NUMERIC, \"NUMERIC\", Int32Array.from([\n        10,\n        12,\n        14\n    ]), 1), t.ALPHANUMERIC = new t(kr.ALPHANUMERIC, \"ALPHANUMERIC\", Int32Array.from([\n        9,\n        11,\n        13\n    ]), 2), t.STRUCTURED_APPEND = new t(kr.STRUCTURED_APPEND, \"STRUCTURED_APPEND\", Int32Array.from([\n        0,\n        0,\n        0\n    ]), 3), t.BYTE = new t(kr.BYTE, \"BYTE\", Int32Array.from([\n        8,\n        16,\n        16\n    ]), 4), t.ECI = new t(kr.ECI, \"ECI\", Int32Array.from([\n        0,\n        0,\n        0\n    ]), 7), t.KANJI = new t(kr.KANJI, \"KANJI\", Int32Array.from([\n        8,\n        10,\n        12\n    ]), 8), t.FNC1_FIRST_POSITION = new t(kr.FNC1_FIRST_POSITION, \"FNC1_FIRST_POSITION\", Int32Array.from([\n        0,\n        0,\n        0\n    ]), 5), t.FNC1_SECOND_POSITION = new t(kr.FNC1_SECOND_POSITION, \"FNC1_SECOND_POSITION\", Int32Array.from([\n        0,\n        0,\n        0\n    ]), 9), t.HANZI = new t(kr.HANZI, \"HANZI\", Int32Array.from([\n        8,\n        10,\n        12\n    ]), 13), t;\n}(), jr = function() {\n    function t() {}\n    return t.decode = function(e, r, n, o) {\n        var i = new mr(e), a = new k, u = new Array, s = -1, c = -1;\n        try {\n            var f = null, h = !1, l = void 0;\n            do {\n                if (i.available() < 4) l = Wr.TERMINATOR;\n                else {\n                    var d = i.readBits(4);\n                    l = Wr.forBits(d);\n                }\n                switch(l){\n                    case Wr.TERMINATOR:\n                        break;\n                    case Wr.FNC1_FIRST_POSITION:\n                    case Wr.FNC1_SECOND_POSITION:\n                        h = !0;\n                        break;\n                    case Wr.STRUCTURED_APPEND:\n                        if (i.available() < 16) throw new R;\n                        s = i.readBits(8), c = i.readBits(8);\n                        break;\n                    case Wr.ECI:\n                        var p = t.parseECIValue(i);\n                        if (null === (f = P.getCharacterSetECIByValue(p))) throw new R;\n                        break;\n                    case Wr.HANZI:\n                        var g = i.readBits(4), y = i.readBits(l.getCharacterCountBits(r));\n                        g === t.GB2312_SUBSET && t.decodeHanziSegment(i, a, y);\n                        break;\n                    default:\n                        var w = i.readBits(l.getCharacterCountBits(r));\n                        switch(l){\n                            case Wr.NUMERIC:\n                                t.decodeNumericSegment(i, a, w);\n                                break;\n                            case Wr.ALPHANUMERIC:\n                                t.decodeAlphanumericSegment(i, a, w, h);\n                                break;\n                            case Wr.BYTE:\n                                t.decodeByteSegment(i, a, w, f, u, o);\n                                break;\n                            case Wr.KANJI:\n                                t.decodeKanjiSegment(i, a, w);\n                                break;\n                            default:\n                                throw new R;\n                        }\n                }\n            }while (l !== Wr.TERMINATOR);\n        } catch (t) {\n            throw new R;\n        }\n        return new at(e, a.toString(), 0 === u.length ? null : u, null === n ? null : n.toString(), s, c);\n    }, t.decodeHanziSegment = function(t, e, r) {\n        if (13 * r > t.available()) throw new R;\n        for(var n = new Uint8Array(2 * r), o = 0; r > 0;){\n            var i = t.readBits(13), a = i / 96 << 8 & 4294967295 | i % 96;\n            a += a < 959 ? 41377 : 42657, n[o] = a >> 8 & 255, n[o + 1] = 255 & a, o += 2, r--;\n        }\n        try {\n            e.append(L.decode(n, F.GB2312));\n        } catch (t) {\n            throw new R(t);\n        }\n    }, t.decodeKanjiSegment = function(t, e, r) {\n        if (13 * r > t.available()) throw new R;\n        for(var n = new Uint8Array(2 * r), o = 0; r > 0;){\n            var i = t.readBits(13), a = i / 192 << 8 & 4294967295 | i % 192;\n            a += a < 7936 ? 33088 : 49472, n[o] = a >> 8, n[o + 1] = a, o += 2, r--;\n        }\n        try {\n            e.append(L.decode(n, F.SHIFT_JIS));\n        } catch (t) {\n            throw new R(t);\n        }\n    }, t.decodeByteSegment = function(t, e, r, n, o, i) {\n        if (8 * r > t.available()) throw new R;\n        for(var a, u = new Uint8Array(r), s = 0; s < r; s++)u[s] = t.readBits(8);\n        a = null === n ? F.guessEncoding(u, i) : n.getName();\n        try {\n            e.append(L.decode(u, a));\n        } catch (t) {\n            throw new R(t);\n        }\n        o.push(u);\n    }, t.toAlphaNumericChar = function(e) {\n        if (e >= t.ALPHANUMERIC_CHARS.length) throw new R;\n        return t.ALPHANUMERIC_CHARS[e];\n    }, t.decodeAlphanumericSegment = function(e, r, n, o) {\n        for(var i = r.length(); n > 1;){\n            if (e.available() < 11) throw new R;\n            var a = e.readBits(11);\n            r.append(t.toAlphaNumericChar(Math.floor(a / 45))), r.append(t.toAlphaNumericChar(a % 45)), n -= 2;\n        }\n        if (1 === n) {\n            if (e.available() < 6) throw new R;\n            r.append(t.toAlphaNumericChar(e.readBits(6)));\n        }\n        if (o) for(var u = i; u < r.length(); u++)\"%\" === r.charAt(u) && (u < r.length() - 1 && \"%\" === r.charAt(u + 1) ? r.deleteCharAt(u + 1) : r.setCharAt(u, String.fromCharCode(29)));\n    }, t.decodeNumericSegment = function(e, r, n) {\n        for(; n >= 3;){\n            if (e.available() < 10) throw new R;\n            var o = e.readBits(10);\n            if (o >= 1e3) throw new R;\n            r.append(t.toAlphaNumericChar(Math.floor(o / 100))), r.append(t.toAlphaNumericChar(Math.floor(o / 10) % 10)), r.append(t.toAlphaNumericChar(o % 10)), n -= 3;\n        }\n        if (2 === n) {\n            if (e.available() < 7) throw new R;\n            var i = e.readBits(7);\n            if (i >= 100) throw new R;\n            r.append(t.toAlphaNumericChar(Math.floor(i / 10))), r.append(t.toAlphaNumericChar(i % 10));\n        } else if (1 === n) {\n            if (e.available() < 4) throw new R;\n            var a = e.readBits(4);\n            if (a >= 10) throw new R;\n            r.append(t.toAlphaNumericChar(a));\n        }\n    }, t.parseECIValue = function(t) {\n        var e = t.readBits(8);\n        if (0 == (128 & e)) return 127 & e;\n        if (128 == (192 & e)) return (63 & e) << 8 & 4294967295 | t.readBits(8);\n        if (192 == (224 & e)) return (31 & e) << 16 & 4294967295 | t.readBits(16);\n        throw new R;\n    }, t.ALPHANUMERIC_CHARS = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\", t.GB2312_SUBSET = 1, t;\n}(), zr = function() {\n    function t(t) {\n        this.mirrored = t;\n    }\n    return t.prototype.isMirrored = function() {\n        return this.mirrored;\n    }, t.prototype.applyMirroredCorrection = function(t) {\n        if (this.mirrored && null !== t && !(t.length < 3)) {\n            var e = t[0];\n            t[0] = t[2], t[2] = e;\n        }\n    }, t;\n}(), Yr = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, Zr = function() {\n    function t() {\n        this.rsDecoder = new wt(lt.QR_CODE_FIELD_256);\n    }\n    return t.prototype.decodeBooleanArray = function(t, e) {\n        return this.decodeBitMatrix(x.parseFromBooleanArray(t), e);\n    }, t.prototype.decodeBitMatrix = function(t, e) {\n        var r = new Vr(t), n = null;\n        try {\n            return this.decodeBitMatrixParser(r, e);\n        } catch (t) {\n            n = t;\n        }\n        try {\n            r.remask(), r.setMirror(!0), r.readVersion(), r.readFormatInformation(), r.mirror();\n            var o = this.decodeBitMatrixParser(r, e);\n            return o.setOther(new zr(!0)), o;\n        } catch (t) {\n            if (null !== n) throw n;\n            throw t;\n        }\n    }, t.prototype.decodeBitMatrixParser = function(t, e) {\n        var r, n, o, i, a = t.readVersion(), u = t.readFormatInformation().getErrorCorrectionLevel(), s = t.readCodewords(), c = Hr.getDataBlocks(s, a, u), f = 0;\n        try {\n            for(var h = Yr(c), l = h.next(); !l.done; l = h.next()){\n                f += (w = l.value).getNumDataCodewords();\n            }\n        } catch (t) {\n            r = {\n                error: t\n            };\n        } finally{\n            try {\n                l && !l.done && (n = h.return) && n.call(h);\n            } finally{\n                if (r) throw r.error;\n            }\n        }\n        var d = new Uint8Array(f), p = 0;\n        try {\n            for(var g = Yr(c), y = g.next(); !y.done; y = g.next()){\n                var w, _ = (w = y.value).getCodewords(), v = w.getNumDataCodewords();\n                this.correctErrors(_, v);\n                for(var m = 0; m < v; m++)d[p++] = _[m];\n            }\n        } catch (t) {\n            o = {\n                error: t\n            };\n        } finally{\n            try {\n                y && !y.done && (i = g.return) && i.call(g);\n            } finally{\n                if (o) throw o.error;\n            }\n        }\n        return jr.decode(d, a, u, e);\n    }, t.prototype.correctErrors = function(t, e) {\n        var r = new Int32Array(t);\n        try {\n            this.rsDecoder.decode(r, t.length - e);\n        } catch (t) {\n            throw new g;\n        }\n        for(var n = 0; n < e; n++)t[n] = r[n];\n    }, t;\n}(), Kr = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), qr = function(t) {\n    function e(e, r, n) {\n        var o = t.call(this, e, r) || this;\n        return o.estimatedModuleSize = n, o;\n    }\n    return Kr(e, t), e.prototype.aboutEquals = function(t, e, r) {\n        if (Math.abs(e - this.getY()) <= t && Math.abs(r - this.getX()) <= t) {\n            var n = Math.abs(t - this.estimatedModuleSize);\n            return n <= 1 || n <= this.estimatedModuleSize;\n        }\n        return !1;\n    }, e.prototype.combineEstimate = function(t, r, n) {\n        return new e((this.getX() + r) / 2, (this.getY() + t) / 2, (this.estimatedModuleSize + n) / 2);\n    }, e;\n}(At), Qr = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, Jr = function() {\n    function t(t, e, r, n, o, i, a) {\n        this.image = t, this.startX = e, this.startY = r, this.width = n, this.height = o, this.moduleSize = i, this.resultPointCallback = a, this.possibleCenters = [], this.crossCheckStateCount = new Int32Array(3);\n    }\n    return t.prototype.find = function() {\n        for(var t = this.startX, e = this.height, r = t + this.width, n = this.startY + e / 2, o = new Int32Array(3), i = this.image, a = 0; a < e; a++){\n            var u = n + (0 == (1 & a) ? Math.floor((a + 1) / 2) : -Math.floor((a + 1) / 2));\n            o[0] = 0, o[1] = 0, o[2] = 0;\n            for(var s = t; s < r && !i.get(s, u);)s++;\n            for(var c = 0; s < r;){\n                if (i.get(s, u)) if (1 === c) o[1]++;\n                else if (2 === c) {\n                    var f;\n                    if (this.foundPatternCross(o)) {\n                        if (null !== (f = this.handlePossibleCenter(o, u, s))) return f;\n                    }\n                    o[0] = o[2], o[1] = 1, o[2] = 0, c = 1;\n                } else o[++c]++;\n                else 1 === c && c++, o[c]++;\n                s++;\n            }\n            if (this.foundPatternCross(o)) {\n                if (null !== (f = this.handlePossibleCenter(o, u, r))) return f;\n            }\n        }\n        if (0 !== this.possibleCenters.length) return this.possibleCenters[0];\n        throw new U;\n    }, t.centerFromEnd = function(t, e) {\n        return e - t[2] - t[1] / 2;\n    }, t.prototype.foundPatternCross = function(t) {\n        for(var e = this.moduleSize, r = e / 2, n = 0; n < 3; n++)if (Math.abs(e - t[n]) >= r) return !1;\n        return !0;\n    }, t.prototype.crossCheckVertical = function(e, r, n, o) {\n        var i = this.image, a = i.getHeight(), u = this.crossCheckStateCount;\n        u[0] = 0, u[1] = 0, u[2] = 0;\n        for(var s = e; s >= 0 && i.get(r, s) && u[1] <= n;)u[1]++, s--;\n        if (s < 0 || u[1] > n) return NaN;\n        for(; s >= 0 && !i.get(r, s) && u[0] <= n;)u[0]++, s--;\n        if (u[0] > n) return NaN;\n        for(s = e + 1; s < a && i.get(r, s) && u[1] <= n;)u[1]++, s++;\n        if (s === a || u[1] > n) return NaN;\n        for(; s < a && !i.get(r, s) && u[2] <= n;)u[2]++, s++;\n        if (u[2] > n) return NaN;\n        var c = u[0] + u[1] + u[2];\n        return 5 * Math.abs(c - o) >= 2 * o ? NaN : this.foundPatternCross(u) ? t.centerFromEnd(u, s) : NaN;\n    }, t.prototype.handlePossibleCenter = function(e, r, n) {\n        var o, i, a = e[0] + e[1] + e[2], u = t.centerFromEnd(e, n), s = this.crossCheckVertical(r, u, 2 * e[1], a);\n        if (!isNaN(s)) {\n            var c = (e[0] + e[1] + e[2]) / 3;\n            try {\n                for(var f = Qr(this.possibleCenters), h = f.next(); !h.done; h = f.next()){\n                    var l = h.value;\n                    if (l.aboutEquals(c, s, u)) return l.combineEstimate(s, u, c);\n                }\n            } catch (t) {\n                o = {\n                    error: t\n                };\n            } finally{\n                try {\n                    h && !h.done && (i = f.return) && i.call(f);\n                } finally{\n                    if (o) throw o.error;\n                }\n            }\n            var d = new qr(u, s, c);\n            this.possibleCenters.push(d), null !== this.resultPointCallback && void 0 !== this.resultPointCallback && this.resultPointCallback.foundPossibleResultPoint(d);\n        }\n        return null;\n    }, t;\n}(), $r = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), tn = function(t) {\n    function e(e, r, n, o) {\n        var i = t.call(this, e, r) || this;\n        return i.estimatedModuleSize = n, i.count = o, void 0 === o && (i.count = 1), i;\n    }\n    return $r(e, t), e.prototype.getEstimatedModuleSize = function() {\n        return this.estimatedModuleSize;\n    }, e.prototype.getCount = function() {\n        return this.count;\n    }, e.prototype.aboutEquals = function(t, e, r) {\n        if (Math.abs(e - this.getY()) <= t && Math.abs(r - this.getX()) <= t) {\n            var n = Math.abs(t - this.estimatedModuleSize);\n            return n <= 1 || n <= this.estimatedModuleSize;\n        }\n        return !1;\n    }, e.prototype.combineEstimate = function(t, r, n) {\n        var o = this.count + 1;\n        return new e((this.count * this.getX() + r) / o, (this.count * this.getY() + t) / o, (this.count * this.estimatedModuleSize + n) / o, o);\n    }, e;\n}(At), en = function() {\n    function t(t) {\n        this.bottomLeft = t[0], this.topLeft = t[1], this.topRight = t[2];\n    }\n    return t.prototype.getBottomLeft = function() {\n        return this.bottomLeft;\n    }, t.prototype.getTopLeft = function() {\n        return this.topLeft;\n    }, t.prototype.getTopRight = function() {\n        return this.topRight;\n    }, t;\n}(), rn = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, nn = function() {\n    function t(t, e) {\n        this.image = t, this.resultPointCallback = e, this.possibleCenters = [], this.crossCheckStateCount = new Int32Array(5), this.resultPointCallback = e;\n    }\n    return t.prototype.getImage = function() {\n        return this.image;\n    }, t.prototype.getPossibleCenters = function() {\n        return this.possibleCenters;\n    }, t.prototype.find = function(e) {\n        var r = null != e && void 0 !== e.get(T.TRY_HARDER), n = null != e && void 0 !== e.get(T.PURE_BARCODE), o = this.image, i = o.getHeight(), a = o.getWidth(), u = Math.floor(3 * i / (4 * t.MAX_MODULES));\n        (u < t.MIN_SKIP || r) && (u = t.MIN_SKIP);\n        for(var s = !1, c = new Int32Array(5), f = u - 1; f < i && !s; f += u){\n            c[0] = 0, c[1] = 0, c[2] = 0, c[3] = 0, c[4] = 0;\n            for(var h = 0, l = 0; l < a; l++)if (o.get(l, f)) 1 == (1 & h) && h++, c[h]++;\n            else if (0 == (1 & h)) if (4 === h) if (t.foundPatternCross(c)) {\n                if (!0 !== this.handlePossibleCenter(c, f, l, n)) {\n                    c[0] = c[2], c[1] = c[3], c[2] = c[4], c[3] = 1, c[4] = 0, h = 3;\n                    continue;\n                }\n                if (u = 2, !0 === this.hasSkipped) s = this.haveMultiplyConfirmedCenters();\n                else {\n                    var d = this.findRowSkip();\n                    d > c[2] && (f += d - c[2] - u, l = a - 1);\n                }\n                h = 0, c[0] = 0, c[1] = 0, c[2] = 0, c[3] = 0, c[4] = 0;\n            } else c[0] = c[2], c[1] = c[3], c[2] = c[4], c[3] = 1, c[4] = 0, h = 3;\n            else c[++h]++;\n            else c[h]++;\n            if (t.foundPatternCross(c)) !0 === this.handlePossibleCenter(c, f, a, n) && (u = c[0], this.hasSkipped && (s = this.haveMultiplyConfirmedCenters()));\n        }\n        var p = this.selectBestPatterns();\n        return At.orderBestPatterns(p), new en(p);\n    }, t.centerFromEnd = function(t, e) {\n        return e - t[4] - t[3] - t[2] / 2;\n    }, t.foundPatternCross = function(t) {\n        for(var e = 0, r = 0; r < 5; r++){\n            var n = t[r];\n            if (0 === n) return !1;\n            e += n;\n        }\n        if (e < 7) return !1;\n        var o = e / 7, i = o / 2;\n        return Math.abs(o - t[0]) < i && Math.abs(o - t[1]) < i && Math.abs(3 * o - t[2]) < 3 * i && Math.abs(o - t[3]) < i && Math.abs(o - t[4]) < i;\n    }, t.prototype.getCrossCheckStateCount = function() {\n        var t = this.crossCheckStateCount;\n        return t[0] = 0, t[1] = 0, t[2] = 0, t[3] = 0, t[4] = 0, t;\n    }, t.prototype.crossCheckDiagonal = function(e, r, n, o) {\n        for(var i = this.getCrossCheckStateCount(), a = 0, u = this.image; e >= a && r >= a && u.get(r - a, e - a);)i[2]++, a++;\n        if (e < a || r < a) return !1;\n        for(; e >= a && r >= a && !u.get(r - a, e - a) && i[1] <= n;)i[1]++, a++;\n        if (e < a || r < a || i[1] > n) return !1;\n        for(; e >= a && r >= a && u.get(r - a, e - a) && i[0] <= n;)i[0]++, a++;\n        if (i[0] > n) return !1;\n        var s = u.getHeight(), c = u.getWidth();\n        for(a = 1; e + a < s && r + a < c && u.get(r + a, e + a);)i[2]++, a++;\n        if (e + a >= s || r + a >= c) return !1;\n        for(; e + a < s && r + a < c && !u.get(r + a, e + a) && i[3] < n;)i[3]++, a++;\n        if (e + a >= s || r + a >= c || i[3] >= n) return !1;\n        for(; e + a < s && r + a < c && u.get(r + a, e + a) && i[4] < n;)i[4]++, a++;\n        if (i[4] >= n) return !1;\n        var f = i[0] + i[1] + i[2] + i[3] + i[4];\n        return Math.abs(f - o) < 2 * o && t.foundPatternCross(i);\n    }, t.prototype.crossCheckVertical = function(e, r, n, o) {\n        for(var i = this.image, a = i.getHeight(), u = this.getCrossCheckStateCount(), s = e; s >= 0 && i.get(r, s);)u[2]++, s--;\n        if (s < 0) return NaN;\n        for(; s >= 0 && !i.get(r, s) && u[1] <= n;)u[1]++, s--;\n        if (s < 0 || u[1] > n) return NaN;\n        for(; s >= 0 && i.get(r, s) && u[0] <= n;)u[0]++, s--;\n        if (u[0] > n) return NaN;\n        for(s = e + 1; s < a && i.get(r, s);)u[2]++, s++;\n        if (s === a) return NaN;\n        for(; s < a && !i.get(r, s) && u[3] < n;)u[3]++, s++;\n        if (s === a || u[3] >= n) return NaN;\n        for(; s < a && i.get(r, s) && u[4] < n;)u[4]++, s++;\n        if (u[4] >= n) return NaN;\n        var c = u[0] + u[1] + u[2] + u[3] + u[4];\n        return 5 * Math.abs(c - o) >= 2 * o ? NaN : t.foundPatternCross(u) ? t.centerFromEnd(u, s) : NaN;\n    }, t.prototype.crossCheckHorizontal = function(e, r, n, o) {\n        for(var i = this.image, a = i.getWidth(), u = this.getCrossCheckStateCount(), s = e; s >= 0 && i.get(s, r);)u[2]++, s--;\n        if (s < 0) return NaN;\n        for(; s >= 0 && !i.get(s, r) && u[1] <= n;)u[1]++, s--;\n        if (s < 0 || u[1] > n) return NaN;\n        for(; s >= 0 && i.get(s, r) && u[0] <= n;)u[0]++, s--;\n        if (u[0] > n) return NaN;\n        for(s = e + 1; s < a && i.get(s, r);)u[2]++, s++;\n        if (s === a) return NaN;\n        for(; s < a && !i.get(s, r) && u[3] < n;)u[3]++, s++;\n        if (s === a || u[3] >= n) return NaN;\n        for(; s < a && i.get(s, r) && u[4] < n;)u[4]++, s++;\n        if (u[4] >= n) return NaN;\n        var c = u[0] + u[1] + u[2] + u[3] + u[4];\n        return 5 * Math.abs(c - o) >= o ? NaN : t.foundPatternCross(u) ? t.centerFromEnd(u, s) : NaN;\n    }, t.prototype.handlePossibleCenter = function(e, r, n, o) {\n        var i = e[0] + e[1] + e[2] + e[3] + e[4], a = t.centerFromEnd(e, n), u = this.crossCheckVertical(r, Math.floor(a), e[2], i);\n        if (!isNaN(u) && (a = this.crossCheckHorizontal(Math.floor(a), Math.floor(u), e[2], i), !isNaN(a) && (!o || this.crossCheckDiagonal(Math.floor(u), Math.floor(a), e[2], i)))) {\n            for(var s = i / 7, c = !1, f = this.possibleCenters, h = 0, l = f.length; h < l; h++){\n                var d = f[h];\n                if (d.aboutEquals(s, u, a)) {\n                    f[h] = d.combineEstimate(u, a, s), c = !0;\n                    break;\n                }\n            }\n            if (!c) {\n                var p = new tn(a, u, s);\n                f.push(p), null !== this.resultPointCallback && void 0 !== this.resultPointCallback && this.resultPointCallback.foundPossibleResultPoint(p);\n            }\n            return !0;\n        }\n        return !1;\n    }, t.prototype.findRowSkip = function() {\n        var e, r;\n        if (this.possibleCenters.length <= 1) return 0;\n        var n = null;\n        try {\n            for(var o = rn(this.possibleCenters), i = o.next(); !i.done; i = o.next()){\n                var a = i.value;\n                if (a.getCount() >= t.CENTER_QUORUM) {\n                    if (null != n) return this.hasSkipped = !0, Math.floor((Math.abs(n.getX() - a.getX()) - Math.abs(n.getY() - a.getY())) / 2);\n                    n = a;\n                }\n            }\n        } catch (t) {\n            e = {\n                error: t\n            };\n        } finally{\n            try {\n                i && !i.done && (r = o.return) && r.call(o);\n            } finally{\n                if (e) throw e.error;\n            }\n        }\n        return 0;\n    }, t.prototype.haveMultiplyConfirmedCenters = function() {\n        var e, r, n, o, i = 0, a = 0, u = this.possibleCenters.length;\n        try {\n            for(var s = rn(this.possibleCenters), c = s.next(); !c.done; c = s.next()){\n                (p = c.value).getCount() >= t.CENTER_QUORUM && (i++, a += p.getEstimatedModuleSize());\n            }\n        } catch (t) {\n            e = {\n                error: t\n            };\n        } finally{\n            try {\n                c && !c.done && (r = s.return) && r.call(s);\n            } finally{\n                if (e) throw e.error;\n            }\n        }\n        if (i < 3) return !1;\n        var f = a / u, h = 0;\n        try {\n            for(var l = rn(this.possibleCenters), d = l.next(); !d.done; d = l.next()){\n                var p = d.value;\n                h += Math.abs(p.getEstimatedModuleSize() - f);\n            }\n        } catch (t) {\n            n = {\n                error: t\n            };\n        } finally{\n            try {\n                d && !d.done && (o = l.return) && o.call(l);\n            } finally{\n                if (n) throw n.error;\n            }\n        }\n        return h <= .05 * a;\n    }, t.prototype.selectBestPatterns = function() {\n        var t, e, r, n, o = this.possibleCenters.length;\n        if (o < 3) throw new U;\n        var i, a = this.possibleCenters;\n        if (o > 3) {\n            var u = 0, s = 0;\n            try {\n                for(var c = rn(this.possibleCenters), f = c.next(); !f.done; f = c.next()){\n                    var h = f.value.getEstimatedModuleSize();\n                    u += h, s += h * h;\n                }\n            } catch (e) {\n                t = {\n                    error: e\n                };\n            } finally{\n                try {\n                    f && !f.done && (e = c.return) && e.call(c);\n                } finally{\n                    if (t) throw t.error;\n                }\n            }\n            i = u / o;\n            var l = Math.sqrt(s / o - i * i);\n            a.sort(function(t, e) {\n                var r = Math.abs(e.getEstimatedModuleSize() - i), n = Math.abs(t.getEstimatedModuleSize() - i);\n                return r < n ? -1 : r > n ? 1 : 0;\n            });\n            for(var d = Math.max(.2 * i, l), p = 0; p < a.length && a.length > 3; p++){\n                var g = a[p];\n                Math.abs(g.getEstimatedModuleSize() - i) > d && (a.splice(p, 1), p--);\n            }\n        }\n        if (a.length > 3) {\n            u = 0;\n            try {\n                for(var y = rn(a), w = y.next(); !w.done; w = y.next()){\n                    u += w.value.getEstimatedModuleSize();\n                }\n            } catch (t) {\n                r = {\n                    error: t\n                };\n            } finally{\n                try {\n                    w && !w.done && (n = y.return) && n.call(y);\n                } finally{\n                    if (r) throw r.error;\n                }\n            }\n            i = u / a.length, a.sort(function(t, e) {\n                if (e.getCount() === t.getCount()) {\n                    var r = Math.abs(e.getEstimatedModuleSize() - i), n = Math.abs(t.getEstimatedModuleSize() - i);\n                    return r < n ? 1 : r > n ? -1 : 0;\n                }\n                return e.getCount() - t.getCount();\n            }), a.splice(3);\n        }\n        return [\n            a[0],\n            a[1],\n            a[2]\n        ];\n    }, t.CENTER_QUORUM = 2, t.MIN_SKIP = 3, t.MAX_MODULES = 57, t;\n}(), on = function() {\n    function t(t) {\n        this.image = t;\n    }\n    return t.prototype.getImage = function() {\n        return this.image;\n    }, t.prototype.getResultPointCallback = function() {\n        return this.resultPointCallback;\n    }, t.prototype.detect = function(t) {\n        this.resultPointCallback = null == t ? null : t.get(T.NEED_RESULT_POINT_CALLBACK);\n        var e = new nn(this.image, this.resultPointCallback).find(t);\n        return this.processFinderPatternInfo(e);\n    }, t.prototype.processFinderPatternInfo = function(e) {\n        var r = e.getTopLeft(), n = e.getTopRight(), o = e.getBottomLeft(), i = this.calculateModuleSize(r, n, o);\n        if (i < 1) throw new U(\"No pattern found in proccess finder.\");\n        var a = t.computeDimension(r, n, o, i), u = Fr.getProvisionalVersionForDimension(a), s = u.getDimensionForVersion() - 7, c = null;\n        if (u.getAlignmentPatternCenters().length > 0) for(var f = n.getX() - r.getX() + o.getX(), h = n.getY() - r.getY() + o.getY(), l = 1 - 3 / s, d = Math.floor(r.getX() + l * (f - r.getX())), p = Math.floor(r.getY() + l * (h - r.getY())), g = 4; g <= 16; g <<= 1)try {\n            c = this.findAlignmentInRegion(i, d, p, g);\n            break;\n        } catch (t) {\n            if (!(t instanceof U)) throw t;\n        }\n        var y = t.createTransform(r, n, o, c, a), w = t.sampleGrid(this.image, y, a);\n        return new Et(w, null === c ? [\n            o,\n            r,\n            n\n        ] : [\n            o,\n            r,\n            n,\n            c\n        ]);\n    }, t.createTransform = function(t, e, r, n, o) {\n        var i, a, u, s, c = o - 3.5;\n        return null !== n ? (i = n.getX(), a = n.getY(), s = u = c - 3) : (i = e.getX() - t.getX() + r.getX(), a = e.getY() - t.getY() + r.getY(), u = c, s = c), Tt.quadrilateralToQuadrilateral(3.5, 3.5, c, 3.5, u, s, 3.5, c, t.getX(), t.getY(), e.getX(), e.getY(), i, a, r.getX(), r.getY());\n    }, t.sampleGrid = function(t, e, r) {\n        return Nt.getInstance().sampleGridWithTransform(t, r, r, e);\n    }, t.computeDimension = function(t, e, r, n) {\n        var o = vt.round(At.distance(t, e) / n), i = vt.round(At.distance(t, r) / n), a = Math.floor((o + i) / 2) + 7;\n        switch(3 & a){\n            case 0:\n                a++;\n                break;\n            case 2:\n                a--;\n                break;\n            case 3:\n                throw new U(\"Dimensions could be not found.\");\n        }\n        return a;\n    }, t.prototype.calculateModuleSize = function(t, e, r) {\n        return (this.calculateModuleSizeOneWay(t, e) + this.calculateModuleSizeOneWay(t, r)) / 2;\n    }, t.prototype.calculateModuleSizeOneWay = function(t, e) {\n        var r = this.sizeOfBlackWhiteBlackRunBothWays(Math.floor(t.getX()), Math.floor(t.getY()), Math.floor(e.getX()), Math.floor(e.getY())), n = this.sizeOfBlackWhiteBlackRunBothWays(Math.floor(e.getX()), Math.floor(e.getY()), Math.floor(t.getX()), Math.floor(t.getY()));\n        return isNaN(r) ? n / 7 : isNaN(n) ? r / 7 : (r + n) / 14;\n    }, t.prototype.sizeOfBlackWhiteBlackRunBothWays = function(t, e, r, n) {\n        var o = this.sizeOfBlackWhiteBlackRun(t, e, r, n), i = 1, a = t - (r - t);\n        a < 0 ? (i = t / (t - a), a = 0) : a >= this.image.getWidth() && (i = (this.image.getWidth() - 1 - t) / (a - t), a = this.image.getWidth() - 1);\n        var u = Math.floor(e - (n - e) * i);\n        return i = 1, u < 0 ? (i = e / (e - u), u = 0) : u >= this.image.getHeight() && (i = (this.image.getHeight() - 1 - e) / (u - e), u = this.image.getHeight() - 1), a = Math.floor(t + (a - t) * i), (o += this.sizeOfBlackWhiteBlackRun(t, e, a, u)) - 1;\n    }, t.prototype.sizeOfBlackWhiteBlackRun = function(t, e, r, n) {\n        var o = Math.abs(n - e) > Math.abs(r - t);\n        if (o) {\n            var i = t;\n            t = e, e = i, i = r, r = n, n = i;\n        }\n        for(var a = Math.abs(r - t), u = Math.abs(n - e), s = -a / 2, c = t < r ? 1 : -1, f = e < n ? 1 : -1, h = 0, l = r + c, d = t, p = e; d !== l; d += c){\n            var g = o ? p : d, y = o ? d : p;\n            if (1 === h === this.image.get(g, y)) {\n                if (2 === h) return vt.distance(d, p, t, e);\n                h++;\n            }\n            if ((s += u) > 0) {\n                if (p === n) break;\n                p += f, s -= a;\n            }\n        }\n        return 2 === h ? vt.distance(r + c, n, t, e) : NaN;\n    }, t.prototype.findAlignmentInRegion = function(t, e, r, n) {\n        var o = Math.floor(n * t), i = Math.max(0, e - o), a = Math.min(this.image.getWidth() - 1, e + o);\n        if (a - i < 3 * t) throw new U(\"Alignment top exceeds estimated module size.\");\n        var u = Math.max(0, r - o), s = Math.min(this.image.getHeight() - 1, r + o);\n        if (s - u < 3 * t) throw new U(\"Alignment bottom exceeds estimated module size.\");\n        return new Jr(this.image, i, u, a - i, s - u, t, this.resultPointCallback).find();\n    }, t;\n}(), an = function() {\n    function t() {\n        this.decoder = new Zr;\n    }\n    return t.prototype.getDecoder = function() {\n        return this.decoder;\n    }, t.prototype.decode = function(e, r) {\n        var n, o;\n        if (null != r && void 0 !== r.get(T.PURE_BARCODE)) {\n            var i = t.extractPureBits(e.getBlackMatrix());\n            n = this.decoder.decodeBitMatrix(i, r), o = t.NO_POINTS;\n        } else {\n            var a = new on(e.getBlackMatrix()).detect(r);\n            n = this.decoder.decodeBitMatrix(a.getBits(), r), o = a.getPoints();\n        }\n        n.getOther() instanceof zr && n.getOther().applyMirroredCorrection(o);\n        var u = new et(n.getText(), n.getRawBytes(), void 0, o, nt.QR_CODE, void 0), s = n.getByteSegments();\n        null !== s && u.putMetadata(it.BYTE_SEGMENTS, s);\n        var c = n.getECLevel();\n        return null !== c && u.putMetadata(it.ERROR_CORRECTION_LEVEL, c), n.hasStructuredAppend() && (u.putMetadata(it.STRUCTURED_APPEND_SEQUENCE, n.getStructuredAppendSequenceNumber()), u.putMetadata(it.STRUCTURED_APPEND_PARITY, n.getStructuredAppendParity())), u;\n    }, t.prototype.reset = function() {}, t.extractPureBits = function(t) {\n        var e = t.getTopLeftOnBit(), r = t.getBottomRightOnBit();\n        if (null === e || null === r) throw new U;\n        var n = this.moduleSize(e, t), o = e[1], i = r[1], a = e[0], u = r[0];\n        if (a >= u || o >= i) throw new U;\n        if (i - o != u - a && (u = a + (i - o)) >= t.getWidth()) throw new U;\n        var s = Math.round((u - a + 1) / n), c = Math.round((i - o + 1) / n);\n        if (s <= 0 || c <= 0) throw new U;\n        if (c !== s) throw new U;\n        var f = Math.floor(n / 2);\n        o += f;\n        var h = (a += f) + Math.floor((s - 1) * n) - u;\n        if (h > 0) {\n            if (h > f) throw new U;\n            a -= h;\n        }\n        var l = o + Math.floor((c - 1) * n) - i;\n        if (l > 0) {\n            if (l > f) throw new U;\n            o -= l;\n        }\n        for(var d = new x(s, c), p = 0; p < c; p++)for(var g = o + Math.floor(p * n), y = 0; y < s; y++)t.get(a + Math.floor(y * n), g) && d.set(y, p);\n        return d;\n    }, t.moduleSize = function(t, e) {\n        for(var r = e.getHeight(), n = e.getWidth(), o = t[0], i = t[1], a = !0, u = 0; o < n && i < r;){\n            if (a !== e.get(o, i)) {\n                if (5 == ++u) break;\n                a = !a;\n            }\n            o++, i++;\n        }\n        if (o === n || i === r) throw new U;\n        return (o - t[0]) / 7;\n    }, t.NO_POINTS = new Array, t;\n}(), un = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, sn = function() {\n    function t() {}\n    return t.prototype.PDF417Common = function() {}, t.getBitCountSum = function(t) {\n        return vt.sum(t);\n    }, t.toIntArray = function(e) {\n        var r, n;\n        if (null == e || !e.length) return t.EMPTY_INT_ARRAY;\n        var o = new Int32Array(e.length), i = 0;\n        try {\n            for(var a = un(e), u = a.next(); !u.done; u = a.next()){\n                var s = u.value;\n                o[i++] = s;\n            }\n        } catch (t) {\n            r = {\n                error: t\n            };\n        } finally{\n            try {\n                u && !u.done && (n = a.return) && n.call(a);\n            } finally{\n                if (r) throw r.error;\n            }\n        }\n        return o;\n    }, t.getCodeword = function(e) {\n        var r = C.binarySearch(t.SYMBOL_TABLE, 262143 & e);\n        return r < 0 ? -1 : (t.CODEWORD_TABLE[r] - 1) % t.NUMBER_OF_CODEWORDS;\n    }, t.NUMBER_OF_CODEWORDS = 929, t.MAX_CODEWORDS_IN_BARCODE = t.NUMBER_OF_CODEWORDS - 1, t.MIN_ROWS_IN_BARCODE = 3, t.MAX_ROWS_IN_BARCODE = 90, t.MODULES_IN_CODEWORD = 17, t.MODULES_IN_STOP_PATTERN = 18, t.BARS_IN_MODULE = 8, t.EMPTY_INT_ARRAY = new Int32Array([]), t.SYMBOL_TABLE = Int32Array.from([\n        66142,\n        66170,\n        66206,\n        66236,\n        66290,\n        66292,\n        66350,\n        66382,\n        66396,\n        66454,\n        66470,\n        66476,\n        66594,\n        66600,\n        66614,\n        66626,\n        66628,\n        66632,\n        66640,\n        66654,\n        66662,\n        66668,\n        66682,\n        66690,\n        66718,\n        66720,\n        66748,\n        66758,\n        66776,\n        66798,\n        66802,\n        66804,\n        66820,\n        66824,\n        66832,\n        66846,\n        66848,\n        66876,\n        66880,\n        66936,\n        66950,\n        66956,\n        66968,\n        66992,\n        67006,\n        67022,\n        67036,\n        67042,\n        67044,\n        67048,\n        67062,\n        67118,\n        67150,\n        67164,\n        67214,\n        67228,\n        67256,\n        67294,\n        67322,\n        67350,\n        67366,\n        67372,\n        67398,\n        67404,\n        67416,\n        67438,\n        67474,\n        67476,\n        67490,\n        67492,\n        67496,\n        67510,\n        67618,\n        67624,\n        67650,\n        67656,\n        67664,\n        67678,\n        67686,\n        67692,\n        67706,\n        67714,\n        67716,\n        67728,\n        67742,\n        67744,\n        67772,\n        67782,\n        67788,\n        67800,\n        67822,\n        67826,\n        67828,\n        67842,\n        67848,\n        67870,\n        67872,\n        67900,\n        67904,\n        67960,\n        67974,\n        67992,\n        68016,\n        68030,\n        68046,\n        68060,\n        68066,\n        68068,\n        68072,\n        68086,\n        68104,\n        68112,\n        68126,\n        68128,\n        68156,\n        68160,\n        68216,\n        68336,\n        68358,\n        68364,\n        68376,\n        68400,\n        68414,\n        68448,\n        68476,\n        68494,\n        68508,\n        68536,\n        68546,\n        68548,\n        68552,\n        68560,\n        68574,\n        68582,\n        68588,\n        68654,\n        68686,\n        68700,\n        68706,\n        68708,\n        68712,\n        68726,\n        68750,\n        68764,\n        68792,\n        68802,\n        68804,\n        68808,\n        68816,\n        68830,\n        68838,\n        68844,\n        68858,\n        68878,\n        68892,\n        68920,\n        68976,\n        68990,\n        68994,\n        68996,\n        69e3,\n        69008,\n        69022,\n        69024,\n        69052,\n        69062,\n        69068,\n        69080,\n        69102,\n        69106,\n        69108,\n        69142,\n        69158,\n        69164,\n        69190,\n        69208,\n        69230,\n        69254,\n        69260,\n        69272,\n        69296,\n        69310,\n        69326,\n        69340,\n        69386,\n        69394,\n        69396,\n        69410,\n        69416,\n        69430,\n        69442,\n        69444,\n        69448,\n        69456,\n        69470,\n        69478,\n        69484,\n        69554,\n        69556,\n        69666,\n        69672,\n        69698,\n        69704,\n        69712,\n        69726,\n        69754,\n        69762,\n        69764,\n        69776,\n        69790,\n        69792,\n        69820,\n        69830,\n        69836,\n        69848,\n        69870,\n        69874,\n        69876,\n        69890,\n        69918,\n        69920,\n        69948,\n        69952,\n        70008,\n        70022,\n        70040,\n        70064,\n        70078,\n        70094,\n        70108,\n        70114,\n        70116,\n        70120,\n        70134,\n        70152,\n        70174,\n        70176,\n        70264,\n        70384,\n        70412,\n        70448,\n        70462,\n        70496,\n        70524,\n        70542,\n        70556,\n        70584,\n        70594,\n        70600,\n        70608,\n        70622,\n        70630,\n        70636,\n        70664,\n        70672,\n        70686,\n        70688,\n        70716,\n        70720,\n        70776,\n        70896,\n        71136,\n        71180,\n        71192,\n        71216,\n        71230,\n        71264,\n        71292,\n        71360,\n        71416,\n        71452,\n        71480,\n        71536,\n        71550,\n        71554,\n        71556,\n        71560,\n        71568,\n        71582,\n        71584,\n        71612,\n        71622,\n        71628,\n        71640,\n        71662,\n        71726,\n        71732,\n        71758,\n        71772,\n        71778,\n        71780,\n        71784,\n        71798,\n        71822,\n        71836,\n        71864,\n        71874,\n        71880,\n        71888,\n        71902,\n        71910,\n        71916,\n        71930,\n        71950,\n        71964,\n        71992,\n        72048,\n        72062,\n        72066,\n        72068,\n        72080,\n        72094,\n        72096,\n        72124,\n        72134,\n        72140,\n        72152,\n        72174,\n        72178,\n        72180,\n        72206,\n        72220,\n        72248,\n        72304,\n        72318,\n        72416,\n        72444,\n        72456,\n        72464,\n        72478,\n        72480,\n        72508,\n        72512,\n        72568,\n        72588,\n        72600,\n        72624,\n        72638,\n        72654,\n        72668,\n        72674,\n        72676,\n        72680,\n        72694,\n        72726,\n        72742,\n        72748,\n        72774,\n        72780,\n        72792,\n        72814,\n        72838,\n        72856,\n        72880,\n        72894,\n        72910,\n        72924,\n        72930,\n        72932,\n        72936,\n        72950,\n        72966,\n        72972,\n        72984,\n        73008,\n        73022,\n        73056,\n        73084,\n        73102,\n        73116,\n        73144,\n        73156,\n        73160,\n        73168,\n        73182,\n        73190,\n        73196,\n        73210,\n        73226,\n        73234,\n        73236,\n        73250,\n        73252,\n        73256,\n        73270,\n        73282,\n        73284,\n        73296,\n        73310,\n        73318,\n        73324,\n        73346,\n        73348,\n        73352,\n        73360,\n        73374,\n        73376,\n        73404,\n        73414,\n        73420,\n        73432,\n        73454,\n        73498,\n        73518,\n        73522,\n        73524,\n        73550,\n        73564,\n        73570,\n        73572,\n        73576,\n        73590,\n        73800,\n        73822,\n        73858,\n        73860,\n        73872,\n        73886,\n        73888,\n        73916,\n        73944,\n        73970,\n        73972,\n        73992,\n        74014,\n        74016,\n        74044,\n        74048,\n        74104,\n        74118,\n        74136,\n        74160,\n        74174,\n        74210,\n        74212,\n        74216,\n        74230,\n        74244,\n        74256,\n        74270,\n        74272,\n        74360,\n        74480,\n        74502,\n        74508,\n        74544,\n        74558,\n        74592,\n        74620,\n        74638,\n        74652,\n        74680,\n        74690,\n        74696,\n        74704,\n        74726,\n        74732,\n        74782,\n        74784,\n        74812,\n        74992,\n        75232,\n        75288,\n        75326,\n        75360,\n        75388,\n        75456,\n        75512,\n        75576,\n        75632,\n        75646,\n        75650,\n        75652,\n        75664,\n        75678,\n        75680,\n        75708,\n        75718,\n        75724,\n        75736,\n        75758,\n        75808,\n        75836,\n        75840,\n        75896,\n        76016,\n        76256,\n        76736,\n        76824,\n        76848,\n        76862,\n        76896,\n        76924,\n        76992,\n        77048,\n        77296,\n        77340,\n        77368,\n        77424,\n        77438,\n        77536,\n        77564,\n        77572,\n        77576,\n        77584,\n        77600,\n        77628,\n        77632,\n        77688,\n        77702,\n        77708,\n        77720,\n        77744,\n        77758,\n        77774,\n        77788,\n        77870,\n        77902,\n        77916,\n        77922,\n        77928,\n        77966,\n        77980,\n        78008,\n        78018,\n        78024,\n        78032,\n        78046,\n        78060,\n        78074,\n        78094,\n        78136,\n        78192,\n        78206,\n        78210,\n        78212,\n        78224,\n        78238,\n        78240,\n        78268,\n        78278,\n        78284,\n        78296,\n        78322,\n        78324,\n        78350,\n        78364,\n        78448,\n        78462,\n        78560,\n        78588,\n        78600,\n        78622,\n        78624,\n        78652,\n        78656,\n        78712,\n        78726,\n        78744,\n        78768,\n        78782,\n        78798,\n        78812,\n        78818,\n        78820,\n        78824,\n        78838,\n        78862,\n        78876,\n        78904,\n        78960,\n        78974,\n        79072,\n        79100,\n        79296,\n        79352,\n        79368,\n        79376,\n        79390,\n        79392,\n        79420,\n        79424,\n        79480,\n        79600,\n        79628,\n        79640,\n        79664,\n        79678,\n        79712,\n        79740,\n        79772,\n        79800,\n        79810,\n        79812,\n        79816,\n        79824,\n        79838,\n        79846,\n        79852,\n        79894,\n        79910,\n        79916,\n        79942,\n        79948,\n        79960,\n        79982,\n        79988,\n        80006,\n        80024,\n        80048,\n        80062,\n        80078,\n        80092,\n        80098,\n        80100,\n        80104,\n        80134,\n        80140,\n        80176,\n        80190,\n        80224,\n        80252,\n        80270,\n        80284,\n        80312,\n        80328,\n        80336,\n        80350,\n        80358,\n        80364,\n        80378,\n        80390,\n        80396,\n        80408,\n        80432,\n        80446,\n        80480,\n        80508,\n        80576,\n        80632,\n        80654,\n        80668,\n        80696,\n        80752,\n        80766,\n        80776,\n        80784,\n        80798,\n        80800,\n        80828,\n        80844,\n        80856,\n        80878,\n        80882,\n        80884,\n        80914,\n        80916,\n        80930,\n        80932,\n        80936,\n        80950,\n        80962,\n        80968,\n        80976,\n        80990,\n        80998,\n        81004,\n        81026,\n        81028,\n        81040,\n        81054,\n        81056,\n        81084,\n        81094,\n        81100,\n        81112,\n        81134,\n        81154,\n        81156,\n        81160,\n        81168,\n        81182,\n        81184,\n        81212,\n        81216,\n        81272,\n        81286,\n        81292,\n        81304,\n        81328,\n        81342,\n        81358,\n        81372,\n        81380,\n        81384,\n        81398,\n        81434,\n        81454,\n        81458,\n        81460,\n        81486,\n        81500,\n        81506,\n        81508,\n        81512,\n        81526,\n        81550,\n        81564,\n        81592,\n        81602,\n        81604,\n        81608,\n        81616,\n        81630,\n        81638,\n        81644,\n        81702,\n        81708,\n        81722,\n        81734,\n        81740,\n        81752,\n        81774,\n        81778,\n        81780,\n        82050,\n        82078,\n        82080,\n        82108,\n        82180,\n        82184,\n        82192,\n        82206,\n        82208,\n        82236,\n        82240,\n        82296,\n        82316,\n        82328,\n        82352,\n        82366,\n        82402,\n        82404,\n        82408,\n        82440,\n        82448,\n        82462,\n        82464,\n        82492,\n        82496,\n        82552,\n        82672,\n        82694,\n        82700,\n        82712,\n        82736,\n        82750,\n        82784,\n        82812,\n        82830,\n        82882,\n        82884,\n        82888,\n        82896,\n        82918,\n        82924,\n        82952,\n        82960,\n        82974,\n        82976,\n        83004,\n        83008,\n        83064,\n        83184,\n        83424,\n        83468,\n        83480,\n        83504,\n        83518,\n        83552,\n        83580,\n        83648,\n        83704,\n        83740,\n        83768,\n        83824,\n        83838,\n        83842,\n        83844,\n        83848,\n        83856,\n        83872,\n        83900,\n        83910,\n        83916,\n        83928,\n        83950,\n        83984,\n        84e3,\n        84028,\n        84032,\n        84088,\n        84208,\n        84448,\n        84928,\n        85040,\n        85054,\n        85088,\n        85116,\n        85184,\n        85240,\n        85488,\n        85560,\n        85616,\n        85630,\n        85728,\n        85756,\n        85764,\n        85768,\n        85776,\n        85790,\n        85792,\n        85820,\n        85824,\n        85880,\n        85894,\n        85900,\n        85912,\n        85936,\n        85966,\n        85980,\n        86048,\n        86080,\n        86136,\n        86256,\n        86496,\n        86976,\n        88160,\n        88188,\n        88256,\n        88312,\n        88560,\n        89056,\n        89200,\n        89214,\n        89312,\n        89340,\n        89536,\n        89592,\n        89608,\n        89616,\n        89632,\n        89664,\n        89720,\n        89840,\n        89868,\n        89880,\n        89904,\n        89952,\n        89980,\n        89998,\n        90012,\n        90040,\n        90190,\n        90204,\n        90254,\n        90268,\n        90296,\n        90306,\n        90308,\n        90312,\n        90334,\n        90382,\n        90396,\n        90424,\n        90480,\n        90494,\n        90500,\n        90504,\n        90512,\n        90526,\n        90528,\n        90556,\n        90566,\n        90572,\n        90584,\n        90610,\n        90612,\n        90638,\n        90652,\n        90680,\n        90736,\n        90750,\n        90848,\n        90876,\n        90884,\n        90888,\n        90896,\n        90910,\n        90912,\n        90940,\n        90944,\n        91e3,\n        91014,\n        91020,\n        91032,\n        91056,\n        91070,\n        91086,\n        91100,\n        91106,\n        91108,\n        91112,\n        91126,\n        91150,\n        91164,\n        91192,\n        91248,\n        91262,\n        91360,\n        91388,\n        91584,\n        91640,\n        91664,\n        91678,\n        91680,\n        91708,\n        91712,\n        91768,\n        91888,\n        91928,\n        91952,\n        91966,\n        92e3,\n        92028,\n        92046,\n        92060,\n        92088,\n        92098,\n        92100,\n        92104,\n        92112,\n        92126,\n        92134,\n        92140,\n        92188,\n        92216,\n        92272,\n        92384,\n        92412,\n        92608,\n        92664,\n        93168,\n        93200,\n        93214,\n        93216,\n        93244,\n        93248,\n        93304,\n        93424,\n        93664,\n        93720,\n        93744,\n        93758,\n        93792,\n        93820,\n        93888,\n        93944,\n        93980,\n        94008,\n        94064,\n        94078,\n        94084,\n        94088,\n        94096,\n        94110,\n        94112,\n        94140,\n        94150,\n        94156,\n        94168,\n        94246,\n        94252,\n        94278,\n        94284,\n        94296,\n        94318,\n        94342,\n        94348,\n        94360,\n        94384,\n        94398,\n        94414,\n        94428,\n        94440,\n        94470,\n        94476,\n        94488,\n        94512,\n        94526,\n        94560,\n        94588,\n        94606,\n        94620,\n        94648,\n        94658,\n        94660,\n        94664,\n        94672,\n        94686,\n        94694,\n        94700,\n        94714,\n        94726,\n        94732,\n        94744,\n        94768,\n        94782,\n        94816,\n        94844,\n        94912,\n        94968,\n        94990,\n        95004,\n        95032,\n        95088,\n        95102,\n        95112,\n        95120,\n        95134,\n        95136,\n        95164,\n        95180,\n        95192,\n        95214,\n        95218,\n        95220,\n        95244,\n        95256,\n        95280,\n        95294,\n        95328,\n        95356,\n        95424,\n        95480,\n        95728,\n        95758,\n        95772,\n        95800,\n        95856,\n        95870,\n        95968,\n        95996,\n        96008,\n        96016,\n        96030,\n        96032,\n        96060,\n        96064,\n        96120,\n        96152,\n        96176,\n        96190,\n        96220,\n        96226,\n        96228,\n        96232,\n        96290,\n        96292,\n        96296,\n        96310,\n        96322,\n        96324,\n        96328,\n        96336,\n        96350,\n        96358,\n        96364,\n        96386,\n        96388,\n        96392,\n        96400,\n        96414,\n        96416,\n        96444,\n        96454,\n        96460,\n        96472,\n        96494,\n        96498,\n        96500,\n        96514,\n        96516,\n        96520,\n        96528,\n        96542,\n        96544,\n        96572,\n        96576,\n        96632,\n        96646,\n        96652,\n        96664,\n        96688,\n        96702,\n        96718,\n        96732,\n        96738,\n        96740,\n        96744,\n        96758,\n        96772,\n        96776,\n        96784,\n        96798,\n        96800,\n        96828,\n        96832,\n        96888,\n        97008,\n        97030,\n        97036,\n        97048,\n        97072,\n        97086,\n        97120,\n        97148,\n        97166,\n        97180,\n        97208,\n        97220,\n        97224,\n        97232,\n        97246,\n        97254,\n        97260,\n        97326,\n        97330,\n        97332,\n        97358,\n        97372,\n        97378,\n        97380,\n        97384,\n        97398,\n        97422,\n        97436,\n        97464,\n        97474,\n        97476,\n        97480,\n        97488,\n        97502,\n        97510,\n        97516,\n        97550,\n        97564,\n        97592,\n        97648,\n        97666,\n        97668,\n        97672,\n        97680,\n        97694,\n        97696,\n        97724,\n        97734,\n        97740,\n        97752,\n        97774,\n        97830,\n        97836,\n        97850,\n        97862,\n        97868,\n        97880,\n        97902,\n        97906,\n        97908,\n        97926,\n        97932,\n        97944,\n        97968,\n        97998,\n        98012,\n        98018,\n        98020,\n        98024,\n        98038,\n        98618,\n        98674,\n        98676,\n        98838,\n        98854,\n        98874,\n        98892,\n        98904,\n        98926,\n        98930,\n        98932,\n        98968,\n        99006,\n        99042,\n        99044,\n        99048,\n        99062,\n        99166,\n        99194,\n        99246,\n        99286,\n        99350,\n        99366,\n        99372,\n        99386,\n        99398,\n        99416,\n        99438,\n        99442,\n        99444,\n        99462,\n        99504,\n        99518,\n        99534,\n        99548,\n        99554,\n        99556,\n        99560,\n        99574,\n        99590,\n        99596,\n        99608,\n        99632,\n        99646,\n        99680,\n        99708,\n        99726,\n        99740,\n        99768,\n        99778,\n        99780,\n        99784,\n        99792,\n        99806,\n        99814,\n        99820,\n        99834,\n        99858,\n        99860,\n        99874,\n        99880,\n        99894,\n        99906,\n        99920,\n        99934,\n        99962,\n        99970,\n        99972,\n        99976,\n        99984,\n        99998,\n        1e5,\n        100028,\n        100038,\n        100044,\n        100056,\n        100078,\n        100082,\n        100084,\n        100142,\n        100174,\n        100188,\n        100246,\n        100262,\n        100268,\n        100306,\n        100308,\n        100390,\n        100396,\n        100410,\n        100422,\n        100428,\n        100440,\n        100462,\n        100466,\n        100468,\n        100486,\n        100504,\n        100528,\n        100542,\n        100558,\n        100572,\n        100578,\n        100580,\n        100584,\n        100598,\n        100620,\n        100656,\n        100670,\n        100704,\n        100732,\n        100750,\n        100792,\n        100802,\n        100808,\n        100816,\n        100830,\n        100838,\n        100844,\n        100858,\n        100888,\n        100912,\n        100926,\n        100960,\n        100988,\n        101056,\n        101112,\n        101148,\n        101176,\n        101232,\n        101246,\n        101250,\n        101252,\n        101256,\n        101264,\n        101278,\n        101280,\n        101308,\n        101318,\n        101324,\n        101336,\n        101358,\n        101362,\n        101364,\n        101410,\n        101412,\n        101416,\n        101430,\n        101442,\n        101448,\n        101456,\n        101470,\n        101478,\n        101498,\n        101506,\n        101508,\n        101520,\n        101534,\n        101536,\n        101564,\n        101580,\n        101618,\n        101620,\n        101636,\n        101640,\n        101648,\n        101662,\n        101664,\n        101692,\n        101696,\n        101752,\n        101766,\n        101784,\n        101838,\n        101858,\n        101860,\n        101864,\n        101934,\n        101938,\n        101940,\n        101966,\n        101980,\n        101986,\n        101988,\n        101992,\n        102030,\n        102044,\n        102072,\n        102082,\n        102084,\n        102088,\n        102096,\n        102138,\n        102166,\n        102182,\n        102188,\n        102214,\n        102220,\n        102232,\n        102254,\n        102282,\n        102290,\n        102292,\n        102306,\n        102308,\n        102312,\n        102326,\n        102444,\n        102458,\n        102470,\n        102476,\n        102488,\n        102514,\n        102516,\n        102534,\n        102552,\n        102576,\n        102590,\n        102606,\n        102620,\n        102626,\n        102632,\n        102646,\n        102662,\n        102668,\n        102704,\n        102718,\n        102752,\n        102780,\n        102798,\n        102812,\n        102840,\n        102850,\n        102856,\n        102864,\n        102878,\n        102886,\n        102892,\n        102906,\n        102936,\n        102974,\n        103008,\n        103036,\n        103104,\n        103160,\n        103224,\n        103280,\n        103294,\n        103298,\n        103300,\n        103312,\n        103326,\n        103328,\n        103356,\n        103366,\n        103372,\n        103384,\n        103406,\n        103410,\n        103412,\n        103472,\n        103486,\n        103520,\n        103548,\n        103616,\n        103672,\n        103920,\n        103992,\n        104048,\n        104062,\n        104160,\n        104188,\n        104194,\n        104196,\n        104200,\n        104208,\n        104224,\n        104252,\n        104256,\n        104312,\n        104326,\n        104332,\n        104344,\n        104368,\n        104382,\n        104398,\n        104412,\n        104418,\n        104420,\n        104424,\n        104482,\n        104484,\n        104514,\n        104520,\n        104528,\n        104542,\n        104550,\n        104570,\n        104578,\n        104580,\n        104592,\n        104606,\n        104608,\n        104636,\n        104652,\n        104690,\n        104692,\n        104706,\n        104712,\n        104734,\n        104736,\n        104764,\n        104768,\n        104824,\n        104838,\n        104856,\n        104910,\n        104930,\n        104932,\n        104936,\n        104968,\n        104976,\n        104990,\n        104992,\n        105020,\n        105024,\n        105080,\n        105200,\n        105240,\n        105278,\n        105312,\n        105372,\n        105410,\n        105412,\n        105416,\n        105424,\n        105446,\n        105518,\n        105524,\n        105550,\n        105564,\n        105570,\n        105572,\n        105576,\n        105614,\n        105628,\n        105656,\n        105666,\n        105672,\n        105680,\n        105702,\n        105722,\n        105742,\n        105756,\n        105784,\n        105840,\n        105854,\n        105858,\n        105860,\n        105864,\n        105872,\n        105888,\n        105932,\n        105970,\n        105972,\n        106006,\n        106022,\n        106028,\n        106054,\n        106060,\n        106072,\n        106100,\n        106118,\n        106124,\n        106136,\n        106160,\n        106174,\n        106190,\n        106210,\n        106212,\n        106216,\n        106250,\n        106258,\n        106260,\n        106274,\n        106276,\n        106280,\n        106306,\n        106308,\n        106312,\n        106320,\n        106334,\n        106348,\n        106394,\n        106414,\n        106418,\n        106420,\n        106566,\n        106572,\n        106610,\n        106612,\n        106630,\n        106636,\n        106648,\n        106672,\n        106686,\n        106722,\n        106724,\n        106728,\n        106742,\n        106758,\n        106764,\n        106776,\n        106800,\n        106814,\n        106848,\n        106876,\n        106894,\n        106908,\n        106936,\n        106946,\n        106948,\n        106952,\n        106960,\n        106974,\n        106982,\n        106988,\n        107032,\n        107056,\n        107070,\n        107104,\n        107132,\n        107200,\n        107256,\n        107292,\n        107320,\n        107376,\n        107390,\n        107394,\n        107396,\n        107400,\n        107408,\n        107422,\n        107424,\n        107452,\n        107462,\n        107468,\n        107480,\n        107502,\n        107506,\n        107508,\n        107544,\n        107568,\n        107582,\n        107616,\n        107644,\n        107712,\n        107768,\n        108016,\n        108060,\n        108088,\n        108144,\n        108158,\n        108256,\n        108284,\n        108290,\n        108292,\n        108296,\n        108304,\n        108318,\n        108320,\n        108348,\n        108352,\n        108408,\n        108422,\n        108428,\n        108440,\n        108464,\n        108478,\n        108494,\n        108508,\n        108514,\n        108516,\n        108520,\n        108592,\n        108640,\n        108668,\n        108736,\n        108792,\n        109040,\n        109536,\n        109680,\n        109694,\n        109792,\n        109820,\n        110016,\n        110072,\n        110084,\n        110088,\n        110096,\n        110112,\n        110140,\n        110144,\n        110200,\n        110320,\n        110342,\n        110348,\n        110360,\n        110384,\n        110398,\n        110432,\n        110460,\n        110478,\n        110492,\n        110520,\n        110532,\n        110536,\n        110544,\n        110558,\n        110658,\n        110686,\n        110714,\n        110722,\n        110724,\n        110728,\n        110736,\n        110750,\n        110752,\n        110780,\n        110796,\n        110834,\n        110836,\n        110850,\n        110852,\n        110856,\n        110864,\n        110878,\n        110880,\n        110908,\n        110912,\n        110968,\n        110982,\n        111e3,\n        111054,\n        111074,\n        111076,\n        111080,\n        111108,\n        111112,\n        111120,\n        111134,\n        111136,\n        111164,\n        111168,\n        111224,\n        111344,\n        111372,\n        111422,\n        111456,\n        111516,\n        111554,\n        111556,\n        111560,\n        111568,\n        111590,\n        111632,\n        111646,\n        111648,\n        111676,\n        111680,\n        111736,\n        111856,\n        112096,\n        112152,\n        112224,\n        112252,\n        112320,\n        112440,\n        112514,\n        112516,\n        112520,\n        112528,\n        112542,\n        112544,\n        112588,\n        112686,\n        112718,\n        112732,\n        112782,\n        112796,\n        112824,\n        112834,\n        112836,\n        112840,\n        112848,\n        112870,\n        112890,\n        112910,\n        112924,\n        112952,\n        113008,\n        113022,\n        113026,\n        113028,\n        113032,\n        113040,\n        113054,\n        113056,\n        113100,\n        113138,\n        113140,\n        113166,\n        113180,\n        113208,\n        113264,\n        113278,\n        113376,\n        113404,\n        113416,\n        113424,\n        113440,\n        113468,\n        113472,\n        113560,\n        113614,\n        113634,\n        113636,\n        113640,\n        113686,\n        113702,\n        113708,\n        113734,\n        113740,\n        113752,\n        113778,\n        113780,\n        113798,\n        113804,\n        113816,\n        113840,\n        113854,\n        113870,\n        113890,\n        113892,\n        113896,\n        113926,\n        113932,\n        113944,\n        113968,\n        113982,\n        114016,\n        114044,\n        114076,\n        114114,\n        114116,\n        114120,\n        114128,\n        114150,\n        114170,\n        114194,\n        114196,\n        114210,\n        114212,\n        114216,\n        114242,\n        114244,\n        114248,\n        114256,\n        114270,\n        114278,\n        114306,\n        114308,\n        114312,\n        114320,\n        114334,\n        114336,\n        114364,\n        114380,\n        114420,\n        114458,\n        114478,\n        114482,\n        114484,\n        114510,\n        114524,\n        114530,\n        114532,\n        114536,\n        114842,\n        114866,\n        114868,\n        114970,\n        114994,\n        114996,\n        115042,\n        115044,\n        115048,\n        115062,\n        115130,\n        115226,\n        115250,\n        115252,\n        115278,\n        115292,\n        115298,\n        115300,\n        115304,\n        115318,\n        115342,\n        115394,\n        115396,\n        115400,\n        115408,\n        115422,\n        115430,\n        115436,\n        115450,\n        115478,\n        115494,\n        115514,\n        115526,\n        115532,\n        115570,\n        115572,\n        115738,\n        115758,\n        115762,\n        115764,\n        115790,\n        115804,\n        115810,\n        115812,\n        115816,\n        115830,\n        115854,\n        115868,\n        115896,\n        115906,\n        115912,\n        115920,\n        115934,\n        115942,\n        115948,\n        115962,\n        115996,\n        116024,\n        116080,\n        116094,\n        116098,\n        116100,\n        116104,\n        116112,\n        116126,\n        116128,\n        116156,\n        116166,\n        116172,\n        116184,\n        116206,\n        116210,\n        116212,\n        116246,\n        116262,\n        116268,\n        116282,\n        116294,\n        116300,\n        116312,\n        116334,\n        116338,\n        116340,\n        116358,\n        116364,\n        116376,\n        116400,\n        116414,\n        116430,\n        116444,\n        116450,\n        116452,\n        116456,\n        116498,\n        116500,\n        116514,\n        116520,\n        116534,\n        116546,\n        116548,\n        116552,\n        116560,\n        116574,\n        116582,\n        116588,\n        116602,\n        116654,\n        116694,\n        116714,\n        116762,\n        116782,\n        116786,\n        116788,\n        116814,\n        116828,\n        116834,\n        116836,\n        116840,\n        116854,\n        116878,\n        116892,\n        116920,\n        116930,\n        116936,\n        116944,\n        116958,\n        116966,\n        116972,\n        116986,\n        117006,\n        117048,\n        117104,\n        117118,\n        117122,\n        117124,\n        117136,\n        117150,\n        117152,\n        117180,\n        117190,\n        117196,\n        117208,\n        117230,\n        117234,\n        117236,\n        117304,\n        117360,\n        117374,\n        117472,\n        117500,\n        117506,\n        117508,\n        117512,\n        117520,\n        117536,\n        117564,\n        117568,\n        117624,\n        117638,\n        117644,\n        117656,\n        117680,\n        117694,\n        117710,\n        117724,\n        117730,\n        117732,\n        117736,\n        117750,\n        117782,\n        117798,\n        117804,\n        117818,\n        117830,\n        117848,\n        117874,\n        117876,\n        117894,\n        117936,\n        117950,\n        117966,\n        117986,\n        117988,\n        117992,\n        118022,\n        118028,\n        118040,\n        118064,\n        118078,\n        118112,\n        118140,\n        118172,\n        118210,\n        118212,\n        118216,\n        118224,\n        118238,\n        118246,\n        118266,\n        118306,\n        118312,\n        118338,\n        118352,\n        118366,\n        118374,\n        118394,\n        118402,\n        118404,\n        118408,\n        118416,\n        118430,\n        118432,\n        118460,\n        118476,\n        118514,\n        118516,\n        118574,\n        118578,\n        118580,\n        118606,\n        118620,\n        118626,\n        118628,\n        118632,\n        118678,\n        118694,\n        118700,\n        118730,\n        118738,\n        118740,\n        118830,\n        118834,\n        118836,\n        118862,\n        118876,\n        118882,\n        118884,\n        118888,\n        118902,\n        118926,\n        118940,\n        118968,\n        118978,\n        118980,\n        118984,\n        118992,\n        119006,\n        119014,\n        119020,\n        119034,\n        119068,\n        119096,\n        119152,\n        119166,\n        119170,\n        119172,\n        119176,\n        119184,\n        119198,\n        119200,\n        119228,\n        119238,\n        119244,\n        119256,\n        119278,\n        119282,\n        119284,\n        119324,\n        119352,\n        119408,\n        119422,\n        119520,\n        119548,\n        119554,\n        119556,\n        119560,\n        119568,\n        119582,\n        119584,\n        119612,\n        119616,\n        119672,\n        119686,\n        119692,\n        119704,\n        119728,\n        119742,\n        119758,\n        119772,\n        119778,\n        119780,\n        119784,\n        119798,\n        119920,\n        119934,\n        120032,\n        120060,\n        120256,\n        120312,\n        120324,\n        120328,\n        120336,\n        120352,\n        120384,\n        120440,\n        120560,\n        120582,\n        120588,\n        120600,\n        120624,\n        120638,\n        120672,\n        120700,\n        120718,\n        120732,\n        120760,\n        120770,\n        120772,\n        120776,\n        120784,\n        120798,\n        120806,\n        120812,\n        120870,\n        120876,\n        120890,\n        120902,\n        120908,\n        120920,\n        120946,\n        120948,\n        120966,\n        120972,\n        120984,\n        121008,\n        121022,\n        121038,\n        121058,\n        121060,\n        121064,\n        121078,\n        121100,\n        121112,\n        121136,\n        121150,\n        121184,\n        121212,\n        121244,\n        121282,\n        121284,\n        121288,\n        121296,\n        121318,\n        121338,\n        121356,\n        121368,\n        121392,\n        121406,\n        121440,\n        121468,\n        121536,\n        121592,\n        121656,\n        121730,\n        121732,\n        121736,\n        121744,\n        121758,\n        121760,\n        121804,\n        121842,\n        121844,\n        121890,\n        121922,\n        121924,\n        121928,\n        121936,\n        121950,\n        121958,\n        121978,\n        121986,\n        121988,\n        121992,\n        122e3,\n        122014,\n        122016,\n        122044,\n        122060,\n        122098,\n        122100,\n        122116,\n        122120,\n        122128,\n        122142,\n        122144,\n        122172,\n        122176,\n        122232,\n        122246,\n        122264,\n        122318,\n        122338,\n        122340,\n        122344,\n        122414,\n        122418,\n        122420,\n        122446,\n        122460,\n        122466,\n        122468,\n        122472,\n        122510,\n        122524,\n        122552,\n        122562,\n        122564,\n        122568,\n        122576,\n        122598,\n        122618,\n        122646,\n        122662,\n        122668,\n        122694,\n        122700,\n        122712,\n        122738,\n        122740,\n        122762,\n        122770,\n        122772,\n        122786,\n        122788,\n        122792,\n        123018,\n        123026,\n        123028,\n        123042,\n        123044,\n        123048,\n        123062,\n        123098,\n        123146,\n        123154,\n        123156,\n        123170,\n        123172,\n        123176,\n        123190,\n        123202,\n        123204,\n        123208,\n        123216,\n        123238,\n        123244,\n        123258,\n        123290,\n        123314,\n        123316,\n        123402,\n        123410,\n        123412,\n        123426,\n        123428,\n        123432,\n        123446,\n        123458,\n        123464,\n        123472,\n        123486,\n        123494,\n        123500,\n        123514,\n        123522,\n        123524,\n        123528,\n        123536,\n        123552,\n        123580,\n        123590,\n        123596,\n        123608,\n        123630,\n        123634,\n        123636,\n        123674,\n        123698,\n        123700,\n        123740,\n        123746,\n        123748,\n        123752,\n        123834,\n        123914,\n        123922,\n        123924,\n        123938,\n        123944,\n        123958,\n        123970,\n        123976,\n        123984,\n        123998,\n        124006,\n        124012,\n        124026,\n        124034,\n        124036,\n        124048,\n        124062,\n        124064,\n        124092,\n        124102,\n        124108,\n        124120,\n        124142,\n        124146,\n        124148,\n        124162,\n        124164,\n        124168,\n        124176,\n        124190,\n        124192,\n        124220,\n        124224,\n        124280,\n        124294,\n        124300,\n        124312,\n        124336,\n        124350,\n        124366,\n        124380,\n        124386,\n        124388,\n        124392,\n        124406,\n        124442,\n        124462,\n        124466,\n        124468,\n        124494,\n        124508,\n        124514,\n        124520,\n        124558,\n        124572,\n        124600,\n        124610,\n        124612,\n        124616,\n        124624,\n        124646,\n        124666,\n        124694,\n        124710,\n        124716,\n        124730,\n        124742,\n        124748,\n        124760,\n        124786,\n        124788,\n        124818,\n        124820,\n        124834,\n        124836,\n        124840,\n        124854,\n        124946,\n        124948,\n        124962,\n        124964,\n        124968,\n        124982,\n        124994,\n        124996,\n        125e3,\n        125008,\n        125022,\n        125030,\n        125036,\n        125050,\n        125058,\n        125060,\n        125064,\n        125072,\n        125086,\n        125088,\n        125116,\n        125126,\n        125132,\n        125144,\n        125166,\n        125170,\n        125172,\n        125186,\n        125188,\n        125192,\n        125200,\n        125216,\n        125244,\n        125248,\n        125304,\n        125318,\n        125324,\n        125336,\n        125360,\n        125374,\n        125390,\n        125404,\n        125410,\n        125412,\n        125416,\n        125430,\n        125444,\n        125448,\n        125456,\n        125472,\n        125504,\n        125560,\n        125680,\n        125702,\n        125708,\n        125720,\n        125744,\n        125758,\n        125792,\n        125820,\n        125838,\n        125852,\n        125880,\n        125890,\n        125892,\n        125896,\n        125904,\n        125918,\n        125926,\n        125932,\n        125978,\n        125998,\n        126002,\n        126004,\n        126030,\n        126044,\n        126050,\n        126052,\n        126056,\n        126094,\n        126108,\n        126136,\n        126146,\n        126148,\n        126152,\n        126160,\n        126182,\n        126202,\n        126222,\n        126236,\n        126264,\n        126320,\n        126334,\n        126338,\n        126340,\n        126344,\n        126352,\n        126366,\n        126368,\n        126412,\n        126450,\n        126452,\n        126486,\n        126502,\n        126508,\n        126522,\n        126534,\n        126540,\n        126552,\n        126574,\n        126578,\n        126580,\n        126598,\n        126604,\n        126616,\n        126640,\n        126654,\n        126670,\n        126684,\n        126690,\n        126692,\n        126696,\n        126738,\n        126754,\n        126756,\n        126760,\n        126774,\n        126786,\n        126788,\n        126792,\n        126800,\n        126814,\n        126822,\n        126828,\n        126842,\n        126894,\n        126898,\n        126900,\n        126934,\n        127126,\n        127142,\n        127148,\n        127162,\n        127178,\n        127186,\n        127188,\n        127254,\n        127270,\n        127276,\n        127290,\n        127302,\n        127308,\n        127320,\n        127342,\n        127346,\n        127348,\n        127370,\n        127378,\n        127380,\n        127394,\n        127396,\n        127400,\n        127450,\n        127510,\n        127526,\n        127532,\n        127546,\n        127558,\n        127576,\n        127598,\n        127602,\n        127604,\n        127622,\n        127628,\n        127640,\n        127664,\n        127678,\n        127694,\n        127708,\n        127714,\n        127716,\n        127720,\n        127734,\n        127754,\n        127762,\n        127764,\n        127778,\n        127784,\n        127810,\n        127812,\n        127816,\n        127824,\n        127838,\n        127846,\n        127866,\n        127898,\n        127918,\n        127922,\n        127924,\n        128022,\n        128038,\n        128044,\n        128058,\n        128070,\n        128076,\n        128088,\n        128110,\n        128114,\n        128116,\n        128134,\n        128140,\n        128152,\n        128176,\n        128190,\n        128206,\n        128220,\n        128226,\n        128228,\n        128232,\n        128246,\n        128262,\n        128268,\n        128280,\n        128304,\n        128318,\n        128352,\n        128380,\n        128398,\n        128412,\n        128440,\n        128450,\n        128452,\n        128456,\n        128464,\n        128478,\n        128486,\n        128492,\n        128506,\n        128522,\n        128530,\n        128532,\n        128546,\n        128548,\n        128552,\n        128566,\n        128578,\n        128580,\n        128584,\n        128592,\n        128606,\n        128614,\n        128634,\n        128642,\n        128644,\n        128648,\n        128656,\n        128670,\n        128672,\n        128700,\n        128716,\n        128754,\n        128756,\n        128794,\n        128814,\n        128818,\n        128820,\n        128846,\n        128860,\n        128866,\n        128868,\n        128872,\n        128886,\n        128918,\n        128934,\n        128940,\n        128954,\n        128978,\n        128980,\n        129178,\n        129198,\n        129202,\n        129204,\n        129238,\n        129258,\n        129306,\n        129326,\n        129330,\n        129332,\n        129358,\n        129372,\n        129378,\n        129380,\n        129384,\n        129398,\n        129430,\n        129446,\n        129452,\n        129466,\n        129482,\n        129490,\n        129492,\n        129562,\n        129582,\n        129586,\n        129588,\n        129614,\n        129628,\n        129634,\n        129636,\n        129640,\n        129654,\n        129678,\n        129692,\n        129720,\n        129730,\n        129732,\n        129736,\n        129744,\n        129758,\n        129766,\n        129772,\n        129814,\n        129830,\n        129836,\n        129850,\n        129862,\n        129868,\n        129880,\n        129902,\n        129906,\n        129908,\n        129930,\n        129938,\n        129940,\n        129954,\n        129956,\n        129960,\n        129974,\n        130010\n    ]), t.CODEWORD_TABLE = Int32Array.from([\n        2627,\n        1819,\n        2622,\n        2621,\n        1813,\n        1812,\n        2729,\n        2724,\n        2723,\n        2779,\n        2774,\n        2773,\n        902,\n        896,\n        908,\n        868,\n        865,\n        861,\n        859,\n        2511,\n        873,\n        871,\n        1780,\n        835,\n        2493,\n        825,\n        2491,\n        842,\n        837,\n        844,\n        1764,\n        1762,\n        811,\n        810,\n        809,\n        2483,\n        807,\n        2482,\n        806,\n        2480,\n        815,\n        814,\n        813,\n        812,\n        2484,\n        817,\n        816,\n        1745,\n        1744,\n        1742,\n        1746,\n        2655,\n        2637,\n        2635,\n        2626,\n        2625,\n        2623,\n        2628,\n        1820,\n        2752,\n        2739,\n        2737,\n        2728,\n        2727,\n        2725,\n        2730,\n        2785,\n        2783,\n        2778,\n        2777,\n        2775,\n        2780,\n        787,\n        781,\n        747,\n        739,\n        736,\n        2413,\n        754,\n        752,\n        1719,\n        692,\n        689,\n        681,\n        2371,\n        678,\n        2369,\n        700,\n        697,\n        694,\n        703,\n        1688,\n        1686,\n        642,\n        638,\n        2343,\n        631,\n        2341,\n        627,\n        2338,\n        651,\n        646,\n        643,\n        2345,\n        654,\n        652,\n        1652,\n        1650,\n        1647,\n        1654,\n        601,\n        599,\n        2322,\n        596,\n        2321,\n        594,\n        2319,\n        2317,\n        611,\n        610,\n        608,\n        606,\n        2324,\n        603,\n        2323,\n        615,\n        614,\n        612,\n        1617,\n        1616,\n        1614,\n        1612,\n        616,\n        1619,\n        1618,\n        2575,\n        2538,\n        2536,\n        905,\n        901,\n        898,\n        909,\n        2509,\n        2507,\n        2504,\n        870,\n        867,\n        864,\n        860,\n        2512,\n        875,\n        872,\n        1781,\n        2490,\n        2489,\n        2487,\n        2485,\n        1748,\n        836,\n        834,\n        832,\n        830,\n        2494,\n        827,\n        2492,\n        843,\n        841,\n        839,\n        845,\n        1765,\n        1763,\n        2701,\n        2676,\n        2674,\n        2653,\n        2648,\n        2656,\n        2634,\n        2633,\n        2631,\n        2629,\n        1821,\n        2638,\n        2636,\n        2770,\n        2763,\n        2761,\n        2750,\n        2745,\n        2753,\n        2736,\n        2735,\n        2733,\n        2731,\n        1848,\n        2740,\n        2738,\n        2786,\n        2784,\n        591,\n        588,\n        576,\n        569,\n        566,\n        2296,\n        1590,\n        537,\n        534,\n        526,\n        2276,\n        522,\n        2274,\n        545,\n        542,\n        539,\n        548,\n        1572,\n        1570,\n        481,\n        2245,\n        466,\n        2242,\n        462,\n        2239,\n        492,\n        485,\n        482,\n        2249,\n        496,\n        494,\n        1534,\n        1531,\n        1528,\n        1538,\n        413,\n        2196,\n        406,\n        2191,\n        2188,\n        425,\n        419,\n        2202,\n        415,\n        2199,\n        432,\n        430,\n        427,\n        1472,\n        1467,\n        1464,\n        433,\n        1476,\n        1474,\n        368,\n        367,\n        2160,\n        365,\n        2159,\n        362,\n        2157,\n        2155,\n        2152,\n        378,\n        377,\n        375,\n        2166,\n        372,\n        2165,\n        369,\n        2162,\n        383,\n        381,\n        379,\n        2168,\n        1419,\n        1418,\n        1416,\n        1414,\n        385,\n        1411,\n        384,\n        1423,\n        1422,\n        1420,\n        1424,\n        2461,\n        802,\n        2441,\n        2439,\n        790,\n        786,\n        783,\n        794,\n        2409,\n        2406,\n        2403,\n        750,\n        742,\n        738,\n        2414,\n        756,\n        753,\n        1720,\n        2367,\n        2365,\n        2362,\n        2359,\n        1663,\n        693,\n        691,\n        684,\n        2373,\n        680,\n        2370,\n        702,\n        699,\n        696,\n        704,\n        1690,\n        1687,\n        2337,\n        2336,\n        2334,\n        2332,\n        1624,\n        2329,\n        1622,\n        640,\n        637,\n        2344,\n        634,\n        2342,\n        630,\n        2340,\n        650,\n        648,\n        645,\n        2346,\n        655,\n        653,\n        1653,\n        1651,\n        1649,\n        1655,\n        2612,\n        2597,\n        2595,\n        2571,\n        2568,\n        2565,\n        2576,\n        2534,\n        2529,\n        2526,\n        1787,\n        2540,\n        2537,\n        907,\n        904,\n        900,\n        910,\n        2503,\n        2502,\n        2500,\n        2498,\n        1768,\n        2495,\n        1767,\n        2510,\n        2508,\n        2506,\n        869,\n        866,\n        863,\n        2513,\n        876,\n        874,\n        1782,\n        2720,\n        2713,\n        2711,\n        2697,\n        2694,\n        2691,\n        2702,\n        2672,\n        2670,\n        2664,\n        1828,\n        2678,\n        2675,\n        2647,\n        2646,\n        2644,\n        2642,\n        1823,\n        2639,\n        1822,\n        2654,\n        2652,\n        2650,\n        2657,\n        2771,\n        1855,\n        2765,\n        2762,\n        1850,\n        1849,\n        2751,\n        2749,\n        2747,\n        2754,\n        353,\n        2148,\n        344,\n        342,\n        336,\n        2142,\n        332,\n        2140,\n        345,\n        1375,\n        1373,\n        306,\n        2130,\n        299,\n        2128,\n        295,\n        2125,\n        319,\n        314,\n        311,\n        2132,\n        1354,\n        1352,\n        1349,\n        1356,\n        262,\n        257,\n        2101,\n        253,\n        2096,\n        2093,\n        274,\n        273,\n        267,\n        2107,\n        263,\n        2104,\n        280,\n        278,\n        275,\n        1316,\n        1311,\n        1308,\n        1320,\n        1318,\n        2052,\n        202,\n        2050,\n        2044,\n        2040,\n        219,\n        2063,\n        212,\n        2060,\n        208,\n        2055,\n        224,\n        221,\n        2066,\n        1260,\n        1258,\n        1252,\n        231,\n        1248,\n        229,\n        1266,\n        1264,\n        1261,\n        1268,\n        155,\n        1998,\n        153,\n        1996,\n        1994,\n        1991,\n        1988,\n        165,\n        164,\n        2007,\n        162,\n        2006,\n        159,\n        2003,\n        2e3,\n        172,\n        171,\n        169,\n        2012,\n        166,\n        2010,\n        1186,\n        1184,\n        1182,\n        1179,\n        175,\n        1176,\n        173,\n        1192,\n        1191,\n        1189,\n        1187,\n        176,\n        1194,\n        1193,\n        2313,\n        2307,\n        2305,\n        592,\n        589,\n        2294,\n        2292,\n        2289,\n        578,\n        572,\n        568,\n        2297,\n        580,\n        1591,\n        2272,\n        2267,\n        2264,\n        1547,\n        538,\n        536,\n        529,\n        2278,\n        525,\n        2275,\n        547,\n        544,\n        541,\n        1574,\n        1571,\n        2237,\n        2235,\n        2229,\n        1493,\n        2225,\n        1489,\n        478,\n        2247,\n        470,\n        2244,\n        465,\n        2241,\n        493,\n        488,\n        484,\n        2250,\n        498,\n        495,\n        1536,\n        1533,\n        1530,\n        1539,\n        2187,\n        2186,\n        2184,\n        2182,\n        1432,\n        2179,\n        1430,\n        2176,\n        1427,\n        414,\n        412,\n        2197,\n        409,\n        2195,\n        405,\n        2193,\n        2190,\n        426,\n        424,\n        421,\n        2203,\n        418,\n        2201,\n        431,\n        429,\n        1473,\n        1471,\n        1469,\n        1466,\n        434,\n        1477,\n        1475,\n        2478,\n        2472,\n        2470,\n        2459,\n        2457,\n        2454,\n        2462,\n        803,\n        2437,\n        2432,\n        2429,\n        1726,\n        2443,\n        2440,\n        792,\n        789,\n        785,\n        2401,\n        2399,\n        2393,\n        1702,\n        2389,\n        1699,\n        2411,\n        2408,\n        2405,\n        745,\n        741,\n        2415,\n        758,\n        755,\n        1721,\n        2358,\n        2357,\n        2355,\n        2353,\n        1661,\n        2350,\n        1660,\n        2347,\n        1657,\n        2368,\n        2366,\n        2364,\n        2361,\n        1666,\n        690,\n        687,\n        2374,\n        683,\n        2372,\n        701,\n        698,\n        705,\n        1691,\n        1689,\n        2619,\n        2617,\n        2610,\n        2608,\n        2605,\n        2613,\n        2593,\n        2588,\n        2585,\n        1803,\n        2599,\n        2596,\n        2563,\n        2561,\n        2555,\n        1797,\n        2551,\n        1795,\n        2573,\n        2570,\n        2567,\n        2577,\n        2525,\n        2524,\n        2522,\n        2520,\n        1786,\n        2517,\n        1785,\n        2514,\n        1783,\n        2535,\n        2533,\n        2531,\n        2528,\n        1788,\n        2541,\n        2539,\n        906,\n        903,\n        911,\n        2721,\n        1844,\n        2715,\n        2712,\n        1838,\n        1836,\n        2699,\n        2696,\n        2693,\n        2703,\n        1827,\n        1826,\n        1824,\n        2673,\n        2671,\n        2669,\n        2666,\n        1829,\n        2679,\n        2677,\n        1858,\n        1857,\n        2772,\n        1854,\n        1853,\n        1851,\n        1856,\n        2766,\n        2764,\n        143,\n        1987,\n        139,\n        1986,\n        135,\n        133,\n        131,\n        1984,\n        128,\n        1983,\n        125,\n        1981,\n        138,\n        137,\n        136,\n        1985,\n        1133,\n        1132,\n        1130,\n        112,\n        110,\n        1974,\n        107,\n        1973,\n        104,\n        1971,\n        1969,\n        122,\n        121,\n        119,\n        117,\n        1977,\n        114,\n        1976,\n        124,\n        1115,\n        1114,\n        1112,\n        1110,\n        1117,\n        1116,\n        84,\n        83,\n        1953,\n        81,\n        1952,\n        78,\n        1950,\n        1948,\n        1945,\n        94,\n        93,\n        91,\n        1959,\n        88,\n        1958,\n        85,\n        1955,\n        99,\n        97,\n        95,\n        1961,\n        1086,\n        1085,\n        1083,\n        1081,\n        1078,\n        100,\n        1090,\n        1089,\n        1087,\n        1091,\n        49,\n        47,\n        1917,\n        44,\n        1915,\n        1913,\n        1910,\n        1907,\n        59,\n        1926,\n        56,\n        1925,\n        53,\n        1922,\n        1919,\n        66,\n        64,\n        1931,\n        61,\n        1929,\n        1042,\n        1040,\n        1038,\n        71,\n        1035,\n        70,\n        1032,\n        68,\n        1048,\n        1047,\n        1045,\n        1043,\n        1050,\n        1049,\n        12,\n        10,\n        1869,\n        1867,\n        1864,\n        1861,\n        21,\n        1880,\n        19,\n        1877,\n        1874,\n        1871,\n        28,\n        1888,\n        25,\n        1886,\n        22,\n        1883,\n        982,\n        980,\n        977,\n        974,\n        32,\n        30,\n        991,\n        989,\n        987,\n        984,\n        34,\n        995,\n        994,\n        992,\n        2151,\n        2150,\n        2147,\n        2146,\n        2144,\n        356,\n        355,\n        354,\n        2149,\n        2139,\n        2138,\n        2136,\n        2134,\n        1359,\n        343,\n        341,\n        338,\n        2143,\n        335,\n        2141,\n        348,\n        347,\n        346,\n        1376,\n        1374,\n        2124,\n        2123,\n        2121,\n        2119,\n        1326,\n        2116,\n        1324,\n        310,\n        308,\n        305,\n        2131,\n        302,\n        2129,\n        298,\n        2127,\n        320,\n        318,\n        316,\n        313,\n        2133,\n        322,\n        321,\n        1355,\n        1353,\n        1351,\n        1357,\n        2092,\n        2091,\n        2089,\n        2087,\n        1276,\n        2084,\n        1274,\n        2081,\n        1271,\n        259,\n        2102,\n        256,\n        2100,\n        252,\n        2098,\n        2095,\n        272,\n        269,\n        2108,\n        266,\n        2106,\n        281,\n        279,\n        277,\n        1317,\n        1315,\n        1313,\n        1310,\n        282,\n        1321,\n        1319,\n        2039,\n        2037,\n        2035,\n        2032,\n        1203,\n        2029,\n        1200,\n        1197,\n        207,\n        2053,\n        205,\n        2051,\n        201,\n        2049,\n        2046,\n        2043,\n        220,\n        218,\n        2064,\n        215,\n        2062,\n        211,\n        2059,\n        228,\n        226,\n        223,\n        2069,\n        1259,\n        1257,\n        1254,\n        232,\n        1251,\n        230,\n        1267,\n        1265,\n        1263,\n        2316,\n        2315,\n        2312,\n        2311,\n        2309,\n        2314,\n        2304,\n        2303,\n        2301,\n        2299,\n        1593,\n        2308,\n        2306,\n        590,\n        2288,\n        2287,\n        2285,\n        2283,\n        1578,\n        2280,\n        1577,\n        2295,\n        2293,\n        2291,\n        579,\n        577,\n        574,\n        571,\n        2298,\n        582,\n        581,\n        1592,\n        2263,\n        2262,\n        2260,\n        2258,\n        1545,\n        2255,\n        1544,\n        2252,\n        1541,\n        2273,\n        2271,\n        2269,\n        2266,\n        1550,\n        535,\n        532,\n        2279,\n        528,\n        2277,\n        546,\n        543,\n        549,\n        1575,\n        1573,\n        2224,\n        2222,\n        2220,\n        1486,\n        2217,\n        1485,\n        2214,\n        1482,\n        1479,\n        2238,\n        2236,\n        2234,\n        2231,\n        1496,\n        2228,\n        1492,\n        480,\n        477,\n        2248,\n        473,\n        2246,\n        469,\n        2243,\n        490,\n        487,\n        2251,\n        497,\n        1537,\n        1535,\n        1532,\n        2477,\n        2476,\n        2474,\n        2479,\n        2469,\n        2468,\n        2466,\n        2464,\n        1730,\n        2473,\n        2471,\n        2453,\n        2452,\n        2450,\n        2448,\n        1729,\n        2445,\n        1728,\n        2460,\n        2458,\n        2456,\n        2463,\n        805,\n        804,\n        2428,\n        2427,\n        2425,\n        2423,\n        1725,\n        2420,\n        1724,\n        2417,\n        1722,\n        2438,\n        2436,\n        2434,\n        2431,\n        1727,\n        2444,\n        2442,\n        793,\n        791,\n        788,\n        795,\n        2388,\n        2386,\n        2384,\n        1697,\n        2381,\n        1696,\n        2378,\n        1694,\n        1692,\n        2402,\n        2400,\n        2398,\n        2395,\n        1703,\n        2392,\n        1701,\n        2412,\n        2410,\n        2407,\n        751,\n        748,\n        744,\n        2416,\n        759,\n        757,\n        1807,\n        2620,\n        2618,\n        1806,\n        1805,\n        2611,\n        2609,\n        2607,\n        2614,\n        1802,\n        1801,\n        1799,\n        2594,\n        2592,\n        2590,\n        2587,\n        1804,\n        2600,\n        2598,\n        1794,\n        1793,\n        1791,\n        1789,\n        2564,\n        2562,\n        2560,\n        2557,\n        1798,\n        2554,\n        1796,\n        2574,\n        2572,\n        2569,\n        2578,\n        1847,\n        1846,\n        2722,\n        1843,\n        1842,\n        1840,\n        1845,\n        2716,\n        2714,\n        1835,\n        1834,\n        1832,\n        1830,\n        1839,\n        1837,\n        2700,\n        2698,\n        2695,\n        2704,\n        1817,\n        1811,\n        1810,\n        897,\n        862,\n        1777,\n        829,\n        826,\n        838,\n        1760,\n        1758,\n        808,\n        2481,\n        1741,\n        1740,\n        1738,\n        1743,\n        2624,\n        1818,\n        2726,\n        2776,\n        782,\n        740,\n        737,\n        1715,\n        686,\n        679,\n        695,\n        1682,\n        1680,\n        639,\n        628,\n        2339,\n        647,\n        644,\n        1645,\n        1643,\n        1640,\n        1648,\n        602,\n        600,\n        597,\n        595,\n        2320,\n        593,\n        2318,\n        609,\n        607,\n        604,\n        1611,\n        1610,\n        1608,\n        1606,\n        613,\n        1615,\n        1613,\n        2328,\n        926,\n        924,\n        892,\n        886,\n        899,\n        857,\n        850,\n        2505,\n        1778,\n        824,\n        823,\n        821,\n        819,\n        2488,\n        818,\n        2486,\n        833,\n        831,\n        828,\n        840,\n        1761,\n        1759,\n        2649,\n        2632,\n        2630,\n        2746,\n        2734,\n        2732,\n        2782,\n        2781,\n        570,\n        567,\n        1587,\n        531,\n        527,\n        523,\n        540,\n        1566,\n        1564,\n        476,\n        467,\n        463,\n        2240,\n        486,\n        483,\n        1524,\n        1521,\n        1518,\n        1529,\n        411,\n        403,\n        2192,\n        399,\n        2189,\n        423,\n        416,\n        1462,\n        1457,\n        1454,\n        428,\n        1468,\n        1465,\n        2210,\n        366,\n        363,\n        2158,\n        360,\n        2156,\n        357,\n        2153,\n        376,\n        373,\n        370,\n        2163,\n        1410,\n        1409,\n        1407,\n        1405,\n        382,\n        1402,\n        380,\n        1417,\n        1415,\n        1412,\n        1421,\n        2175,\n        2174,\n        777,\n        774,\n        771,\n        784,\n        732,\n        725,\n        722,\n        2404,\n        743,\n        1716,\n        676,\n        674,\n        668,\n        2363,\n        665,\n        2360,\n        685,\n        1684,\n        1681,\n        626,\n        624,\n        622,\n        2335,\n        620,\n        2333,\n        617,\n        2330,\n        641,\n        635,\n        649,\n        1646,\n        1644,\n        1642,\n        2566,\n        928,\n        925,\n        2530,\n        2527,\n        894,\n        891,\n        888,\n        2501,\n        2499,\n        2496,\n        858,\n        856,\n        854,\n        851,\n        1779,\n        2692,\n        2668,\n        2665,\n        2645,\n        2643,\n        2640,\n        2651,\n        2768,\n        2759,\n        2757,\n        2744,\n        2743,\n        2741,\n        2748,\n        352,\n        1382,\n        340,\n        337,\n        333,\n        1371,\n        1369,\n        307,\n        300,\n        296,\n        2126,\n        315,\n        312,\n        1347,\n        1342,\n        1350,\n        261,\n        258,\n        250,\n        2097,\n        246,\n        2094,\n        271,\n        268,\n        264,\n        1306,\n        1301,\n        1298,\n        276,\n        1312,\n        1309,\n        2115,\n        203,\n        2048,\n        195,\n        2045,\n        191,\n        2041,\n        213,\n        209,\n        2056,\n        1246,\n        1244,\n        1238,\n        225,\n        1234,\n        222,\n        1256,\n        1253,\n        1249,\n        1262,\n        2080,\n        2079,\n        154,\n        1997,\n        150,\n        1995,\n        147,\n        1992,\n        1989,\n        163,\n        160,\n        2004,\n        156,\n        2001,\n        1175,\n        1174,\n        1172,\n        1170,\n        1167,\n        170,\n        1164,\n        167,\n        1185,\n        1183,\n        1180,\n        1177,\n        174,\n        1190,\n        1188,\n        2025,\n        2024,\n        2022,\n        587,\n        586,\n        564,\n        559,\n        556,\n        2290,\n        573,\n        1588,\n        520,\n        518,\n        512,\n        2268,\n        508,\n        2265,\n        530,\n        1568,\n        1565,\n        461,\n        457,\n        2233,\n        450,\n        2230,\n        446,\n        2226,\n        479,\n        471,\n        489,\n        1526,\n        1523,\n        1520,\n        397,\n        395,\n        2185,\n        392,\n        2183,\n        389,\n        2180,\n        2177,\n        410,\n        2194,\n        402,\n        422,\n        1463,\n        1461,\n        1459,\n        1456,\n        1470,\n        2455,\n        799,\n        2433,\n        2430,\n        779,\n        776,\n        773,\n        2397,\n        2394,\n        2390,\n        734,\n        728,\n        724,\n        746,\n        1717,\n        2356,\n        2354,\n        2351,\n        2348,\n        1658,\n        677,\n        675,\n        673,\n        670,\n        667,\n        688,\n        1685,\n        1683,\n        2606,\n        2589,\n        2586,\n        2559,\n        2556,\n        2552,\n        927,\n        2523,\n        2521,\n        2518,\n        2515,\n        1784,\n        2532,\n        895,\n        893,\n        890,\n        2718,\n        2709,\n        2707,\n        2689,\n        2687,\n        2684,\n        2663,\n        2662,\n        2660,\n        2658,\n        1825,\n        2667,\n        2769,\n        1852,\n        2760,\n        2758,\n        142,\n        141,\n        1139,\n        1138,\n        134,\n        132,\n        129,\n        126,\n        1982,\n        1129,\n        1128,\n        1126,\n        1131,\n        113,\n        111,\n        108,\n        105,\n        1972,\n        101,\n        1970,\n        120,\n        118,\n        115,\n        1109,\n        1108,\n        1106,\n        1104,\n        123,\n        1113,\n        1111,\n        82,\n        79,\n        1951,\n        75,\n        1949,\n        72,\n        1946,\n        92,\n        89,\n        86,\n        1956,\n        1077,\n        1076,\n        1074,\n        1072,\n        98,\n        1069,\n        96,\n        1084,\n        1082,\n        1079,\n        1088,\n        1968,\n        1967,\n        48,\n        45,\n        1916,\n        42,\n        1914,\n        39,\n        1911,\n        1908,\n        60,\n        57,\n        54,\n        1923,\n        50,\n        1920,\n        1031,\n        1030,\n        1028,\n        1026,\n        67,\n        1023,\n        65,\n        1020,\n        62,\n        1041,\n        1039,\n        1036,\n        1033,\n        69,\n        1046,\n        1044,\n        1944,\n        1943,\n        1941,\n        11,\n        9,\n        1868,\n        7,\n        1865,\n        1862,\n        1859,\n        20,\n        1878,\n        16,\n        1875,\n        13,\n        1872,\n        970,\n        968,\n        966,\n        963,\n        29,\n        960,\n        26,\n        23,\n        983,\n        981,\n        978,\n        975,\n        33,\n        971,\n        31,\n        990,\n        988,\n        985,\n        1906,\n        1904,\n        1902,\n        993,\n        351,\n        2145,\n        1383,\n        331,\n        330,\n        328,\n        326,\n        2137,\n        323,\n        2135,\n        339,\n        1372,\n        1370,\n        294,\n        293,\n        291,\n        289,\n        2122,\n        286,\n        2120,\n        283,\n        2117,\n        309,\n        303,\n        317,\n        1348,\n        1346,\n        1344,\n        245,\n        244,\n        242,\n        2090,\n        239,\n        2088,\n        236,\n        2085,\n        2082,\n        260,\n        2099,\n        249,\n        270,\n        1307,\n        1305,\n        1303,\n        1300,\n        1314,\n        189,\n        2038,\n        186,\n        2036,\n        183,\n        2033,\n        2030,\n        2026,\n        206,\n        198,\n        2047,\n        194,\n        216,\n        1247,\n        1245,\n        1243,\n        1240,\n        227,\n        1237,\n        1255,\n        2310,\n        2302,\n        2300,\n        2286,\n        2284,\n        2281,\n        565,\n        563,\n        561,\n        558,\n        575,\n        1589,\n        2261,\n        2259,\n        2256,\n        2253,\n        1542,\n        521,\n        519,\n        517,\n        514,\n        2270,\n        511,\n        533,\n        1569,\n        1567,\n        2223,\n        2221,\n        2218,\n        2215,\n        1483,\n        2211,\n        1480,\n        459,\n        456,\n        453,\n        2232,\n        449,\n        474,\n        491,\n        1527,\n        1525,\n        1522,\n        2475,\n        2467,\n        2465,\n        2451,\n        2449,\n        2446,\n        801,\n        800,\n        2426,\n        2424,\n        2421,\n        2418,\n        1723,\n        2435,\n        780,\n        778,\n        775,\n        2387,\n        2385,\n        2382,\n        2379,\n        1695,\n        2375,\n        1693,\n        2396,\n        735,\n        733,\n        730,\n        727,\n        749,\n        1718,\n        2616,\n        2615,\n        2604,\n        2603,\n        2601,\n        2584,\n        2583,\n        2581,\n        2579,\n        1800,\n        2591,\n        2550,\n        2549,\n        2547,\n        2545,\n        1792,\n        2542,\n        1790,\n        2558,\n        929,\n        2719,\n        1841,\n        2710,\n        2708,\n        1833,\n        1831,\n        2690,\n        2688,\n        2686,\n        1815,\n        1809,\n        1808,\n        1774,\n        1756,\n        1754,\n        1737,\n        1736,\n        1734,\n        1739,\n        1816,\n        1711,\n        1676,\n        1674,\n        633,\n        629,\n        1638,\n        1636,\n        1633,\n        1641,\n        598,\n        1605,\n        1604,\n        1602,\n        1600,\n        605,\n        1609,\n        1607,\n        2327,\n        887,\n        853,\n        1775,\n        822,\n        820,\n        1757,\n        1755,\n        1584,\n        524,\n        1560,\n        1558,\n        468,\n        464,\n        1514,\n        1511,\n        1508,\n        1519,\n        408,\n        404,\n        400,\n        1452,\n        1447,\n        1444,\n        417,\n        1458,\n        1455,\n        2208,\n        364,\n        361,\n        358,\n        2154,\n        1401,\n        1400,\n        1398,\n        1396,\n        374,\n        1393,\n        371,\n        1408,\n        1406,\n        1403,\n        1413,\n        2173,\n        2172,\n        772,\n        726,\n        723,\n        1712,\n        672,\n        669,\n        666,\n        682,\n        1678,\n        1675,\n        625,\n        623,\n        621,\n        618,\n        2331,\n        636,\n        632,\n        1639,\n        1637,\n        1635,\n        920,\n        918,\n        884,\n        880,\n        889,\n        849,\n        848,\n        847,\n        846,\n        2497,\n        855,\n        852,\n        1776,\n        2641,\n        2742,\n        2787,\n        1380,\n        334,\n        1367,\n        1365,\n        301,\n        297,\n        1340,\n        1338,\n        1335,\n        1343,\n        255,\n        251,\n        247,\n        1296,\n        1291,\n        1288,\n        265,\n        1302,\n        1299,\n        2113,\n        204,\n        196,\n        192,\n        2042,\n        1232,\n        1230,\n        1224,\n        214,\n        1220,\n        210,\n        1242,\n        1239,\n        1235,\n        1250,\n        2077,\n        2075,\n        151,\n        148,\n        1993,\n        144,\n        1990,\n        1163,\n        1162,\n        1160,\n        1158,\n        1155,\n        161,\n        1152,\n        157,\n        1173,\n        1171,\n        1168,\n        1165,\n        168,\n        1181,\n        1178,\n        2021,\n        2020,\n        2018,\n        2023,\n        585,\n        560,\n        557,\n        1585,\n        516,\n        509,\n        1562,\n        1559,\n        458,\n        447,\n        2227,\n        472,\n        1516,\n        1513,\n        1510,\n        398,\n        396,\n        393,\n        390,\n        2181,\n        386,\n        2178,\n        407,\n        1453,\n        1451,\n        1449,\n        1446,\n        420,\n        1460,\n        2209,\n        769,\n        764,\n        720,\n        712,\n        2391,\n        729,\n        1713,\n        664,\n        663,\n        661,\n        659,\n        2352,\n        656,\n        2349,\n        671,\n        1679,\n        1677,\n        2553,\n        922,\n        919,\n        2519,\n        2516,\n        885,\n        883,\n        881,\n        2685,\n        2661,\n        2659,\n        2767,\n        2756,\n        2755,\n        140,\n        1137,\n        1136,\n        130,\n        127,\n        1125,\n        1124,\n        1122,\n        1127,\n        109,\n        106,\n        102,\n        1103,\n        1102,\n        1100,\n        1098,\n        116,\n        1107,\n        1105,\n        1980,\n        80,\n        76,\n        73,\n        1947,\n        1068,\n        1067,\n        1065,\n        1063,\n        90,\n        1060,\n        87,\n        1075,\n        1073,\n        1070,\n        1080,\n        1966,\n        1965,\n        46,\n        43,\n        40,\n        1912,\n        36,\n        1909,\n        1019,\n        1018,\n        1016,\n        1014,\n        58,\n        1011,\n        55,\n        1008,\n        51,\n        1029,\n        1027,\n        1024,\n        1021,\n        63,\n        1037,\n        1034,\n        1940,\n        1939,\n        1937,\n        1942,\n        8,\n        1866,\n        4,\n        1863,\n        1,\n        1860,\n        956,\n        954,\n        952,\n        949,\n        946,\n        17,\n        14,\n        969,\n        967,\n        964,\n        961,\n        27,\n        957,\n        24,\n        979,\n        976,\n        972,\n        1901,\n        1900,\n        1898,\n        1896,\n        986,\n        1905,\n        1903,\n        350,\n        349,\n        1381,\n        329,\n        327,\n        324,\n        1368,\n        1366,\n        292,\n        290,\n        287,\n        284,\n        2118,\n        304,\n        1341,\n        1339,\n        1337,\n        1345,\n        243,\n        240,\n        237,\n        2086,\n        233,\n        2083,\n        254,\n        1297,\n        1295,\n        1293,\n        1290,\n        1304,\n        2114,\n        190,\n        187,\n        184,\n        2034,\n        180,\n        2031,\n        177,\n        2027,\n        199,\n        1233,\n        1231,\n        1229,\n        1226,\n        217,\n        1223,\n        1241,\n        2078,\n        2076,\n        584,\n        555,\n        554,\n        552,\n        550,\n        2282,\n        562,\n        1586,\n        507,\n        506,\n        504,\n        502,\n        2257,\n        499,\n        2254,\n        515,\n        1563,\n        1561,\n        445,\n        443,\n        441,\n        2219,\n        438,\n        2216,\n        435,\n        2212,\n        460,\n        454,\n        475,\n        1517,\n        1515,\n        1512,\n        2447,\n        798,\n        797,\n        2422,\n        2419,\n        770,\n        768,\n        766,\n        2383,\n        2380,\n        2376,\n        721,\n        719,\n        717,\n        714,\n        731,\n        1714,\n        2602,\n        2582,\n        2580,\n        2548,\n        2546,\n        2543,\n        923,\n        921,\n        2717,\n        2706,\n        2705,\n        2683,\n        2682,\n        2680,\n        1771,\n        1752,\n        1750,\n        1733,\n        1732,\n        1731,\n        1735,\n        1814,\n        1707,\n        1670,\n        1668,\n        1631,\n        1629,\n        1626,\n        1634,\n        1599,\n        1598,\n        1596,\n        1594,\n        1603,\n        1601,\n        2326,\n        1772,\n        1753,\n        1751,\n        1581,\n        1554,\n        1552,\n        1504,\n        1501,\n        1498,\n        1509,\n        1442,\n        1437,\n        1434,\n        401,\n        1448,\n        1445,\n        2206,\n        1392,\n        1391,\n        1389,\n        1387,\n        1384,\n        359,\n        1399,\n        1397,\n        1394,\n        1404,\n        2171,\n        2170,\n        1708,\n        1672,\n        1669,\n        619,\n        1632,\n        1630,\n        1628,\n        1773,\n        1378,\n        1363,\n        1361,\n        1333,\n        1328,\n        1336,\n        1286,\n        1281,\n        1278,\n        248,\n        1292,\n        1289,\n        2111,\n        1218,\n        1216,\n        1210,\n        197,\n        1206,\n        193,\n        1228,\n        1225,\n        1221,\n        1236,\n        2073,\n        2071,\n        1151,\n        1150,\n        1148,\n        1146,\n        152,\n        1143,\n        149,\n        1140,\n        145,\n        1161,\n        1159,\n        1156,\n        1153,\n        158,\n        1169,\n        1166,\n        2017,\n        2016,\n        2014,\n        2019,\n        1582,\n        510,\n        1556,\n        1553,\n        452,\n        448,\n        1506,\n        1500,\n        394,\n        391,\n        387,\n        1443,\n        1441,\n        1439,\n        1436,\n        1450,\n        2207,\n        765,\n        716,\n        713,\n        1709,\n        662,\n        660,\n        657,\n        1673,\n        1671,\n        916,\n        914,\n        879,\n        878,\n        877,\n        882,\n        1135,\n        1134,\n        1121,\n        1120,\n        1118,\n        1123,\n        1097,\n        1096,\n        1094,\n        1092,\n        103,\n        1101,\n        1099,\n        1979,\n        1059,\n        1058,\n        1056,\n        1054,\n        77,\n        1051,\n        74,\n        1066,\n        1064,\n        1061,\n        1071,\n        1964,\n        1963,\n        1007,\n        1006,\n        1004,\n        1002,\n        999,\n        41,\n        996,\n        37,\n        1017,\n        1015,\n        1012,\n        1009,\n        52,\n        1025,\n        1022,\n        1936,\n        1935,\n        1933,\n        1938,\n        942,\n        940,\n        938,\n        935,\n        932,\n        5,\n        2,\n        955,\n        953,\n        950,\n        947,\n        18,\n        943,\n        15,\n        965,\n        962,\n        958,\n        1895,\n        1894,\n        1892,\n        1890,\n        973,\n        1899,\n        1897,\n        1379,\n        325,\n        1364,\n        1362,\n        288,\n        285,\n        1334,\n        1332,\n        1330,\n        241,\n        238,\n        234,\n        1287,\n        1285,\n        1283,\n        1280,\n        1294,\n        2112,\n        188,\n        185,\n        181,\n        178,\n        2028,\n        1219,\n        1217,\n        1215,\n        1212,\n        200,\n        1209,\n        1227,\n        2074,\n        2072,\n        583,\n        553,\n        551,\n        1583,\n        505,\n        503,\n        500,\n        513,\n        1557,\n        1555,\n        444,\n        442,\n        439,\n        436,\n        2213,\n        455,\n        451,\n        1507,\n        1505,\n        1502,\n        796,\n        763,\n        762,\n        760,\n        767,\n        711,\n        710,\n        708,\n        706,\n        2377,\n        718,\n        715,\n        1710,\n        2544,\n        917,\n        915,\n        2681,\n        1627,\n        1597,\n        1595,\n        2325,\n        1769,\n        1749,\n        1747,\n        1499,\n        1438,\n        1435,\n        2204,\n        1390,\n        1388,\n        1385,\n        1395,\n        2169,\n        2167,\n        1704,\n        1665,\n        1662,\n        1625,\n        1623,\n        1620,\n        1770,\n        1329,\n        1282,\n        1279,\n        2109,\n        1214,\n        1207,\n        1222,\n        2068,\n        2065,\n        1149,\n        1147,\n        1144,\n        1141,\n        146,\n        1157,\n        1154,\n        2013,\n        2011,\n        2008,\n        2015,\n        1579,\n        1549,\n        1546,\n        1495,\n        1487,\n        1433,\n        1431,\n        1428,\n        1425,\n        388,\n        1440,\n        2205,\n        1705,\n        658,\n        1667,\n        1664,\n        1119,\n        1095,\n        1093,\n        1978,\n        1057,\n        1055,\n        1052,\n        1062,\n        1962,\n        1960,\n        1005,\n        1003,\n        1e3,\n        997,\n        38,\n        1013,\n        1010,\n        1932,\n        1930,\n        1927,\n        1934,\n        941,\n        939,\n        936,\n        933,\n        6,\n        930,\n        3,\n        951,\n        948,\n        944,\n        1889,\n        1887,\n        1884,\n        1881,\n        959,\n        1893,\n        1891,\n        35,\n        1377,\n        1360,\n        1358,\n        1327,\n        1325,\n        1322,\n        1331,\n        1277,\n        1275,\n        1272,\n        1269,\n        235,\n        1284,\n        2110,\n        1205,\n        1204,\n        1201,\n        1198,\n        182,\n        1195,\n        179,\n        1213,\n        2070,\n        2067,\n        1580,\n        501,\n        1551,\n        1548,\n        440,\n        437,\n        1497,\n        1494,\n        1490,\n        1503,\n        761,\n        709,\n        707,\n        1706,\n        913,\n        912,\n        2198,\n        1386,\n        2164,\n        2161,\n        1621,\n        1766,\n        2103,\n        1208,\n        2058,\n        2054,\n        1145,\n        1142,\n        2005,\n        2002,\n        1999,\n        2009,\n        1488,\n        1429,\n        1426,\n        2200,\n        1698,\n        1659,\n        1656,\n        1975,\n        1053,\n        1957,\n        1954,\n        1001,\n        998,\n        1924,\n        1921,\n        1918,\n        1928,\n        937,\n        934,\n        931,\n        1879,\n        1876,\n        1873,\n        1870,\n        945,\n        1885,\n        1882,\n        1323,\n        1273,\n        1270,\n        2105,\n        1202,\n        1199,\n        1196,\n        1211,\n        2061,\n        2057,\n        1576,\n        1543,\n        1540,\n        1484,\n        1481,\n        1478,\n        1491,\n        1700\n    ]), t;\n}(), cn = function() {\n    function t(t, e) {\n        this.bits = t, this.points = e;\n    }\n    return t.prototype.getBits = function() {\n        return this.bits;\n    }, t.prototype.getPoints = function() {\n        return this.points;\n    }, t;\n}(), fn = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, hn = function() {\n    function t() {}\n    return t.detectMultiple = function(e, r, n) {\n        var o = e.getBlackMatrix(), i = t.detect(n, o);\n        return i.length || ((o = o.clone()).rotate180(), i = t.detect(n, o)), new cn(o, i);\n    }, t.detect = function(e, r) {\n        for(var n, o, i = new Array, a = 0, u = 0, s = !1; a < r.getHeight();){\n            var c = t.findVertices(r, a, u);\n            if (null != c[0] || null != c[3]) {\n                if (s = !0, i.push(c), !e) break;\n                null != c[2] ? (u = Math.trunc(c[2].getX()), a = Math.trunc(c[2].getY())) : (u = Math.trunc(c[4].getX()), a = Math.trunc(c[4].getY()));\n            } else {\n                if (!s) break;\n                s = !1, u = 0;\n                try {\n                    for(var f = (n = void 0, fn(i)), h = f.next(); !h.done; h = f.next()){\n                        var l = h.value;\n                        null != l[1] && (a = Math.trunc(Math.max(a, l[1].getY()))), null != l[3] && (a = Math.max(a, Math.trunc(l[3].getY())));\n                    }\n                } catch (t) {\n                    n = {\n                        error: t\n                    };\n                } finally{\n                    try {\n                        h && !h.done && (o = f.return) && o.call(f);\n                    } finally{\n                        if (n) throw n.error;\n                    }\n                }\n                a += t.ROW_STEP;\n            }\n        }\n        return i;\n    }, t.findVertices = function(e, r, n) {\n        var o = e.getHeight(), i = e.getWidth(), a = new Array(8);\n        return t.copyToResult(a, t.findRowsWithPattern(e, o, i, r, n, t.START_PATTERN), t.INDEXES_START_PATTERN), null != a[4] && (n = Math.trunc(a[4].getX()), r = Math.trunc(a[4].getY())), t.copyToResult(a, t.findRowsWithPattern(e, o, i, r, n, t.STOP_PATTERN), t.INDEXES_STOP_PATTERN), a;\n    }, t.copyToResult = function(t, e, r) {\n        for(var n = 0; n < r.length; n++)t[r[n]] = e[n];\n    }, t.findRowsWithPattern = function(e, r, n, o, i, a) {\n        for(var u = new Array(4), s = !1, c = new Int32Array(a.length); o < r; o += t.ROW_STEP){\n            if (null != (d = t.findGuardPattern(e, i, o, n, !1, a, c))) {\n                for(; o > 0;){\n                    if (null == (l = t.findGuardPattern(e, i, --o, n, !1, a, c))) {\n                        o++;\n                        break;\n                    }\n                    d = l;\n                }\n                u[0] = new At(d[0], o), u[1] = new At(d[1], o), s = !0;\n                break;\n            }\n        }\n        var f = o + 1;\n        if (s) {\n            for(var h = 0, l = Int32Array.from([\n                Math.trunc(u[0].getX()),\n                Math.trunc(u[1].getX())\n            ]); f < r; f++){\n                var d;\n                if (null != (d = t.findGuardPattern(e, l[0], f, n, !1, a, c)) && Math.abs(l[0] - d[0]) < t.MAX_PATTERN_DRIFT && Math.abs(l[1] - d[1]) < t.MAX_PATTERN_DRIFT) l = d, h = 0;\n                else {\n                    if (h > t.SKIPPED_ROW_COUNT_MAX) break;\n                    h++;\n                }\n            }\n            f -= h + 1, u[2] = new At(l[0], f), u[3] = new At(l[1], f);\n        }\n        return f - o < t.BARCODE_MIN_HEIGHT && C.fill(u, null), u;\n    }, t.findGuardPattern = function(e, r, n, o, i, a, u) {\n        C.fillWithin(u, 0, u.length, 0);\n        for(var s = r, c = 0; e.get(s, n) && s > 0 && c++ < t.MAX_PIXEL_DRIFT;)s--;\n        for(var f = s, h = 0, l = a.length, d = i; f < o; f++){\n            if (e.get(f, n) !== d) u[h]++;\n            else {\n                if (h === l - 1) {\n                    if (t.patternMatchVariance(u, a, t.MAX_INDIVIDUAL_VARIANCE) < t.MAX_AVG_VARIANCE) return new Int32Array([\n                        s,\n                        f\n                    ]);\n                    s += u[0] + u[1], w.arraycopy(u, 2, u, 0, h - 1), u[h - 1] = 0, u[h] = 0, h--;\n                } else h++;\n                u[h] = 1, d = !d;\n            }\n        }\n        return h === l - 1 && t.patternMatchVariance(u, a, t.MAX_INDIVIDUAL_VARIANCE) < t.MAX_AVG_VARIANCE ? new Int32Array([\n            s,\n            f - 1\n        ]) : null;\n    }, t.patternMatchVariance = function(t, e, r) {\n        for(var n = t.length, o = 0, i = 0, a = 0; a < n; a++)o += t[a], i += e[a];\n        if (o < i) return 1 / 0;\n        var u = o / i;\n        r *= u;\n        for(var s = 0, c = 0; c < n; c++){\n            var f = t[c], h = e[c] * u, l = f > h ? f - h : h - f;\n            if (l > r) return 1 / 0;\n            s += l;\n        }\n        return s / o;\n    }, t.INDEXES_START_PATTERN = Int32Array.from([\n        0,\n        4,\n        1,\n        5\n    ]), t.INDEXES_STOP_PATTERN = Int32Array.from([\n        6,\n        2,\n        7,\n        3\n    ]), t.MAX_AVG_VARIANCE = .42, t.MAX_INDIVIDUAL_VARIANCE = .8, t.START_PATTERN = Int32Array.from([\n        8,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        3\n    ]), t.STOP_PATTERN = Int32Array.from([\n        7,\n        1,\n        1,\n        3,\n        1,\n        1,\n        1,\n        2,\n        1\n    ]), t.MAX_PIXEL_DRIFT = 3, t.MAX_PATTERN_DRIFT = 5, t.SKIPPED_ROW_COUNT_MAX = 25, t.ROW_STEP = 5, t.BARCODE_MIN_HEIGHT = 10, t;\n}(), ln = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, dn = function() {\n    function t(t, e) {\n        if (0 === e.length) throw new l;\n        this.field = t;\n        var r = e.length;\n        if (r > 1 && 0 === e[0]) {\n            for(var n = 1; n < r && 0 === e[n];)n++;\n            n === r ? this.coefficients = new Int32Array([\n                0\n            ]) : (this.coefficients = new Int32Array(r - n), w.arraycopy(e, n, this.coefficients, 0, this.coefficients.length));\n        } else this.coefficients = e;\n    }\n    return t.prototype.getCoefficients = function() {\n        return this.coefficients;\n    }, t.prototype.getDegree = function() {\n        return this.coefficients.length - 1;\n    }, t.prototype.isZero = function() {\n        return 0 === this.coefficients[0];\n    }, t.prototype.getCoefficient = function(t) {\n        return this.coefficients[this.coefficients.length - 1 - t];\n    }, t.prototype.evaluateAt = function(t) {\n        var e, r;\n        if (0 === t) return this.getCoefficient(0);\n        if (1 === t) {\n            var n = 0;\n            try {\n                for(var o = ln(this.coefficients), i = o.next(); !i.done; i = o.next()){\n                    var a = i.value;\n                    n = this.field.add(n, a);\n                }\n            } catch (t) {\n                e = {\n                    error: t\n                };\n            } finally{\n                try {\n                    i && !i.done && (r = o.return) && r.call(o);\n                } finally{\n                    if (e) throw e.error;\n                }\n            }\n            return n;\n        }\n        for(var u = this.coefficients[0], s = this.coefficients.length, c = 1; c < s; c++)u = this.field.add(this.field.multiply(t, u), this.coefficients[c]);\n        return u;\n    }, t.prototype.add = function(e) {\n        if (!this.field.equals(e.field)) throw new l(\"ModulusPolys do not have same ModulusGF field\");\n        if (this.isZero()) return e;\n        if (e.isZero()) return this;\n        var r = this.coefficients, n = e.coefficients;\n        if (r.length > n.length) {\n            var o = r;\n            r = n, n = o;\n        }\n        var i = new Int32Array(n.length), a = n.length - r.length;\n        w.arraycopy(n, 0, i, 0, a);\n        for(var u = a; u < n.length; u++)i[u] = this.field.add(r[u - a], n[u]);\n        return new t(this.field, i);\n    }, t.prototype.subtract = function(t) {\n        if (!this.field.equals(t.field)) throw new l(\"ModulusPolys do not have same ModulusGF field\");\n        return t.isZero() ? this : this.add(t.negative());\n    }, t.prototype.multiply = function(e) {\n        return e instanceof t ? this.multiplyOther(e) : this.multiplyScalar(e);\n    }, t.prototype.multiplyOther = function(e) {\n        if (!this.field.equals(e.field)) throw new l(\"ModulusPolys do not have same ModulusGF field\");\n        if (this.isZero() || e.isZero()) return new t(this.field, new Int32Array([\n            0\n        ]));\n        for(var r = this.coefficients, n = r.length, o = e.coefficients, i = o.length, a = new Int32Array(n + i - 1), u = 0; u < n; u++)for(var s = r[u], c = 0; c < i; c++)a[u + c] = this.field.add(a[u + c], this.field.multiply(s, o[c]));\n        return new t(this.field, a);\n    }, t.prototype.negative = function() {\n        for(var e = this.coefficients.length, r = new Int32Array(e), n = 0; n < e; n++)r[n] = this.field.subtract(0, this.coefficients[n]);\n        return new t(this.field, r);\n    }, t.prototype.multiplyScalar = function(e) {\n        if (0 === e) return new t(this.field, new Int32Array([\n            0\n        ]));\n        if (1 === e) return this;\n        for(var r = this.coefficients.length, n = new Int32Array(r), o = 0; o < r; o++)n[o] = this.field.multiply(this.coefficients[o], e);\n        return new t(this.field, n);\n    }, t.prototype.multiplyByMonomial = function(e, r) {\n        if (e < 0) throw new l;\n        if (0 === r) return new t(this.field, new Int32Array([\n            0\n        ]));\n        for(var n = this.coefficients.length, o = new Int32Array(n + e), i = 0; i < n; i++)o[i] = this.field.multiply(this.coefficients[i], r);\n        return new t(this.field, o);\n    }, t.prototype.toString = function() {\n        for(var t = new k, e = this.getDegree(); e >= 0; e--){\n            var r = this.getCoefficient(e);\n            0 !== r && (r < 0 ? (t.append(\" - \"), r = -r) : t.length() > 0 && t.append(\" + \"), 0 !== e && 1 === r || t.append(r), 0 !== e && (1 === e ? t.append(\"x\") : (t.append(\"x^\"), t.append(e))));\n        }\n        return t.toString();\n    }, t;\n}(), pn = function() {\n    function t() {}\n    return t.prototype.add = function(t, e) {\n        return (t + e) % this.modulus;\n    }, t.prototype.subtract = function(t, e) {\n        return (this.modulus + t - e) % this.modulus;\n    }, t.prototype.exp = function(t) {\n        return this.expTable[t];\n    }, t.prototype.log = function(t) {\n        if (0 === t) throw new l;\n        return this.logTable[t];\n    }, t.prototype.inverse = function(t) {\n        if (0 === t) throw new ft;\n        return this.expTable[this.modulus - this.logTable[t] - 1];\n    }, t.prototype.multiply = function(t, e) {\n        return 0 === t || 0 === e ? 0 : this.expTable[(this.logTable[t] + this.logTable[e]) % (this.modulus - 1)];\n    }, t.prototype.getSize = function() {\n        return this.modulus;\n    }, t.prototype.equals = function(t) {\n        return t === this;\n    }, t;\n}(), gn = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), yn = function(t) {\n    function e(e, r) {\n        var n = t.call(this) || this;\n        n.modulus = e, n.expTable = new Int32Array(e), n.logTable = new Int32Array(e);\n        for(var o = 1, i = 0; i < e; i++)n.expTable[i] = o, o = o * r % e;\n        for(i = 0; i < e - 1; i++)n.logTable[n.expTable[i]] = i;\n        return n.zero = new dn(n, new Int32Array([\n            0\n        ])), n.one = new dn(n, new Int32Array([\n            1\n        ])), n;\n    }\n    return gn(e, t), e.prototype.getZero = function() {\n        return this.zero;\n    }, e.prototype.getOne = function() {\n        return this.one;\n    }, e.prototype.buildMonomial = function(t, e) {\n        if (t < 0) throw new l;\n        if (0 === e) return this.zero;\n        var r = new Int32Array(t + 1);\n        return r[0] = e, new dn(this, r);\n    }, e.PDF417_GF = new e(sn.NUMBER_OF_CODEWORDS, 3), e;\n}(pn), wn = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, _n = function() {\n    function t() {\n        this.field = yn.PDF417_GF;\n    }\n    return t.prototype.decode = function(t, e, r) {\n        for(var n, o, i = new dn(this.field, t), a = new Int32Array(e), u = !1, s = e; s > 0; s--){\n            var c = i.evaluateAt(this.field.exp(s));\n            a[e - s] = c, 0 !== c && (u = !0);\n        }\n        if (!u) return 0;\n        var f = this.field.getOne();\n        if (null != r) try {\n            for(var h = wn(r), l = h.next(); !l.done; l = h.next()){\n                var d = l.value, p = this.field.exp(t.length - 1 - d), y = new dn(this.field, new Int32Array([\n                    this.field.subtract(0, p),\n                    1\n                ]));\n                f = f.multiply(y);\n            }\n        } catch (t) {\n            n = {\n                error: t\n            };\n        } finally{\n            try {\n                l && !l.done && (o = h.return) && o.call(h);\n            } finally{\n                if (n) throw n.error;\n            }\n        }\n        var w = new dn(this.field, a), _ = this.runEuclideanAlgorithm(this.field.buildMonomial(e, 1), w, e), v = _[0], m = _[1], A = this.findErrorLocations(v), E = this.findErrorMagnitudes(m, v, A);\n        for(s = 0; s < A.length; s++){\n            var C = t.length - 1 - this.field.log(A[s]);\n            if (C < 0) throw g.getChecksumInstance();\n            t[C] = this.field.subtract(t[C], E[s]);\n        }\n        return A.length;\n    }, t.prototype.runEuclideanAlgorithm = function(t, e, r) {\n        if (t.getDegree() < e.getDegree()) {\n            var n = t;\n            t = e, e = n;\n        }\n        for(var o = t, i = e, a = this.field.getZero(), u = this.field.getOne(); i.getDegree() >= Math.round(r / 2);){\n            var s = o, c = a;\n            if (a = u, (o = i).isZero()) throw g.getChecksumInstance();\n            i = s;\n            for(var f = this.field.getZero(), h = o.getCoefficient(o.getDegree()), l = this.field.inverse(h); i.getDegree() >= o.getDegree() && !i.isZero();){\n                var d = i.getDegree() - o.getDegree(), p = this.field.multiply(i.getCoefficient(i.getDegree()), l);\n                f = f.add(this.field.buildMonomial(d, p)), i = i.subtract(o.multiplyByMonomial(d, p));\n            }\n            u = f.multiply(a).subtract(c).negative();\n        }\n        var y = u.getCoefficient(0);\n        if (0 === y) throw g.getChecksumInstance();\n        var w = this.field.inverse(y);\n        return [\n            u.multiply(w),\n            i.multiply(w)\n        ];\n    }, t.prototype.findErrorLocations = function(t) {\n        for(var e = t.getDegree(), r = new Int32Array(e), n = 0, o = 1; o < this.field.getSize() && n < e; o++)0 === t.evaluateAt(o) && (r[n] = this.field.inverse(o), n++);\n        if (n !== e) throw g.getChecksumInstance();\n        return r;\n    }, t.prototype.findErrorMagnitudes = function(t, e, r) {\n        for(var n = e.getDegree(), o = new Int32Array(n), i = 1; i <= n; i++)o[n - i] = this.field.multiply(i, e.getCoefficient(i));\n        var a = new dn(this.field, o), u = r.length, s = new Int32Array(u);\n        for(i = 0; i < u; i++){\n            var c = this.field.inverse(r[i]), f = this.field.subtract(0, t.evaluateAt(c)), h = this.field.inverse(a.evaluateAt(c));\n            s[i] = this.field.multiply(f, h);\n        }\n        return s;\n    }, t;\n}(), vn = function() {\n    function t(e, r, n, o, i) {\n        e instanceof t ? this.constructor_2(e) : this.constructor_1(e, r, n, o, i);\n    }\n    return t.prototype.constructor_1 = function(t, e, r, n, o) {\n        var i = null == e || null == r, a = null == n || null == o;\n        if (i && a) throw new U;\n        i ? (e = new At(0, n.getY()), r = new At(0, o.getY())) : a && (n = new At(t.getWidth() - 1, e.getY()), o = new At(t.getWidth() - 1, r.getY())), this.image = t, this.topLeft = e, this.bottomLeft = r, this.topRight = n, this.bottomRight = o, this.minX = Math.trunc(Math.min(e.getX(), r.getX())), this.maxX = Math.trunc(Math.max(n.getX(), o.getX())), this.minY = Math.trunc(Math.min(e.getY(), n.getY())), this.maxY = Math.trunc(Math.max(r.getY(), o.getY()));\n    }, t.prototype.constructor_2 = function(t) {\n        this.image = t.image, this.topLeft = t.getTopLeft(), this.bottomLeft = t.getBottomLeft(), this.topRight = t.getTopRight(), this.bottomRight = t.getBottomRight(), this.minX = t.getMinX(), this.maxX = t.getMaxX(), this.minY = t.getMinY(), this.maxY = t.getMaxY();\n    }, t.merge = function(e, r) {\n        return null == e ? r : null == r ? e : new t(e.image, e.topLeft, e.bottomLeft, r.topRight, r.bottomRight);\n    }, t.prototype.addMissingRows = function(e, r, n) {\n        var o = this.topLeft, i = this.bottomLeft, a = this.topRight, u = this.bottomRight;\n        if (e > 0) {\n            var s = n ? this.topLeft : this.topRight, c = Math.trunc(s.getY() - e);\n            c < 0 && (c = 0);\n            var f = new At(s.getX(), c);\n            n ? o = f : a = f;\n        }\n        if (r > 0) {\n            var h = n ? this.bottomLeft : this.bottomRight, l = Math.trunc(h.getY() + r);\n            l >= this.image.getHeight() && (l = this.image.getHeight() - 1);\n            var d = new At(h.getX(), l);\n            n ? i = d : u = d;\n        }\n        return new t(this.image, o, i, a, u);\n    }, t.prototype.getMinX = function() {\n        return this.minX;\n    }, t.prototype.getMaxX = function() {\n        return this.maxX;\n    }, t.prototype.getMinY = function() {\n        return this.minY;\n    }, t.prototype.getMaxY = function() {\n        return this.maxY;\n    }, t.prototype.getTopLeft = function() {\n        return this.topLeft;\n    }, t.prototype.getTopRight = function() {\n        return this.topRight;\n    }, t.prototype.getBottomLeft = function() {\n        return this.bottomLeft;\n    }, t.prototype.getBottomRight = function() {\n        return this.bottomRight;\n    }, t;\n}(), mn = function() {\n    function t(t, e, r, n) {\n        this.columnCount = t, this.errorCorrectionLevel = n, this.rowCountUpperPart = e, this.rowCountLowerPart = r, this.rowCount = e + r;\n    }\n    return t.prototype.getColumnCount = function() {\n        return this.columnCount;\n    }, t.prototype.getErrorCorrectionLevel = function() {\n        return this.errorCorrectionLevel;\n    }, t.prototype.getRowCount = function() {\n        return this.rowCount;\n    }, t.prototype.getRowCountUpperPart = function() {\n        return this.rowCountUpperPart;\n    }, t.prototype.getRowCountLowerPart = function() {\n        return this.rowCountLowerPart;\n    }, t;\n}(), An = function() {\n    function t() {\n        this.buffer = \"\";\n    }\n    return t.form = function(t, e) {\n        var r = -1;\n        return t.replace(/%(-)?(0?[0-9]+)?([.][0-9]+)?([#][0-9]+)?([scfpexd%])/g, function(t, n, o, i, a, u) {\n            if (\"%%\" === t) return \"%\";\n            if (void 0 !== e[++r]) {\n                t = i ? parseInt(i.substr(1)) : void 0;\n                var s, c = a ? parseInt(a.substr(1)) : void 0;\n                switch(u){\n                    case \"s\":\n                        s = e[r];\n                        break;\n                    case \"c\":\n                        s = e[r][0];\n                        break;\n                    case \"f\":\n                        s = parseFloat(e[r]).toFixed(t);\n                        break;\n                    case \"p\":\n                        s = parseFloat(e[r]).toPrecision(t);\n                        break;\n                    case \"e\":\n                        s = parseFloat(e[r]).toExponential(t);\n                        break;\n                    case \"x\":\n                        s = parseInt(e[r]).toString(c || 16);\n                        break;\n                    case \"d\":\n                        s = parseFloat(parseInt(e[r], c || 10).toPrecision(t)).toFixed(0);\n                }\n                s = \"object\" == typeof s ? JSON.stringify(s) : (+s).toString(c);\n                for(var f = parseInt(o), h = o && o[0] + \"\" == \"0\" ? \"0\" : \" \"; s.length < f;)s = void 0 !== n ? s + h : h + s;\n                return s;\n            }\n        });\n    }, t.prototype.format = function(e) {\n        for(var r = [], n = 1; n < arguments.length; n++)r[n - 1] = arguments[n];\n        this.buffer += t.form(e, r);\n    }, t.prototype.toString = function() {\n        return this.buffer;\n    }, t;\n}(), En = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, Cn = function() {\n    function t(t) {\n        this.boundingBox = new vn(t), this.codewords = new Array(t.getMaxY() - t.getMinY() + 1);\n    }\n    return t.prototype.getCodewordNearby = function(e) {\n        var r = this.getCodeword(e);\n        if (null != r) return r;\n        for(var n = 1; n < t.MAX_NEARBY_DISTANCE; n++){\n            var o = this.imageRowToCodewordIndex(e) - n;\n            if (o >= 0 && null != (r = this.codewords[o])) return r;\n            if ((o = this.imageRowToCodewordIndex(e) + n) < this.codewords.length && null != (r = this.codewords[o])) return r;\n        }\n        return null;\n    }, t.prototype.imageRowToCodewordIndex = function(t) {\n        return t - this.boundingBox.getMinY();\n    }, t.prototype.setCodeword = function(t, e) {\n        this.codewords[this.imageRowToCodewordIndex(t)] = e;\n    }, t.prototype.getCodeword = function(t) {\n        return this.codewords[this.imageRowToCodewordIndex(t)];\n    }, t.prototype.getBoundingBox = function() {\n        return this.boundingBox;\n    }, t.prototype.getCodewords = function() {\n        return this.codewords;\n    }, t.prototype.toString = function() {\n        var t, e, r = new An, n = 0;\n        try {\n            for(var o = En(this.codewords), i = o.next(); !i.done; i = o.next()){\n                var a = i.value;\n                null != a ? r.format(\"%3d: %3d|%3d%n\", n++, a.getRowNumber(), a.getValue()) : r.format(\"%3d:    |   %n\", n++);\n            }\n        } catch (e) {\n            t = {\n                error: e\n            };\n        } finally{\n            try {\n                i && !i.done && (e = o.return) && e.call(o);\n            } finally{\n                if (t) throw t.error;\n            }\n        }\n        return r.toString();\n    }, t.MAX_NEARBY_DISTANCE = 5, t;\n}(), In = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, Sn = function(t, e) {\n    var r = \"function\" == typeof Symbol && t[Symbol.iterator];\n    if (!r) return t;\n    var n, o, i = r.call(t), a = [];\n    try {\n        for(; (void 0 === e || e-- > 0) && !(n = i.next()).done;)a.push(n.value);\n    } catch (t) {\n        o = {\n            error: t\n        };\n    } finally{\n        try {\n            n && !n.done && (r = i.return) && r.call(i);\n        } finally{\n            if (o) throw o.error;\n        }\n    }\n    return a;\n}, On = function() {\n    function t() {\n        this.values = new Map;\n    }\n    return t.prototype.setValue = function(t) {\n        t = Math.trunc(t);\n        var e = this.values.get(t);\n        null == e && (e = 0), e++, this.values.set(t, e);\n    }, t.prototype.getValue = function() {\n        var t, e, r = -1, n = new Array, o = function(t, e) {\n            var o = function() {\n                return t;\n            }, i = function() {\n                return e;\n            };\n            i() > r ? (r = i(), (n = []).push(o())) : i() === r && n.push(o());\n        };\n        try {\n            for(var i = In(this.values.entries()), a = i.next(); !a.done; a = i.next()){\n                var u = Sn(a.value, 2);\n                o(u[0], u[1]);\n            }\n        } catch (e) {\n            t = {\n                error: e\n            };\n        } finally{\n            try {\n                a && !a.done && (e = i.return) && e.call(i);\n            } finally{\n                if (t) throw t.error;\n            }\n        }\n        return sn.toIntArray(n);\n    }, t.prototype.getConfidence = function(t) {\n        return this.values.get(t);\n    }, t;\n}(), Tn = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), bn = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, Rn = function(t) {\n    function e(e, r) {\n        var n = t.call(this, e) || this;\n        return n._isLeft = r, n;\n    }\n    return Tn(e, t), e.prototype.setRowNumbers = function() {\n        var t, e;\n        try {\n            for(var r = bn(this.getCodewords()), n = r.next(); !n.done; n = r.next()){\n                var o = n.value;\n                null != o && o.setRowNumberAsRowIndicatorColumn();\n            }\n        } catch (e) {\n            t = {\n                error: e\n            };\n        } finally{\n            try {\n                n && !n.done && (e = r.return) && e.call(r);\n            } finally{\n                if (t) throw t.error;\n            }\n        }\n    }, e.prototype.adjustCompleteIndicatorColumnRowNumbers = function(t) {\n        var e = this.getCodewords();\n        this.setRowNumbers(), this.removeIncorrectCodewords(e, t);\n        for(var r = this.getBoundingBox(), n = this._isLeft ? r.getTopLeft() : r.getTopRight(), o = this._isLeft ? r.getBottomLeft() : r.getBottomRight(), i = this.imageRowToCodewordIndex(Math.trunc(n.getY())), a = this.imageRowToCodewordIndex(Math.trunc(o.getY())), u = -1, s = 1, c = 0, f = i; f < a; f++)if (null != e[f]) {\n            var h = e[f], l = h.getRowNumber() - u;\n            if (0 === l) c++;\n            else if (1 === l) s = Math.max(s, c), c = 1, u = h.getRowNumber();\n            else if (l < 0 || h.getRowNumber() >= t.getRowCount() || l > f) e[f] = null;\n            else {\n                for(var d = void 0, p = (d = s > 2 ? (s - 2) * l : l) >= f, g = 1; g <= d && !p; g++)p = null != e[f - g];\n                p ? e[f] = null : (u = h.getRowNumber(), c = 1);\n            }\n        }\n    }, e.prototype.getRowHeights = function() {\n        var t, e, r = this.getBarcodeMetadata();\n        if (null == r) return null;\n        this.adjustIncompleteIndicatorColumnRowNumbers(r);\n        var n = new Int32Array(r.getRowCount());\n        try {\n            for(var o = bn(this.getCodewords()), i = o.next(); !i.done; i = o.next()){\n                var a = i.value;\n                if (null != a) {\n                    var u = a.getRowNumber();\n                    if (u >= n.length) continue;\n                    n[u]++;\n                }\n            }\n        } catch (e) {\n            t = {\n                error: e\n            };\n        } finally{\n            try {\n                i && !i.done && (e = o.return) && e.call(o);\n            } finally{\n                if (t) throw t.error;\n            }\n        }\n        return n;\n    }, e.prototype.adjustIncompleteIndicatorColumnRowNumbers = function(t) {\n        for(var e = this.getBoundingBox(), r = this._isLeft ? e.getTopLeft() : e.getTopRight(), n = this._isLeft ? e.getBottomLeft() : e.getBottomRight(), o = this.imageRowToCodewordIndex(Math.trunc(r.getY())), i = this.imageRowToCodewordIndex(Math.trunc(n.getY())), a = this.getCodewords(), u = -1, s = o; s < i; s++)if (null != a[s]) {\n            var c = a[s];\n            c.setRowNumberAsRowIndicatorColumn();\n            var f = c.getRowNumber() - u;\n            0 === f || (1 === f ? u = c.getRowNumber() : c.getRowNumber() >= t.getRowCount() ? a[s] = null : u = c.getRowNumber());\n        }\n    }, e.prototype.getBarcodeMetadata = function() {\n        var t, e, r = this.getCodewords(), n = new On, o = new On, i = new On, a = new On;\n        try {\n            for(var u = bn(r), s = u.next(); !s.done; s = u.next()){\n                var c = s.value;\n                if (null != c) {\n                    c.setRowNumberAsRowIndicatorColumn();\n                    var f = c.getValue() % 30, h = c.getRowNumber();\n                    switch(this._isLeft || (h += 2), h % 3){\n                        case 0:\n                            o.setValue(3 * f + 1);\n                            break;\n                        case 1:\n                            a.setValue(f / 3), i.setValue(f % 3);\n                            break;\n                        case 2:\n                            n.setValue(f + 1);\n                    }\n                }\n            }\n        } catch (e) {\n            t = {\n                error: e\n            };\n        } finally{\n            try {\n                s && !s.done && (e = u.return) && e.call(u);\n            } finally{\n                if (t) throw t.error;\n            }\n        }\n        if (0 === n.getValue().length || 0 === o.getValue().length || 0 === i.getValue().length || 0 === a.getValue().length || n.getValue()[0] < 1 || o.getValue()[0] + i.getValue()[0] < sn.MIN_ROWS_IN_BARCODE || o.getValue()[0] + i.getValue()[0] > sn.MAX_ROWS_IN_BARCODE) return null;\n        var l = new mn(n.getValue()[0], o.getValue()[0], i.getValue()[0], a.getValue()[0]);\n        return this.removeIncorrectCodewords(r, l), l;\n    }, e.prototype.removeIncorrectCodewords = function(t, e) {\n        for(var r = 0; r < t.length; r++){\n            var n = t[r];\n            if (null != t[r]) {\n                var o = n.getValue() % 30, i = n.getRowNumber();\n                if (i > e.getRowCount()) t[r] = null;\n                else switch(this._isLeft || (i += 2), i % 3){\n                    case 0:\n                        3 * o + 1 !== e.getRowCountUpperPart() && (t[r] = null);\n                        break;\n                    case 1:\n                        Math.trunc(o / 3) === e.getErrorCorrectionLevel() && o % 3 === e.getRowCountLowerPart() || (t[r] = null);\n                        break;\n                    case 2:\n                        o + 1 !== e.getColumnCount() && (t[r] = null);\n                }\n            }\n        }\n    }, e.prototype.isLeft = function() {\n        return this._isLeft;\n    }, e.prototype.toString = function() {\n        return \"IsLeft: \" + this._isLeft + \"\\n\" + t.prototype.toString.call(this);\n    }, e;\n}(Cn), Nn = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, Dn = function() {\n    function t(t, e) {\n        this.ADJUST_ROW_NUMBER_SKIP = 2, this.barcodeMetadata = t, this.barcodeColumnCount = t.getColumnCount(), this.boundingBox = e, this.detectionResultColumns = new Array(this.barcodeColumnCount + 2);\n    }\n    return t.prototype.getDetectionResultColumns = function() {\n        this.adjustIndicatorColumnRowNumbers(this.detectionResultColumns[0]), this.adjustIndicatorColumnRowNumbers(this.detectionResultColumns[this.barcodeColumnCount + 1]);\n        var t, e = sn.MAX_CODEWORDS_IN_BARCODE;\n        do {\n            t = e, e = this.adjustRowNumbersAndGetCount();\n        }while (e > 0 && e < t);\n        return this.detectionResultColumns;\n    }, t.prototype.adjustIndicatorColumnRowNumbers = function(t) {\n        null != t && t.adjustCompleteIndicatorColumnRowNumbers(this.barcodeMetadata);\n    }, t.prototype.adjustRowNumbersAndGetCount = function() {\n        var t = this.adjustRowNumbersByRow();\n        if (0 === t) return 0;\n        for(var e = 1; e < this.barcodeColumnCount + 1; e++)for(var r = this.detectionResultColumns[e].getCodewords(), n = 0; n < r.length; n++)null != r[n] && (r[n].hasValidRowNumber() || this.adjustRowNumbers(e, n, r));\n        return t;\n    }, t.prototype.adjustRowNumbersByRow = function() {\n        return this.adjustRowNumbersFromBothRI(), this.adjustRowNumbersFromLRI() + this.adjustRowNumbersFromRRI();\n    }, t.prototype.adjustRowNumbersFromBothRI = function() {\n        if (null != this.detectionResultColumns[0] && null != this.detectionResultColumns[this.barcodeColumnCount + 1]) {\n            for(var t = this.detectionResultColumns[0].getCodewords(), e = this.detectionResultColumns[this.barcodeColumnCount + 1].getCodewords(), r = 0; r < t.length; r++)if (null != t[r] && null != e[r] && t[r].getRowNumber() === e[r].getRowNumber()) for(var n = 1; n <= this.barcodeColumnCount; n++){\n                var o = this.detectionResultColumns[n].getCodewords()[r];\n                null != o && (o.setRowNumber(t[r].getRowNumber()), o.hasValidRowNumber() || (this.detectionResultColumns[n].getCodewords()[r] = null));\n            }\n        }\n    }, t.prototype.adjustRowNumbersFromRRI = function() {\n        if (null == this.detectionResultColumns[this.barcodeColumnCount + 1]) return 0;\n        for(var e = 0, r = this.detectionResultColumns[this.barcodeColumnCount + 1].getCodewords(), n = 0; n < r.length; n++)if (null != r[n]) for(var o = r[n].getRowNumber(), i = 0, a = this.barcodeColumnCount + 1; a > 0 && i < this.ADJUST_ROW_NUMBER_SKIP; a--){\n            var u = this.detectionResultColumns[a].getCodewords()[n];\n            null != u && (i = t.adjustRowNumberIfValid(o, i, u), u.hasValidRowNumber() || e++);\n        }\n        return e;\n    }, t.prototype.adjustRowNumbersFromLRI = function() {\n        if (null == this.detectionResultColumns[0]) return 0;\n        for(var e = 0, r = this.detectionResultColumns[0].getCodewords(), n = 0; n < r.length; n++)if (null != r[n]) for(var o = r[n].getRowNumber(), i = 0, a = 1; a < this.barcodeColumnCount + 1 && i < this.ADJUST_ROW_NUMBER_SKIP; a++){\n            var u = this.detectionResultColumns[a].getCodewords()[n];\n            null != u && (i = t.adjustRowNumberIfValid(o, i, u), u.hasValidRowNumber() || e++);\n        }\n        return e;\n    }, t.adjustRowNumberIfValid = function(t, e, r) {\n        return null == r || r.hasValidRowNumber() || (r.isValidRowNumber(t) ? (r.setRowNumber(t), e = 0) : ++e), e;\n    }, t.prototype.adjustRowNumbers = function(e, r, n) {\n        var o, i, a = n[r], u = this.detectionResultColumns[e - 1].getCodewords(), s = u;\n        null != this.detectionResultColumns[e + 1] && (s = this.detectionResultColumns[e + 1].getCodewords());\n        var c = new Array(14);\n        c[2] = u[r], c[3] = s[r], r > 0 && (c[0] = n[r - 1], c[4] = u[r - 1], c[5] = s[r - 1]), r > 1 && (c[8] = n[r - 2], c[10] = u[r - 2], c[11] = s[r - 2]), r < n.length - 1 && (c[1] = n[r + 1], c[6] = u[r + 1], c[7] = s[r + 1]), r < n.length - 2 && (c[9] = n[r + 2], c[12] = u[r + 2], c[13] = s[r + 2]);\n        try {\n            for(var f = Nn(c), h = f.next(); !h.done; h = f.next()){\n                var l = h.value;\n                if (t.adjustRowNumber(a, l)) return;\n            }\n        } catch (t) {\n            o = {\n                error: t\n            };\n        } finally{\n            try {\n                h && !h.done && (i = f.return) && i.call(f);\n            } finally{\n                if (o) throw o.error;\n            }\n        }\n    }, t.adjustRowNumber = function(t, e) {\n        return null != e && !(!e.hasValidRowNumber() || e.getBucket() !== t.getBucket()) && (t.setRowNumber(e.getRowNumber()), !0);\n    }, t.prototype.getBarcodeColumnCount = function() {\n        return this.barcodeColumnCount;\n    }, t.prototype.getBarcodeRowCount = function() {\n        return this.barcodeMetadata.getRowCount();\n    }, t.prototype.getBarcodeECLevel = function() {\n        return this.barcodeMetadata.getErrorCorrectionLevel();\n    }, t.prototype.setBoundingBox = function(t) {\n        this.boundingBox = t;\n    }, t.prototype.getBoundingBox = function() {\n        return this.boundingBox;\n    }, t.prototype.setDetectionResultColumn = function(t, e) {\n        this.detectionResultColumns[t] = e;\n    }, t.prototype.getDetectionResultColumn = function(t) {\n        return this.detectionResultColumns[t];\n    }, t.prototype.toString = function() {\n        var t = this.detectionResultColumns[0];\n        null == t && (t = this.detectionResultColumns[this.barcodeColumnCount + 1]);\n        for(var e = new An, r = 0; r < t.getCodewords().length; r++){\n            e.format(\"CW %3d:\", r);\n            for(var n = 0; n < this.barcodeColumnCount + 2; n++)if (null != this.detectionResultColumns[n]) {\n                var o = this.detectionResultColumns[n].getCodewords()[r];\n                null != o ? e.format(\" %3d|%3d\", o.getRowNumber(), o.getValue()) : e.format(\"    |   \");\n            } else e.format(\"    |   \");\n            e.format(\"%n\");\n        }\n        return e.toString();\n    }, t;\n}(), Pn = function() {\n    function t(e, r, n, o) {\n        this.rowNumber = t.BARCODE_ROW_UNKNOWN, this.startX = Math.trunc(e), this.endX = Math.trunc(r), this.bucket = Math.trunc(n), this.value = Math.trunc(o);\n    }\n    return t.prototype.hasValidRowNumber = function() {\n        return this.isValidRowNumber(this.rowNumber);\n    }, t.prototype.isValidRowNumber = function(e) {\n        return e !== t.BARCODE_ROW_UNKNOWN && this.bucket === e % 3 * 3;\n    }, t.prototype.setRowNumberAsRowIndicatorColumn = function() {\n        this.rowNumber = Math.trunc(3 * Math.trunc(this.value / 30) + Math.trunc(this.bucket / 3));\n    }, t.prototype.getWidth = function() {\n        return this.endX - this.startX;\n    }, t.prototype.getStartX = function() {\n        return this.startX;\n    }, t.prototype.getEndX = function() {\n        return this.endX;\n    }, t.prototype.getBucket = function() {\n        return this.bucket;\n    }, t.prototype.getValue = function() {\n        return this.value;\n    }, t.prototype.getRowNumber = function() {\n        return this.rowNumber;\n    }, t.prototype.setRowNumber = function(t) {\n        this.rowNumber = t;\n    }, t.prototype.toString = function() {\n        return this.rowNumber + \"|\" + this.value;\n    }, t.BARCODE_ROW_UNKNOWN = -1, t;\n}(), Mn = function() {\n    function t() {}\n    return t.initialize = function() {\n        for(var e = 0; e < sn.SYMBOL_TABLE.length; e++)for(var r = sn.SYMBOL_TABLE[e], n = 1 & r, o = 0; o < sn.BARS_IN_MODULE; o++){\n            for(var i = 0; (1 & r) === n;)i += 1, r >>= 1;\n            n = 1 & r, t.RATIOS_TABLE[e] || (t.RATIOS_TABLE[e] = new Array(sn.BARS_IN_MODULE)), t.RATIOS_TABLE[e][sn.BARS_IN_MODULE - o - 1] = Math.fround(i / sn.MODULES_IN_CODEWORD);\n        }\n        this.bSymbolTableReady = !0;\n    }, t.getDecodedValue = function(e) {\n        var r = t.getDecodedCodewordValue(t.sampleBitCounts(e));\n        return -1 !== r ? r : t.getClosestDecodedValue(e);\n    }, t.sampleBitCounts = function(t) {\n        for(var e = vt.sum(t), r = new Int32Array(sn.BARS_IN_MODULE), n = 0, o = 0, i = 0; i < sn.MODULES_IN_CODEWORD; i++){\n            var a = e / (2 * sn.MODULES_IN_CODEWORD) + i * e / sn.MODULES_IN_CODEWORD;\n            o + t[n] <= a && (o += t[n], n++), r[n]++;\n        }\n        return r;\n    }, t.getDecodedCodewordValue = function(e) {\n        var r = t.getBitValue(e);\n        return -1 === sn.getCodeword(r) ? -1 : r;\n    }, t.getBitValue = function(t) {\n        for(var e = 0, r = 0; r < t.length; r++)for(var n = 0; n < t[r]; n++)e = e << 1 | (r % 2 == 0 ? 1 : 0);\n        return Math.trunc(e);\n    }, t.getClosestDecodedValue = function(e) {\n        var r = vt.sum(e), n = new Array(sn.BARS_IN_MODULE);\n        if (r > 1) for(var o = 0; o < n.length; o++)n[o] = Math.fround(e[o] / r);\n        var i = mt.MAX_VALUE, a = -1;\n        this.bSymbolTableReady || t.initialize();\n        for(var u = 0; u < t.RATIOS_TABLE.length; u++){\n            for(var s = 0, c = t.RATIOS_TABLE[u], f = 0; f < sn.BARS_IN_MODULE; f++){\n                var h = Math.fround(c[f] - n[f]);\n                if ((s += Math.fround(h * h)) >= i) break;\n            }\n            s < i && (i = s, a = sn.SYMBOL_TABLE[u]);\n        }\n        return a;\n    }, t.bSymbolTableReady = !1, t.RATIOS_TABLE = new Array(sn.SYMBOL_TABLE.length).map(function(t) {\n        return new Array(sn.BARS_IN_MODULE);\n    }), t;\n}(), Bn = function() {\n    function t() {\n        this.segmentCount = -1, this.fileSize = -1, this.timestamp = -1, this.checksum = -1;\n    }\n    return t.prototype.getSegmentIndex = function() {\n        return this.segmentIndex;\n    }, t.prototype.setSegmentIndex = function(t) {\n        this.segmentIndex = t;\n    }, t.prototype.getFileId = function() {\n        return this.fileId;\n    }, t.prototype.setFileId = function(t) {\n        this.fileId = t;\n    }, t.prototype.getOptionalData = function() {\n        return this.optionalData;\n    }, t.prototype.setOptionalData = function(t) {\n        this.optionalData = t;\n    }, t.prototype.isLastSegment = function() {\n        return this.lastSegment;\n    }, t.prototype.setLastSegment = function(t) {\n        this.lastSegment = t;\n    }, t.prototype.getSegmentCount = function() {\n        return this.segmentCount;\n    }, t.prototype.setSegmentCount = function(t) {\n        this.segmentCount = t;\n    }, t.prototype.getSender = function() {\n        return this.sender || null;\n    }, t.prototype.setSender = function(t) {\n        this.sender = t;\n    }, t.prototype.getAddressee = function() {\n        return this.addressee || null;\n    }, t.prototype.setAddressee = function(t) {\n        this.addressee = t;\n    }, t.prototype.getFileName = function() {\n        return this.fileName;\n    }, t.prototype.setFileName = function(t) {\n        this.fileName = t;\n    }, t.prototype.getFileSize = function() {\n        return this.fileSize;\n    }, t.prototype.setFileSize = function(t) {\n        this.fileSize = t;\n    }, t.prototype.getChecksum = function() {\n        return this.checksum;\n    }, t.prototype.setChecksum = function(t) {\n        this.checksum = t;\n    }, t.prototype.getTimestamp = function() {\n        return this.timestamp;\n    }, t.prototype.setTimestamp = function(t) {\n        this.timestamp = t;\n    }, t;\n}(), Ln = function() {\n    function t() {}\n    return t.parseLong = function(t, e) {\n        return void 0 === e && (e = void 0), parseInt(t, e);\n    }, t;\n}(), Fn = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), kn = function(t) {\n    function e() {\n        return null !== t && t.apply(this, arguments) || this;\n    }\n    return Fn(e, t), e.kind = \"NullPointerException\", e;\n}(s), xn = function() {\n    function t() {}\n    return t.prototype.writeBytes = function(t) {\n        this.writeBytesOffset(t, 0, t.length);\n    }, t.prototype.writeBytesOffset = function(t, e, r) {\n        if (null == t) throw new kn;\n        if (e < 0 || e > t.length || r < 0 || e + r > t.length || e + r < 0) throw new v;\n        if (0 !== r) for(var n = 0; n < r; n++)this.write(t[e + n]);\n    }, t.prototype.flush = function() {}, t.prototype.close = function() {}, t;\n}(), Vn = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), Un = function(t) {\n    function e() {\n        return null !== t && t.apply(this, arguments) || this;\n    }\n    return Vn(e, t), e;\n}(s), Hn = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), Gn = function(t) {\n    function e(e) {\n        void 0 === e && (e = 32);\n        var r = t.call(this) || this;\n        if (r.count = 0, e < 0) throw new l(\"Negative initial size: \" + e);\n        return r.buf = new Uint8Array(e), r;\n    }\n    return Hn(e, t), e.prototype.ensureCapacity = function(t) {\n        t - this.buf.length > 0 && this.grow(t);\n    }, e.prototype.grow = function(t) {\n        var e = this.buf.length << 1;\n        if (e - t < 0 && (e = t), e < 0) {\n            if (t < 0) throw new Un;\n            e = I.MAX_VALUE;\n        }\n        this.buf = C.copyOfUint8Array(this.buf, e);\n    }, e.prototype.write = function(t) {\n        this.ensureCapacity(this.count + 1), this.buf[this.count] = t, this.count += 1;\n    }, e.prototype.writeBytesOffset = function(t, e, r) {\n        if (e < 0 || e > t.length || r < 0 || e + r - t.length > 0) throw new v;\n        this.ensureCapacity(this.count + r), w.arraycopy(t, e, this.buf, this.count, r), this.count += r;\n    }, e.prototype.writeTo = function(t) {\n        t.writeBytesOffset(this.buf, 0, this.count);\n    }, e.prototype.reset = function() {\n        this.count = 0;\n    }, e.prototype.toByteArray = function() {\n        return C.copyOfUint8Array(this.buf, this.count);\n    }, e.prototype.size = function() {\n        return this.count;\n    }, e.prototype.toString = function(t) {\n        return t ? \"string\" == typeof t ? this.toString_string(t) : this.toString_number(t) : this.toString_void();\n    }, e.prototype.toString_void = function() {\n        return new String(this.buf).toString();\n    }, e.prototype.toString_string = function(t) {\n        return new String(this.buf).toString();\n    }, e.prototype.toString_number = function(t) {\n        return new String(this.buf).toString();\n    }, e.prototype.close = function() {}, e;\n}(xn);\nfunction Xn() {\n    if (false) {}\n    if (\"undefined\" != typeof global) return global.BigInt || null;\n    if (\"undefined\" != typeof self) return self.BigInt || null;\n    throw new Error(\"Can't search globals for BigInt!\");\n}\nfunction Wn(t) {\n    if (void 0 === Xr && (Xr = Xn()), null === Xr) throw new Error(\"BigInt is not supported!\");\n    return Xr(t);\n}\n!function(t) {\n    t[t.ALPHA = 0] = \"ALPHA\", t[t.LOWER = 1] = \"LOWER\", t[t.MIXED = 2] = \"MIXED\", t[t.PUNCT = 3] = \"PUNCT\", t[t.ALPHA_SHIFT = 4] = \"ALPHA_SHIFT\", t[t.PUNCT_SHIFT = 5] = \"PUNCT_SHIFT\";\n}(Gr || (Gr = {}));\nvar jn = function() {\n    function t() {}\n    return t.decode = function(e, r) {\n        var n = new k(\"\"), o = P.ISO8859_1;\n        n.enableDecoding(o);\n        for(var i = 1, a = e[i++], u = new Bn; i < e[0];){\n            switch(a){\n                case t.TEXT_COMPACTION_MODE_LATCH:\n                    i = t.textCompaction(e, i, n);\n                    break;\n                case t.BYTE_COMPACTION_MODE_LATCH:\n                case t.BYTE_COMPACTION_MODE_LATCH_6:\n                    i = t.byteCompaction(a, e, o, i, n);\n                    break;\n                case t.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                    n.append(e[i++]);\n                    break;\n                case t.NUMERIC_COMPACTION_MODE_LATCH:\n                    i = t.numericCompaction(e, i, n);\n                    break;\n                case t.ECI_CHARSET:\n                    P.getCharacterSetECIByValue(e[i++]);\n                    break;\n                case t.ECI_GENERAL_PURPOSE:\n                    i += 2;\n                    break;\n                case t.ECI_USER_DEFINED:\n                    i++;\n                    break;\n                case t.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n                    i = t.decodeMacroBlock(e, i, u);\n                    break;\n                case t.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n                case t.MACRO_PDF417_TERMINATOR:\n                    throw new R;\n                default:\n                    i--, i = t.textCompaction(e, i, n);\n            }\n            if (!(i < e.length)) throw R.getFormatInstance();\n            a = e[i++];\n        }\n        if (0 === n.length()) throw R.getFormatInstance();\n        var s = new at(null, n.toString(), null, r);\n        return s.setOther(u), s;\n    }, t.decodeMacroBlock = function(e, r, n) {\n        if (r + t.NUMBER_OF_SEQUENCE_CODEWORDS > e[0]) throw R.getFormatInstance();\n        for(var o = new Int32Array(t.NUMBER_OF_SEQUENCE_CODEWORDS), i = 0; i < t.NUMBER_OF_SEQUENCE_CODEWORDS; i++, r++)o[i] = e[r];\n        n.setSegmentIndex(I.parseInt(t.decodeBase900toBase10(o, t.NUMBER_OF_SEQUENCE_CODEWORDS)));\n        var a = new k;\n        r = t.textCompaction(e, r, a), n.setFileId(a.toString());\n        var u = -1;\n        for(e[r] === t.BEGIN_MACRO_PDF417_OPTIONAL_FIELD && (u = r + 1); r < e[0];)switch(e[r]){\n            case t.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n                switch(e[++r]){\n                    case t.MACRO_PDF417_OPTIONAL_FIELD_FILE_NAME:\n                        var s = new k;\n                        r = t.textCompaction(e, r + 1, s), n.setFileName(s.toString());\n                        break;\n                    case t.MACRO_PDF417_OPTIONAL_FIELD_SENDER:\n                        var c = new k;\n                        r = t.textCompaction(e, r + 1, c), n.setSender(c.toString());\n                        break;\n                    case t.MACRO_PDF417_OPTIONAL_FIELD_ADDRESSEE:\n                        var f = new k;\n                        r = t.textCompaction(e, r + 1, f), n.setAddressee(f.toString());\n                        break;\n                    case t.MACRO_PDF417_OPTIONAL_FIELD_SEGMENT_COUNT:\n                        var h = new k;\n                        r = t.numericCompaction(e, r + 1, h), n.setSegmentCount(I.parseInt(h.toString()));\n                        break;\n                    case t.MACRO_PDF417_OPTIONAL_FIELD_TIME_STAMP:\n                        var l = new k;\n                        r = t.numericCompaction(e, r + 1, l), n.setTimestamp(Ln.parseLong(l.toString()));\n                        break;\n                    case t.MACRO_PDF417_OPTIONAL_FIELD_CHECKSUM:\n                        var d = new k;\n                        r = t.numericCompaction(e, r + 1, d), n.setChecksum(I.parseInt(d.toString()));\n                        break;\n                    case t.MACRO_PDF417_OPTIONAL_FIELD_FILE_SIZE:\n                        var p = new k;\n                        r = t.numericCompaction(e, r + 1, p), n.setFileSize(Ln.parseLong(p.toString()));\n                        break;\n                    default:\n                        throw R.getFormatInstance();\n                }\n                break;\n            case t.MACRO_PDF417_TERMINATOR:\n                r++, n.setLastSegment(!0);\n                break;\n            default:\n                throw R.getFormatInstance();\n        }\n        if (-1 !== u) {\n            var g = r - u;\n            n.isLastSegment() && g--, n.setOptionalData(C.copyOfRange(e, u, u + g));\n        }\n        return r;\n    }, t.textCompaction = function(e, r, n) {\n        for(var o = new Int32Array(2 * (e[0] - r)), i = new Int32Array(2 * (e[0] - r)), a = 0, u = !1; r < e[0] && !u;){\n            var s = e[r++];\n            if (s < t.TEXT_COMPACTION_MODE_LATCH) o[a] = s / 30, o[a + 1] = s % 30, a += 2;\n            else switch(s){\n                case t.TEXT_COMPACTION_MODE_LATCH:\n                    o[a++] = t.TEXT_COMPACTION_MODE_LATCH;\n                    break;\n                case t.BYTE_COMPACTION_MODE_LATCH:\n                case t.BYTE_COMPACTION_MODE_LATCH_6:\n                case t.NUMERIC_COMPACTION_MODE_LATCH:\n                case t.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n                case t.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n                case t.MACRO_PDF417_TERMINATOR:\n                    r--, u = !0;\n                    break;\n                case t.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                    o[a] = t.MODE_SHIFT_TO_BYTE_COMPACTION_MODE, s = e[r++], i[a] = s, a++;\n            }\n        }\n        return t.decodeTextCompaction(o, i, a, n), r;\n    }, t.decodeTextCompaction = function(e, r, n, o) {\n        for(var i = Gr.ALPHA, a = Gr.ALPHA, u = 0; u < n;){\n            var s = e[u], c = \"\";\n            switch(i){\n                case Gr.ALPHA:\n                    if (s < 26) c = String.fromCharCode(65 + s);\n                    else switch(s){\n                        case 26:\n                            c = \" \";\n                            break;\n                        case t.LL:\n                            i = Gr.LOWER;\n                            break;\n                        case t.ML:\n                            i = Gr.MIXED;\n                            break;\n                        case t.PS:\n                            a = i, i = Gr.PUNCT_SHIFT;\n                            break;\n                        case t.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                            o.append(r[u]);\n                            break;\n                        case t.TEXT_COMPACTION_MODE_LATCH:\n                            i = Gr.ALPHA;\n                    }\n                    break;\n                case Gr.LOWER:\n                    if (s < 26) c = String.fromCharCode(97 + s);\n                    else switch(s){\n                        case 26:\n                            c = \" \";\n                            break;\n                        case t.AS:\n                            a = i, i = Gr.ALPHA_SHIFT;\n                            break;\n                        case t.ML:\n                            i = Gr.MIXED;\n                            break;\n                        case t.PS:\n                            a = i, i = Gr.PUNCT_SHIFT;\n                            break;\n                        case t.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                            o.append(r[u]);\n                            break;\n                        case t.TEXT_COMPACTION_MODE_LATCH:\n                            i = Gr.ALPHA;\n                    }\n                    break;\n                case Gr.MIXED:\n                    if (s < t.PL) c = t.MIXED_CHARS[s];\n                    else switch(s){\n                        case t.PL:\n                            i = Gr.PUNCT;\n                            break;\n                        case 26:\n                            c = \" \";\n                            break;\n                        case t.LL:\n                            i = Gr.LOWER;\n                            break;\n                        case t.AL:\n                            i = Gr.ALPHA;\n                            break;\n                        case t.PS:\n                            a = i, i = Gr.PUNCT_SHIFT;\n                            break;\n                        case t.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                            o.append(r[u]);\n                            break;\n                        case t.TEXT_COMPACTION_MODE_LATCH:\n                            i = Gr.ALPHA;\n                    }\n                    break;\n                case Gr.PUNCT:\n                    if (s < t.PAL) c = t.PUNCT_CHARS[s];\n                    else switch(s){\n                        case t.PAL:\n                            i = Gr.ALPHA;\n                            break;\n                        case t.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                            o.append(r[u]);\n                            break;\n                        case t.TEXT_COMPACTION_MODE_LATCH:\n                            i = Gr.ALPHA;\n                    }\n                    break;\n                case Gr.ALPHA_SHIFT:\n                    if (i = a, s < 26) c = String.fromCharCode(65 + s);\n                    else switch(s){\n                        case 26:\n                            c = \" \";\n                            break;\n                        case t.TEXT_COMPACTION_MODE_LATCH:\n                            i = Gr.ALPHA;\n                    }\n                    break;\n                case Gr.PUNCT_SHIFT:\n                    if (i = a, s < t.PAL) c = t.PUNCT_CHARS[s];\n                    else switch(s){\n                        case t.PAL:\n                            i = Gr.ALPHA;\n                            break;\n                        case t.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                            o.append(r[u]);\n                            break;\n                        case t.TEXT_COMPACTION_MODE_LATCH:\n                            i = Gr.ALPHA;\n                    }\n            }\n            \"\" !== c && o.append(c), u++;\n        }\n    }, t.byteCompaction = function(e, r, n, o, i) {\n        var a = new Gn, u = 0, s = 0, c = !1;\n        switch(e){\n            case t.BYTE_COMPACTION_MODE_LATCH:\n                for(var f = new Int32Array(6), h = r[o++]; o < r[0] && !c;)switch(f[u++] = h, s = 900 * s + h, h = r[o++]){\n                    case t.TEXT_COMPACTION_MODE_LATCH:\n                    case t.BYTE_COMPACTION_MODE_LATCH:\n                    case t.NUMERIC_COMPACTION_MODE_LATCH:\n                    case t.BYTE_COMPACTION_MODE_LATCH_6:\n                    case t.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n                    case t.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n                    case t.MACRO_PDF417_TERMINATOR:\n                        o--, c = !0;\n                        break;\n                    default:\n                        if (u % 5 == 0 && u > 0) {\n                            for(var l = 0; l < 6; ++l)a.write(Number(Wn(s) >> Wn(8 * (5 - l))));\n                            s = 0, u = 0;\n                        }\n                }\n                o === r[0] && h < t.TEXT_COMPACTION_MODE_LATCH && (f[u++] = h);\n                for(var d = 0; d < u; d++)a.write(f[d]);\n                break;\n            case t.BYTE_COMPACTION_MODE_LATCH_6:\n                for(; o < r[0] && !c;){\n                    var p = r[o++];\n                    if (p < t.TEXT_COMPACTION_MODE_LATCH) u++, s = 900 * s + p;\n                    else switch(p){\n                        case t.TEXT_COMPACTION_MODE_LATCH:\n                        case t.BYTE_COMPACTION_MODE_LATCH:\n                        case t.NUMERIC_COMPACTION_MODE_LATCH:\n                        case t.BYTE_COMPACTION_MODE_LATCH_6:\n                        case t.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n                        case t.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n                        case t.MACRO_PDF417_TERMINATOR:\n                            o--, c = !0;\n                    }\n                    if (u % 5 == 0 && u > 0) {\n                        for(l = 0; l < 6; ++l)a.write(Number(Wn(s) >> Wn(8 * (5 - l))));\n                        s = 0, u = 0;\n                    }\n                }\n        }\n        return i.append(L.decode(a.toByteArray(), n)), o;\n    }, t.numericCompaction = function(e, r, n) {\n        for(var o = 0, i = !1, a = new Int32Array(t.MAX_NUMERIC_CODEWORDS); r < e[0] && !i;){\n            var u = e[r++];\n            if (r === e[0] && (i = !0), u < t.TEXT_COMPACTION_MODE_LATCH) a[o] = u, o++;\n            else switch(u){\n                case t.TEXT_COMPACTION_MODE_LATCH:\n                case t.BYTE_COMPACTION_MODE_LATCH:\n                case t.BYTE_COMPACTION_MODE_LATCH_6:\n                case t.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n                case t.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n                case t.MACRO_PDF417_TERMINATOR:\n                    r--, i = !0;\n            }\n            (o % t.MAX_NUMERIC_CODEWORDS == 0 || u === t.NUMERIC_COMPACTION_MODE_LATCH || i) && o > 0 && (n.append(t.decodeBase900toBase10(a, o)), o = 0);\n        }\n        return r;\n    }, t.decodeBase900toBase10 = function(e, r) {\n        for(var n = Wn(0), o = 0; o < r; o++)n += t.EXP900[r - o - 1] * Wn(e[o]);\n        var i = n.toString();\n        if (\"1\" !== i.charAt(0)) throw new R;\n        return i.substring(1);\n    }, t.TEXT_COMPACTION_MODE_LATCH = 900, t.BYTE_COMPACTION_MODE_LATCH = 901, t.NUMERIC_COMPACTION_MODE_LATCH = 902, t.BYTE_COMPACTION_MODE_LATCH_6 = 924, t.ECI_USER_DEFINED = 925, t.ECI_GENERAL_PURPOSE = 926, t.ECI_CHARSET = 927, t.BEGIN_MACRO_PDF417_CONTROL_BLOCK = 928, t.BEGIN_MACRO_PDF417_OPTIONAL_FIELD = 923, t.MACRO_PDF417_TERMINATOR = 922, t.MODE_SHIFT_TO_BYTE_COMPACTION_MODE = 913, t.MAX_NUMERIC_CODEWORDS = 15, t.MACRO_PDF417_OPTIONAL_FIELD_FILE_NAME = 0, t.MACRO_PDF417_OPTIONAL_FIELD_SEGMENT_COUNT = 1, t.MACRO_PDF417_OPTIONAL_FIELD_TIME_STAMP = 2, t.MACRO_PDF417_OPTIONAL_FIELD_SENDER = 3, t.MACRO_PDF417_OPTIONAL_FIELD_ADDRESSEE = 4, t.MACRO_PDF417_OPTIONAL_FIELD_FILE_SIZE = 5, t.MACRO_PDF417_OPTIONAL_FIELD_CHECKSUM = 6, t.PL = 25, t.LL = 27, t.AS = 27, t.ML = 28, t.AL = 28, t.PS = 29, t.PAL = 29, t.PUNCT_CHARS = \";<>@[\\\\]_`~!\\r\t,:\\n-.$/\\\"|*()?{}'\", t.MIXED_CHARS = \"0123456789&\\r\t,:#-.$/+%*=^\", t.EXP900 = Xn() ? function() {\n        var t = [];\n        t[0] = Wn(1);\n        var e = Wn(900);\n        t[1] = e;\n        for(var r = 2; r < 16; r++)t[r] = t[r - 1] * e;\n        return t;\n    }() : [], t.NUMBER_OF_SEQUENCE_CODEWORDS = 2, t;\n}(), zn = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, Yn = function() {\n    function t() {}\n    return t.decode = function(e, r, n, o, i, a, u) {\n        for(var s, c = new vn(e, r, n, o, i), f = null, h = null, l = !0;; l = !1){\n            if (null != r && (f = t.getRowIndicatorColumn(e, c, r, !0, a, u)), null != o && (h = t.getRowIndicatorColumn(e, c, o, !1, a, u)), null == (s = t.merge(f, h))) throw U.getNotFoundInstance();\n            var d = s.getBoundingBox();\n            if (!l || null == d || !(d.getMinY() < c.getMinY() || d.getMaxY() > c.getMaxY())) break;\n            c = d;\n        }\n        s.setBoundingBox(c);\n        var p = s.getBarcodeColumnCount() + 1;\n        s.setDetectionResultColumn(0, f), s.setDetectionResultColumn(p, h);\n        for(var g = null != f, y = 1; y <= p; y++){\n            var w = g ? y : p - y;\n            if (void 0 === s.getDetectionResultColumn(w)) {\n                var _ = void 0;\n                _ = 0 === w || w === p ? new Rn(c, 0 === w) : new Cn(c), s.setDetectionResultColumn(w, _);\n                for(var v = -1, m = v, A = c.getMinY(); A <= c.getMaxY(); A++){\n                    if ((v = t.getStartColumn(s, w, A, g)) < 0 || v > c.getMaxX()) {\n                        if (-1 === m) continue;\n                        v = m;\n                    }\n                    var E = t.detectCodeword(e, c.getMinX(), c.getMaxX(), g, v, A, a, u);\n                    null != E && (_.setCodeword(A, E), m = v, a = Math.min(a, E.getWidth()), u = Math.max(u, E.getWidth()));\n                }\n            }\n        }\n        return t.createDecoderResult(s);\n    }, t.merge = function(e, r) {\n        if (null == e && null == r) return null;\n        var n = t.getBarcodeMetadata(e, r);\n        if (null == n) return null;\n        var o = vn.merge(t.adjustBoundingBox(e), t.adjustBoundingBox(r));\n        return new Dn(n, o);\n    }, t.adjustBoundingBox = function(e) {\n        var r, n;\n        if (null == e) return null;\n        var o = e.getRowHeights();\n        if (null == o) return null;\n        var i = t.getMax(o), a = 0;\n        try {\n            for(var u = zn(o), s = u.next(); !s.done; s = u.next()){\n                var c = s.value;\n                if (a += i - c, c > 0) break;\n            }\n        } catch (t) {\n            r = {\n                error: t\n            };\n        } finally{\n            try {\n                s && !s.done && (n = u.return) && n.call(u);\n            } finally{\n                if (r) throw r.error;\n            }\n        }\n        for(var f = e.getCodewords(), h = 0; a > 0 && null == f[h]; h++)a--;\n        var l = 0;\n        for(h = o.length - 1; h >= 0 && (l += i - o[h], !(o[h] > 0)); h--);\n        for(h = f.length - 1; l > 0 && null == f[h]; h--)l--;\n        return e.getBoundingBox().addMissingRows(a, l, e.isLeft());\n    }, t.getMax = function(t) {\n        var e, r, n = -1;\n        try {\n            for(var o = zn(t), i = o.next(); !i.done; i = o.next()){\n                var a = i.value;\n                n = Math.max(n, a);\n            }\n        } catch (t) {\n            e = {\n                error: t\n            };\n        } finally{\n            try {\n                i && !i.done && (r = o.return) && r.call(o);\n            } finally{\n                if (e) throw e.error;\n            }\n        }\n        return n;\n    }, t.getBarcodeMetadata = function(t, e) {\n        var r, n;\n        return null == t || null == (r = t.getBarcodeMetadata()) ? null == e ? null : e.getBarcodeMetadata() : null == e || null == (n = e.getBarcodeMetadata()) ? r : r.getColumnCount() !== n.getColumnCount() && r.getErrorCorrectionLevel() !== n.getErrorCorrectionLevel() && r.getRowCount() !== n.getRowCount() ? null : r;\n    }, t.getRowIndicatorColumn = function(e, r, n, o, i, a) {\n        for(var u = new Rn(r, o), s = 0; s < 2; s++)for(var c = 0 === s ? 1 : -1, f = Math.trunc(Math.trunc(n.getX())), h = Math.trunc(Math.trunc(n.getY())); h <= r.getMaxY() && h >= r.getMinY(); h += c){\n            var l = t.detectCodeword(e, 0, e.getWidth(), o, f, h, i, a);\n            null != l && (u.setCodeword(h, l), f = o ? l.getStartX() : l.getEndX());\n        }\n        return u;\n    }, t.adjustCodewordCount = function(e, r) {\n        var n = r[0][1], o = n.getValue(), i = e.getBarcodeColumnCount() * e.getBarcodeRowCount() - t.getNumberOfECCodeWords(e.getBarcodeECLevel());\n        if (0 === o.length) {\n            if (i < 1 || i > sn.MAX_CODEWORDS_IN_BARCODE) throw U.getNotFoundInstance();\n            n.setValue(i);\n        } else o[0] !== i && n.setValue(i);\n    }, t.createDecoderResult = function(e) {\n        var r = t.createBarcodeMatrix(e);\n        t.adjustCodewordCount(e, r);\n        for(var n = new Array, o = new Int32Array(e.getBarcodeRowCount() * e.getBarcodeColumnCount()), i = [], a = new Array, u = 0; u < e.getBarcodeRowCount(); u++)for(var s = 0; s < e.getBarcodeColumnCount(); s++){\n            var c = r[u][s + 1].getValue(), f = u * e.getBarcodeColumnCount() + s;\n            0 === c.length ? n.push(f) : 1 === c.length ? o[f] = c[0] : (a.push(f), i.push(c));\n        }\n        for(var h = new Array(i.length), l = 0; l < h.length; l++)h[l] = i[l];\n        return t.createDecoderResultFromAmbiguousValues(e.getBarcodeECLevel(), o, sn.toIntArray(n), sn.toIntArray(a), h);\n    }, t.createDecoderResultFromAmbiguousValues = function(e, r, n, o, i) {\n        for(var a = new Int32Array(o.length), u = 100; u-- > 0;){\n            for(var s = 0; s < a.length; s++)r[o[s]] = i[s][a[s]];\n            try {\n                return t.decodeCodewords(r, e, n);\n            } catch (t) {\n                if (!(t instanceof g)) throw t;\n            }\n            if (0 === a.length) throw g.getChecksumInstance();\n            for(s = 0; s < a.length; s++){\n                if (a[s] < i[s].length - 1) {\n                    a[s]++;\n                    break;\n                }\n                if (a[s] = 0, s === a.length - 1) throw g.getChecksumInstance();\n            }\n        }\n        throw g.getChecksumInstance();\n    }, t.createBarcodeMatrix = function(t) {\n        for(var e, r, n, o, i = Array.from({\n            length: t.getBarcodeRowCount()\n        }, function() {\n            return new Array(t.getBarcodeColumnCount() + 2);\n        }), a = 0; a < i.length; a++)for(var u = 0; u < i[a].length; u++)i[a][u] = new On;\n        var s = 0;\n        try {\n            for(var c = zn(t.getDetectionResultColumns()), f = c.next(); !f.done; f = c.next()){\n                var h = f.value;\n                if (null != h) try {\n                    for(var l = (n = void 0, zn(h.getCodewords())), d = l.next(); !d.done; d = l.next()){\n                        var p = d.value;\n                        if (null != p) {\n                            var g = p.getRowNumber();\n                            if (g >= 0) {\n                                if (g >= i.length) continue;\n                                i[g][s].setValue(p.getValue());\n                            }\n                        }\n                    }\n                } catch (t) {\n                    n = {\n                        error: t\n                    };\n                } finally{\n                    try {\n                        d && !d.done && (o = l.return) && o.call(l);\n                    } finally{\n                        if (n) throw n.error;\n                    }\n                }\n                s++;\n            }\n        } catch (t) {\n            e = {\n                error: t\n            };\n        } finally{\n            try {\n                f && !f.done && (r = c.return) && r.call(c);\n            } finally{\n                if (e) throw e.error;\n            }\n        }\n        return i;\n    }, t.isValidBarcodeColumn = function(t, e) {\n        return e >= 0 && e <= t.getBarcodeColumnCount() + 1;\n    }, t.getStartColumn = function(e, r, n, o) {\n        var i, a, u = o ? 1 : -1, s = null;\n        if (t.isValidBarcodeColumn(e, r - u) && (s = e.getDetectionResultColumn(r - u).getCodeword(n)), null != s) return o ? s.getEndX() : s.getStartX();\n        if (null != (s = e.getDetectionResultColumn(r).getCodewordNearby(n))) return o ? s.getStartX() : s.getEndX();\n        if (t.isValidBarcodeColumn(e, r - u) && (s = e.getDetectionResultColumn(r - u).getCodewordNearby(n)), null != s) return o ? s.getEndX() : s.getStartX();\n        for(var c = 0; t.isValidBarcodeColumn(e, r - u);){\n            r -= u;\n            try {\n                for(var f = (i = void 0, zn(e.getDetectionResultColumn(r).getCodewords())), h = f.next(); !h.done; h = f.next()){\n                    var l = h.value;\n                    if (null != l) return (o ? l.getEndX() : l.getStartX()) + u * c * (l.getEndX() - l.getStartX());\n                }\n            } catch (t) {\n                i = {\n                    error: t\n                };\n            } finally{\n                try {\n                    h && !h.done && (a = f.return) && a.call(f);\n                } finally{\n                    if (i) throw i.error;\n                }\n            }\n            c++;\n        }\n        return o ? e.getBoundingBox().getMinX() : e.getBoundingBox().getMaxX();\n    }, t.detectCodeword = function(e, r, n, o, i, a, u, s) {\n        i = t.adjustCodewordStartColumn(e, r, n, o, i, a);\n        var c, f = t.getModuleBitCount(e, r, n, o, i, a);\n        if (null == f) return null;\n        var h = vt.sum(f);\n        if (o) c = i + h;\n        else {\n            for(var l = 0; l < f.length / 2; l++){\n                var d = f[l];\n                f[l] = f[f.length - 1 - l], f[f.length - 1 - l] = d;\n            }\n            i = (c = i) - h;\n        }\n        if (!t.checkCodewordSkew(h, u, s)) return null;\n        var p = Mn.getDecodedValue(f), g = sn.getCodeword(p);\n        return -1 === g ? null : new Pn(i, c, t.getCodewordBucketNumber(p), g);\n    }, t.getModuleBitCount = function(t, e, r, n, o, i) {\n        for(var a = o, u = new Int32Array(8), s = 0, c = n ? 1 : -1, f = n; (n ? a < r : a >= e) && s < u.length;)t.get(a, i) === f ? (u[s]++, a += c) : (s++, f = !f);\n        return s === u.length || a === (n ? r : e) && s === u.length - 1 ? u : null;\n    }, t.getNumberOfECCodeWords = function(t) {\n        return 2 << t;\n    }, t.adjustCodewordStartColumn = function(e, r, n, o, i, a) {\n        for(var u = i, s = o ? -1 : 1, c = 0; c < 2; c++){\n            for(; (o ? u >= r : u < n) && o === e.get(u, a);){\n                if (Math.abs(i - u) > t.CODEWORD_SKEW_SIZE) return i;\n                u += s;\n            }\n            s = -s, o = !o;\n        }\n        return u;\n    }, t.checkCodewordSkew = function(e, r, n) {\n        return r - t.CODEWORD_SKEW_SIZE <= e && e <= n + t.CODEWORD_SKEW_SIZE;\n    }, t.decodeCodewords = function(e, r, n) {\n        if (0 === e.length) throw R.getFormatInstance();\n        var o = 1 << r + 1, i = t.correctErrors(e, n, o);\n        t.verifyCodewordCount(e, o);\n        var a = jn.decode(e, \"\" + r);\n        return a.setErrorsCorrected(i), a.setErasures(n.length), a;\n    }, t.correctErrors = function(e, r, n) {\n        if (null != r && r.length > n / 2 + t.MAX_ERRORS || n < 0 || n > t.MAX_EC_CODEWORDS) throw g.getChecksumInstance();\n        return t.errorCorrection.decode(e, n, r);\n    }, t.verifyCodewordCount = function(t, e) {\n        if (t.length < 4) throw R.getFormatInstance();\n        var r = t[0];\n        if (r > t.length) throw R.getFormatInstance();\n        if (0 === r) {\n            if (!(e < t.length)) throw R.getFormatInstance();\n            t[0] = t.length - e;\n        }\n    }, t.getBitCountForCodeword = function(t) {\n        for(var e = new Int32Array(8), r = 0, n = e.length - 1; !((1 & t) !== r && (r = 1 & t, --n < 0));)e[n]++, t >>= 1;\n        return e;\n    }, t.getCodewordBucketNumber = function(t) {\n        return t instanceof Int32Array ? this.getCodewordBucketNumber_Int32Array(t) : this.getCodewordBucketNumber_number(t);\n    }, t.getCodewordBucketNumber_number = function(e) {\n        return t.getCodewordBucketNumber(t.getBitCountForCodeword(e));\n    }, t.getCodewordBucketNumber_Int32Array = function(t) {\n        return (t[0] - t[2] + t[4] - t[6] + 9) % 9;\n    }, t.toString = function(t) {\n        for(var e = new An, r = 0; r < t.length; r++){\n            e.format(\"Row %2d: \", r);\n            for(var n = 0; n < t[r].length; n++){\n                var o = t[r][n];\n                0 === o.getValue().length ? e.format(\"        \", null) : e.format(\"%4d(%2d)\", o.getValue()[0], o.getConfidence(o.getValue()[0]));\n            }\n            e.format(\"%n\");\n        }\n        return e.toString();\n    }, t.CODEWORD_SKEW_SIZE = 2, t.MAX_ERRORS = 3, t.MAX_EC_CODEWORDS = 512, t.errorCorrection = new _n, t;\n}(), Zn = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, Kn = function() {\n    function t() {}\n    return t.prototype.decode = function(e, r) {\n        void 0 === r && (r = null);\n        var n = t.decode(e, r, !1);\n        if (null == n || 0 === n.length || null == n[0]) throw U.getNotFoundInstance();\n        return n[0];\n    }, t.prototype.decodeMultiple = function(e, r) {\n        void 0 === r && (r = null);\n        try {\n            return t.decode(e, r, !0);\n        } catch (t) {\n            if (t instanceof R || t instanceof g) throw U.getNotFoundInstance();\n            throw t;\n        }\n    }, t.decode = function(e, r, n) {\n        var o, i, a = new Array, u = hn.detectMultiple(e, r, n);\n        try {\n            for(var s = Zn(u.getPoints()), c = s.next(); !c.done; c = s.next()){\n                var f = c.value, h = Yn.decode(u.getBits(), f[4], f[5], f[6], f[7], t.getMinCodewordWidth(f), t.getMaxCodewordWidth(f)), l = new et(h.getText(), h.getRawBytes(), void 0, f, nt.PDF_417);\n                l.putMetadata(it.ERROR_CORRECTION_LEVEL, h.getECLevel());\n                var d = h.getOther();\n                null != d && l.putMetadata(it.PDF417_EXTRA_METADATA, d), a.push(l);\n            }\n        } catch (t) {\n            o = {\n                error: t\n            };\n        } finally{\n            try {\n                c && !c.done && (i = s.return) && i.call(s);\n            } finally{\n                if (o) throw o.error;\n            }\n        }\n        return a.map(function(t) {\n            return t;\n        });\n    }, t.getMaxWidth = function(t, e) {\n        return null == t || null == e ? 0 : Math.trunc(Math.abs(t.getX() - e.getX()));\n    }, t.getMinWidth = function(t, e) {\n        return null == t || null == e ? I.MAX_VALUE : Math.trunc(Math.abs(t.getX() - e.getX()));\n    }, t.getMaxCodewordWidth = function(e) {\n        return Math.floor(Math.max(Math.max(t.getMaxWidth(e[0], e[4]), t.getMaxWidth(e[6], e[2]) * sn.MODULES_IN_CODEWORD / sn.MODULES_IN_STOP_PATTERN), Math.max(t.getMaxWidth(e[1], e[5]), t.getMaxWidth(e[7], e[3]) * sn.MODULES_IN_CODEWORD / sn.MODULES_IN_STOP_PATTERN)));\n    }, t.getMinCodewordWidth = function(e) {\n        return Math.floor(Math.min(Math.min(t.getMinWidth(e[0], e[4]), t.getMinWidth(e[6], e[2]) * sn.MODULES_IN_CODEWORD / sn.MODULES_IN_STOP_PATTERN), Math.min(t.getMinWidth(e[1], e[5]), t.getMinWidth(e[7], e[3]) * sn.MODULES_IN_CODEWORD / sn.MODULES_IN_STOP_PATTERN)));\n    }, t.prototype.reset = function() {}, t;\n}(), qn = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), Qn = function(t) {\n    function e() {\n        return null !== t && t.apply(this, arguments) || this;\n    }\n    return qn(e, t), e.kind = \"ReaderException\", e;\n}(s), Jn = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, $n = function() {\n    function t() {}\n    return t.prototype.decode = function(t, e) {\n        return this.setHints(e), this.decodeInternal(t);\n    }, t.prototype.decodeWithState = function(t) {\n        return null !== this.readers && void 0 !== this.readers || this.setHints(null), this.decodeInternal(t);\n    }, t.prototype.setHints = function(t) {\n        this.hints = t;\n        var e = null != t && void 0 !== t.get(T.TRY_HARDER), r = null == t ? null : t.get(T.POSSIBLE_FORMATS), n = new Array;\n        if (null != r) {\n            var o = r.some(function(t) {\n                return t === nt.UPC_A || t === nt.UPC_E || t === nt.EAN_13 || t === nt.EAN_8 || t === nt.CODABAR || t === nt.CODE_39 || t === nt.CODE_93 || t === nt.CODE_128 || t === nt.ITF || t === nt.RSS_14 || t === nt.RSS_EXPANDED;\n            });\n            o && !e && n.push(new fr(t)), r.includes(nt.QR_CODE) && n.push(new an), r.includes(nt.DATA_MATRIX) && n.push(new Or), r.includes(nt.AZTEC) && n.push(new Mt), r.includes(nt.PDF_417) && n.push(new Kn), o && e && n.push(new fr(t));\n        }\n        0 === n.length && (e || n.push(new fr(t)), n.push(new an), n.push(new Or), n.push(new Mt), n.push(new Kn), e && n.push(new fr(t))), this.readers = n;\n    }, t.prototype.reset = function() {\n        var t, e;\n        if (null !== this.readers) try {\n            for(var r = Jn(this.readers), n = r.next(); !n.done; n = r.next()){\n                n.value.reset();\n            }\n        } catch (e) {\n            t = {\n                error: e\n            };\n        } finally{\n            try {\n                n && !n.done && (e = r.return) && e.call(r);\n            } finally{\n                if (t) throw t.error;\n            }\n        }\n    }, t.prototype.decodeInternal = function(t) {\n        var e, r;\n        if (null === this.readers) throw new Qn(\"No readers where selected, nothing can be read.\");\n        try {\n            for(var n = Jn(this.readers), o = n.next(); !o.done; o = n.next()){\n                var i = o.value;\n                try {\n                    return i.decode(t, this.hints);\n                } catch (t) {\n                    if (t instanceof Qn) continue;\n                }\n            }\n        } catch (t) {\n            e = {\n                error: t\n            };\n        } finally{\n            try {\n                o && !o.done && (r = n.return) && r.call(n);\n            } finally{\n                if (e) throw e.error;\n            }\n        }\n        throw new U(\"No MultiFormat Readers were able to detect the code.\");\n    }, t;\n}(), to = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}();\n!function(t) {\n    function e(e, r) {\n        void 0 === e && (e = null), void 0 === r && (r = 500);\n        var n = new $n;\n        return n.setHints(e), t.call(this, n, r) || this;\n    }\n    to(e, t), e.prototype.decodeBitmap = function(t) {\n        return this.reader.decodeWithState(t);\n    };\n}(tt);\nvar eo = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}();\n!function(t) {\n    function e(e) {\n        return void 0 === e && (e = 500), t.call(this, new Kn, e) || this;\n    }\n    eo(e, t);\n}(tt);\nvar ro, no = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}();\n!function(t) {\n    function e(e) {\n        return void 0 === e && (e = 500), t.call(this, new an, e) || this;\n    }\n    no(e, t);\n}(tt), function(t) {\n    t[t.ERROR_CORRECTION = 0] = \"ERROR_CORRECTION\", t[t.CHARACTER_SET = 1] = \"CHARACTER_SET\", t[t.DATA_MATRIX_SHAPE = 2] = \"DATA_MATRIX_SHAPE\", t[t.MIN_SIZE = 3] = \"MIN_SIZE\", t[t.MAX_SIZE = 4] = \"MAX_SIZE\", t[t.MARGIN = 5] = \"MARGIN\", t[t.PDF417_COMPACT = 6] = \"PDF417_COMPACT\", t[t.PDF417_COMPACTION = 7] = \"PDF417_COMPACTION\", t[t.PDF417_DIMENSIONS = 8] = \"PDF417_DIMENSIONS\", t[t.AZTEC_LAYERS = 9] = \"AZTEC_LAYERS\", t[t.QR_VERSION = 10] = \"QR_VERSION\";\n}(ro || (ro = {}));\nvar oo = ro, io = function() {\n    function t(t) {\n        this.field = t, this.cachedGenerators = [], this.cachedGenerators.push(new st(t, Int32Array.from([\n            1\n        ])));\n    }\n    return t.prototype.buildGenerator = function(t) {\n        var e = this.cachedGenerators;\n        if (t >= e.length) for(var r = e[e.length - 1], n = this.field, o = e.length; o <= t; o++){\n            var i = r.multiply(new st(n, Int32Array.from([\n                1,\n                n.exp(o - 1 + n.getGeneratorBase())\n            ])));\n            e.push(i), r = i;\n        }\n        return e[t];\n    }, t.prototype.encode = function(t, e) {\n        if (0 === e) throw new l(\"No error correction bytes\");\n        var r = t.length - e;\n        if (r <= 0) throw new l(\"No data bytes provided\");\n        var n = this.buildGenerator(e), o = new Int32Array(r);\n        w.arraycopy(t, 0, o, 0, r);\n        for(var i = new st(this.field, o), a = (i = i.multiplyByMonomial(e, 1)).divide(n)[1].getCoefficients(), u = e - a.length, s = 0; s < u; s++)t[r + s] = 0;\n        w.arraycopy(a, 0, t, r + u, a.length);\n    }, t;\n}(), ao = function() {\n    function t() {}\n    return t.applyMaskPenaltyRule1 = function(e) {\n        return t.applyMaskPenaltyRule1Internal(e, !0) + t.applyMaskPenaltyRule1Internal(e, !1);\n    }, t.applyMaskPenaltyRule2 = function(e) {\n        for(var r = 0, n = e.getArray(), o = e.getWidth(), i = e.getHeight(), a = 0; a < i - 1; a++)for(var u = n[a], s = 0; s < o - 1; s++){\n            var c = u[s];\n            c === u[s + 1] && c === n[a + 1][s] && c === n[a + 1][s + 1] && r++;\n        }\n        return t.N2 * r;\n    }, t.applyMaskPenaltyRule3 = function(e) {\n        for(var r = 0, n = e.getArray(), o = e.getWidth(), i = e.getHeight(), a = 0; a < i; a++)for(var u = 0; u < o; u++){\n            var s = n[a];\n            u + 6 < o && 1 === s[u] && 0 === s[u + 1] && 1 === s[u + 2] && 1 === s[u + 3] && 1 === s[u + 4] && 0 === s[u + 5] && 1 === s[u + 6] && (t.isWhiteHorizontal(s, u - 4, u) || t.isWhiteHorizontal(s, u + 7, u + 11)) && r++, a + 6 < i && 1 === n[a][u] && 0 === n[a + 1][u] && 1 === n[a + 2][u] && 1 === n[a + 3][u] && 1 === n[a + 4][u] && 0 === n[a + 5][u] && 1 === n[a + 6][u] && (t.isWhiteVertical(n, u, a - 4, a) || t.isWhiteVertical(n, u, a + 7, a + 11)) && r++;\n        }\n        return r * t.N3;\n    }, t.isWhiteHorizontal = function(t, e, r) {\n        e = Math.max(e, 0), r = Math.min(r, t.length);\n        for(var n = e; n < r; n++)if (1 === t[n]) return !1;\n        return !0;\n    }, t.isWhiteVertical = function(t, e, r, n) {\n        r = Math.max(r, 0), n = Math.min(n, t.length);\n        for(var o = r; o < n; o++)if (1 === t[o][e]) return !1;\n        return !0;\n    }, t.applyMaskPenaltyRule4 = function(e) {\n        for(var r = 0, n = e.getArray(), o = e.getWidth(), i = e.getHeight(), a = 0; a < i; a++)for(var u = n[a], s = 0; s < o; s++)1 === u[s] && r++;\n        var c = e.getHeight() * e.getWidth();\n        return Math.floor(10 * Math.abs(2 * r - c) / c) * t.N4;\n    }, t.getDataMaskBit = function(t, e, r) {\n        var n, o;\n        switch(t){\n            case 0:\n                n = r + e & 1;\n                break;\n            case 1:\n                n = 1 & r;\n                break;\n            case 2:\n                n = e % 3;\n                break;\n            case 3:\n                n = (r + e) % 3;\n                break;\n            case 4:\n                n = Math.floor(r / 2) + Math.floor(e / 3) & 1;\n                break;\n            case 5:\n                n = (1 & (o = r * e)) + o % 3;\n                break;\n            case 6:\n                n = (1 & (o = r * e)) + o % 3 & 1;\n                break;\n            case 7:\n                n = (o = r * e) % 3 + (r + e & 1) & 1;\n                break;\n            default:\n                throw new l(\"Invalid mask pattern: \" + t);\n        }\n        return 0 === n;\n    }, t.applyMaskPenaltyRule1Internal = function(e, r) {\n        for(var n = 0, o = r ? e.getHeight() : e.getWidth(), i = r ? e.getWidth() : e.getHeight(), a = e.getArray(), u = 0; u < o; u++){\n            for(var s = 0, c = -1, f = 0; f < i; f++){\n                var h = r ? a[u][f] : a[f][u];\n                h === c ? s++ : (s >= 5 && (n += t.N1 + (s - 5)), s = 1, c = h);\n            }\n            s >= 5 && (n += t.N1 + (s - 5));\n        }\n        return n;\n    }, t.N1 = 3, t.N2 = 3, t.N3 = 40, t.N4 = 10, t;\n}(), uo = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, so = function() {\n    function t(t, e) {\n        this.width = t, this.height = e;\n        for(var r = new Array(e), n = 0; n !== e; n++)r[n] = new Uint8Array(t);\n        this.bytes = r;\n    }\n    return t.prototype.getHeight = function() {\n        return this.height;\n    }, t.prototype.getWidth = function() {\n        return this.width;\n    }, t.prototype.get = function(t, e) {\n        return this.bytes[e][t];\n    }, t.prototype.getArray = function() {\n        return this.bytes;\n    }, t.prototype.setNumber = function(t, e, r) {\n        this.bytes[e][t] = r;\n    }, t.prototype.setBoolean = function(t, e, r) {\n        this.bytes[e][t] = r ? 1 : 0;\n    }, t.prototype.clear = function(t) {\n        var e, r;\n        try {\n            for(var n = uo(this.bytes), o = n.next(); !o.done; o = n.next()){\n                var i = o.value;\n                C.fill(i, t);\n            }\n        } catch (t) {\n            e = {\n                error: t\n            };\n        } finally{\n            try {\n                o && !o.done && (r = n.return) && r.call(n);\n            } finally{\n                if (e) throw e.error;\n            }\n        }\n    }, t.prototype.equals = function(e) {\n        if (!(e instanceof t)) return !1;\n        var r = e;\n        if (this.width !== r.width) return !1;\n        if (this.height !== r.height) return !1;\n        for(var n = 0, o = this.height; n < o; ++n)for(var i = this.bytes[n], a = r.bytes[n], u = 0, s = this.width; u < s; ++u)if (i[u] !== a[u]) return !1;\n        return !0;\n    }, t.prototype.toString = function() {\n        for(var t = new k, e = 0, r = this.height; e < r; ++e){\n            for(var n = this.bytes[e], o = 0, i = this.width; o < i; ++o)switch(n[o]){\n                case 0:\n                    t.append(\" 0\");\n                    break;\n                case 1:\n                    t.append(\" 1\");\n                    break;\n                default:\n                    t.append(\"  \");\n            }\n            t.append(\"\\n\");\n        }\n        return t.toString();\n    }, t;\n}(), co = function() {\n    function t() {\n        this.maskPattern = -1;\n    }\n    return t.prototype.getMode = function() {\n        return this.mode;\n    }, t.prototype.getECLevel = function() {\n        return this.ecLevel;\n    }, t.prototype.getVersion = function() {\n        return this.version;\n    }, t.prototype.getMaskPattern = function() {\n        return this.maskPattern;\n    }, t.prototype.getMatrix = function() {\n        return this.matrix;\n    }, t.prototype.toString = function() {\n        var t = new k;\n        return t.append(\"<<\\n\"), t.append(\" mode: \"), t.append(this.mode ? this.mode.toString() : \"null\"), t.append(\"\\n ecLevel: \"), t.append(this.ecLevel ? this.ecLevel.toString() : \"null\"), t.append(\"\\n version: \"), t.append(this.version ? this.version.toString() : \"null\"), t.append(\"\\n maskPattern: \"), t.append(this.maskPattern.toString()), this.matrix ? (t.append(\"\\n matrix:\\n\"), t.append(this.matrix.toString())) : t.append(\"\\n matrix: null\\n\"), t.append(\">>\\n\"), t.toString();\n    }, t.prototype.setMode = function(t) {\n        this.mode = t;\n    }, t.prototype.setECLevel = function(t) {\n        this.ecLevel = t;\n    }, t.prototype.setVersion = function(t) {\n        this.version = t;\n    }, t.prototype.setMaskPattern = function(t) {\n        this.maskPattern = t;\n    }, t.prototype.setMatrix = function(t) {\n        this.matrix = t;\n    }, t.isValidMaskPattern = function(e) {\n        return e >= 0 && e < t.NUM_MASK_PATTERNS;\n    }, t.NUM_MASK_PATTERNS = 8, t;\n}(), fo = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), ho = function(t) {\n    function e() {\n        return null !== t && t.apply(this, arguments) || this;\n    }\n    return fo(e, t), e.kind = \"WriterException\", e;\n}(s), lo = function() {\n    function t() {}\n    return t.clearMatrix = function(t) {\n        t.clear(255);\n    }, t.buildMatrix = function(e, r, n, o, i) {\n        t.clearMatrix(i), t.embedBasicPatterns(n, i), t.embedTypeInfo(r, o, i), t.maybeEmbedVersionInfo(n, i), t.embedDataBits(e, o, i);\n    }, t.embedBasicPatterns = function(e, r) {\n        t.embedPositionDetectionPatternsAndSeparators(r), t.embedDarkDotAtLeftBottomCorner(r), t.maybeEmbedPositionAdjustmentPatterns(e, r), t.embedTimingPatterns(r);\n    }, t.embedTypeInfo = function(e, r, n) {\n        var o = new S;\n        t.makeTypeInfoBits(e, r, o);\n        for(var i = 0, a = o.getSize(); i < a; ++i){\n            var u = o.get(o.getSize() - 1 - i), s = t.TYPE_INFO_COORDINATES[i], c = s[0], f = s[1];\n            if (n.setBoolean(c, f, u), i < 8) {\n                var h = n.getWidth() - i - 1, l = 8;\n                n.setBoolean(h, l, u);\n            } else {\n                h = 8, l = n.getHeight() - 7 + (i - 8);\n                n.setBoolean(h, l, u);\n            }\n        }\n    }, t.maybeEmbedVersionInfo = function(e, r) {\n        if (!(e.getVersionNumber() < 7)) {\n            var n = new S;\n            t.makeVersionInfoBits(e, n);\n            for(var o = 17, i = 0; i < 6; ++i)for(var a = 0; a < 3; ++a){\n                var u = n.get(o);\n                o--, r.setBoolean(i, r.getHeight() - 11 + a, u), r.setBoolean(r.getHeight() - 11 + a, i, u);\n            }\n        }\n    }, t.embedDataBits = function(e, r, n) {\n        for(var o = 0, i = -1, a = n.getWidth() - 1, u = n.getHeight() - 1; a > 0;){\n            for(6 === a && (a -= 1); u >= 0 && u < n.getHeight();){\n                for(var s = 0; s < 2; ++s){\n                    var c = a - s;\n                    if (t.isEmpty(n.get(c, u))) {\n                        var f = void 0;\n                        o < e.getSize() ? (f = e.get(o), ++o) : f = !1, 255 !== r && ao.getDataMaskBit(r, c, u) && (f = !f), n.setBoolean(c, u, f);\n                    }\n                }\n                u += i;\n            }\n            u += i = -i, a -= 2;\n        }\n        if (o !== e.getSize()) throw new ho(\"Not all bits consumed: \" + o + \"/\" + e.getSize());\n    }, t.findMSBSet = function(t) {\n        return 32 - I.numberOfLeadingZeros(t);\n    }, t.calculateBCHCode = function(e, r) {\n        if (0 === r) throw new l(\"0 polynomial\");\n        var n = t.findMSBSet(r);\n        for(e <<= n - 1; t.findMSBSet(e) >= n;)e ^= r << t.findMSBSet(e) - n;\n        return e;\n    }, t.makeTypeInfoBits = function(e, r, n) {\n        if (!co.isValidMaskPattern(r)) throw new ho(\"Invalid mask pattern\");\n        var o = e.getBits() << 3 | r;\n        n.appendBits(o, 5);\n        var i = t.calculateBCHCode(o, t.TYPE_INFO_POLY);\n        n.appendBits(i, 10);\n        var a = new S;\n        if (a.appendBits(t.TYPE_INFO_MASK_PATTERN, 15), n.xor(a), 15 !== n.getSize()) throw new ho(\"should not happen but we got: \" + n.getSize());\n    }, t.makeVersionInfoBits = function(e, r) {\n        r.appendBits(e.getVersionNumber(), 6);\n        var n = t.calculateBCHCode(e.getVersionNumber(), t.VERSION_INFO_POLY);\n        if (r.appendBits(n, 12), 18 !== r.getSize()) throw new ho(\"should not happen but we got: \" + r.getSize());\n    }, t.isEmpty = function(t) {\n        return 255 === t;\n    }, t.embedTimingPatterns = function(e) {\n        for(var r = 8; r < e.getWidth() - 8; ++r){\n            var n = (r + 1) % 2;\n            t.isEmpty(e.get(r, 6)) && e.setNumber(r, 6, n), t.isEmpty(e.get(6, r)) && e.setNumber(6, r, n);\n        }\n    }, t.embedDarkDotAtLeftBottomCorner = function(t) {\n        if (0 === t.get(8, t.getHeight() - 8)) throw new ho;\n        t.setNumber(8, t.getHeight() - 8, 1);\n    }, t.embedHorizontalSeparationPattern = function(e, r, n) {\n        for(var o = 0; o < 8; ++o){\n            if (!t.isEmpty(n.get(e + o, r))) throw new ho;\n            n.setNumber(e + o, r, 0);\n        }\n    }, t.embedVerticalSeparationPattern = function(e, r, n) {\n        for(var o = 0; o < 7; ++o){\n            if (!t.isEmpty(n.get(e, r + o))) throw new ho;\n            n.setNumber(e, r + o, 0);\n        }\n    }, t.embedPositionAdjustmentPattern = function(e, r, n) {\n        for(var o = 0; o < 5; ++o)for(var i = t.POSITION_ADJUSTMENT_PATTERN[o], a = 0; a < 5; ++a)n.setNumber(e + a, r + o, i[a]);\n    }, t.embedPositionDetectionPattern = function(e, r, n) {\n        for(var o = 0; o < 7; ++o)for(var i = t.POSITION_DETECTION_PATTERN[o], a = 0; a < 7; ++a)n.setNumber(e + a, r + o, i[a]);\n    }, t.embedPositionDetectionPatternsAndSeparators = function(e) {\n        var r = t.POSITION_DETECTION_PATTERN[0].length;\n        t.embedPositionDetectionPattern(0, 0, e), t.embedPositionDetectionPattern(e.getWidth() - r, 0, e), t.embedPositionDetectionPattern(0, e.getWidth() - r, e);\n        t.embedHorizontalSeparationPattern(0, 7, e), t.embedHorizontalSeparationPattern(e.getWidth() - 8, 7, e), t.embedHorizontalSeparationPattern(0, e.getWidth() - 8, e);\n        t.embedVerticalSeparationPattern(7, 0, e), t.embedVerticalSeparationPattern(e.getHeight() - 7 - 1, 0, e), t.embedVerticalSeparationPattern(7, e.getHeight() - 7, e);\n    }, t.maybeEmbedPositionAdjustmentPatterns = function(e, r) {\n        if (!(e.getVersionNumber() < 2)) for(var n = e.getVersionNumber() - 1, o = t.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE[n], i = 0, a = o.length; i !== a; i++){\n            var u = o[i];\n            if (u >= 0) for(var s = 0; s !== a; s++){\n                var c = o[s];\n                c >= 0 && t.isEmpty(r.get(c, u)) && t.embedPositionAdjustmentPattern(c - 2, u - 2, r);\n            }\n        }\n    }, t.POSITION_DETECTION_PATTERN = Array.from([\n        Int32Array.from([\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            0,\n            1,\n            1,\n            1,\n            0,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            0,\n            1,\n            1,\n            1,\n            0,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            0,\n            1,\n            1,\n            1,\n            0,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1\n        ])\n    ]), t.POSITION_ADJUSTMENT_PATTERN = Array.from([\n        Int32Array.from([\n            1,\n            1,\n            1,\n            1,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            0,\n            0,\n            0,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            0,\n            1,\n            0,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            0,\n            0,\n            0,\n            1\n        ]),\n        Int32Array.from([\n            1,\n            1,\n            1,\n            1,\n            1\n        ])\n    ]), t.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE = Array.from([\n        Int32Array.from([\n            -1,\n            -1,\n            -1,\n            -1,\n            -1,\n            -1,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            18,\n            -1,\n            -1,\n            -1,\n            -1,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            22,\n            -1,\n            -1,\n            -1,\n            -1,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            26,\n            -1,\n            -1,\n            -1,\n            -1,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            30,\n            -1,\n            -1,\n            -1,\n            -1,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            34,\n            -1,\n            -1,\n            -1,\n            -1,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            22,\n            38,\n            -1,\n            -1,\n            -1,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            24,\n            42,\n            -1,\n            -1,\n            -1,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            26,\n            46,\n            -1,\n            -1,\n            -1,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            28,\n            50,\n            -1,\n            -1,\n            -1,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            30,\n            54,\n            -1,\n            -1,\n            -1,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            32,\n            58,\n            -1,\n            -1,\n            -1,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            34,\n            62,\n            -1,\n            -1,\n            -1,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            26,\n            46,\n            66,\n            -1,\n            -1,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            26,\n            48,\n            70,\n            -1,\n            -1,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            26,\n            50,\n            74,\n            -1,\n            -1,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            30,\n            54,\n            78,\n            -1,\n            -1,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            30,\n            56,\n            82,\n            -1,\n            -1,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            30,\n            58,\n            86,\n            -1,\n            -1,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            34,\n            62,\n            90,\n            -1,\n            -1,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            28,\n            50,\n            72,\n            94,\n            -1,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            26,\n            50,\n            74,\n            98,\n            -1,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            30,\n            54,\n            78,\n            102,\n            -1,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            28,\n            54,\n            80,\n            106,\n            -1,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            32,\n            58,\n            84,\n            110,\n            -1,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            30,\n            58,\n            86,\n            114,\n            -1,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            34,\n            62,\n            90,\n            118,\n            -1,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            26,\n            50,\n            74,\n            98,\n            122,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            30,\n            54,\n            78,\n            102,\n            126,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            26,\n            52,\n            78,\n            104,\n            130,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            30,\n            56,\n            82,\n            108,\n            134,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            34,\n            60,\n            86,\n            112,\n            138,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            30,\n            58,\n            86,\n            114,\n            142,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            34,\n            62,\n            90,\n            118,\n            146,\n            -1\n        ]),\n        Int32Array.from([\n            6,\n            30,\n            54,\n            78,\n            102,\n            126,\n            150\n        ]),\n        Int32Array.from([\n            6,\n            24,\n            50,\n            76,\n            102,\n            128,\n            154\n        ]),\n        Int32Array.from([\n            6,\n            28,\n            54,\n            80,\n            106,\n            132,\n            158\n        ]),\n        Int32Array.from([\n            6,\n            32,\n            58,\n            84,\n            110,\n            136,\n            162\n        ]),\n        Int32Array.from([\n            6,\n            26,\n            54,\n            82,\n            110,\n            138,\n            166\n        ]),\n        Int32Array.from([\n            6,\n            30,\n            58,\n            86,\n            114,\n            142,\n            170\n        ])\n    ]), t.TYPE_INFO_COORDINATES = Array.from([\n        Int32Array.from([\n            8,\n            0\n        ]),\n        Int32Array.from([\n            8,\n            1\n        ]),\n        Int32Array.from([\n            8,\n            2\n        ]),\n        Int32Array.from([\n            8,\n            3\n        ]),\n        Int32Array.from([\n            8,\n            4\n        ]),\n        Int32Array.from([\n            8,\n            5\n        ]),\n        Int32Array.from([\n            8,\n            7\n        ]),\n        Int32Array.from([\n            8,\n            8\n        ]),\n        Int32Array.from([\n            7,\n            8\n        ]),\n        Int32Array.from([\n            5,\n            8\n        ]),\n        Int32Array.from([\n            4,\n            8\n        ]),\n        Int32Array.from([\n            3,\n            8\n        ]),\n        Int32Array.from([\n            2,\n            8\n        ]),\n        Int32Array.from([\n            1,\n            8\n        ]),\n        Int32Array.from([\n            0,\n            8\n        ])\n    ]), t.VERSION_INFO_POLY = 7973, t.TYPE_INFO_POLY = 1335, t.TYPE_INFO_MASK_PATTERN = 21522, t;\n}(), po = function() {\n    function t(t, e) {\n        this.dataBytes = t, this.errorCorrectionBytes = e;\n    }\n    return t.prototype.getDataBytes = function() {\n        return this.dataBytes;\n    }, t.prototype.getErrorCorrectionBytes = function() {\n        return this.errorCorrectionBytes;\n    }, t;\n}(), go = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n!function() {\n    function t() {}\n    t.calculateMaskPenalty = function(t) {\n        return ao.applyMaskPenaltyRule1(t) + ao.applyMaskPenaltyRule2(t) + ao.applyMaskPenaltyRule3(t) + ao.applyMaskPenaltyRule4(t);\n    }, t.encode = function(e, r, n) {\n        void 0 === n && (n = null);\n        var o = t.DEFAULT_BYTE_MODE_ENCODING, i = null !== n && void 0 !== n.get(oo.CHARACTER_SET);\n        i && (o = n.get(oo.CHARACTER_SET).toString());\n        var a = this.chooseMode(e, o), u = new S;\n        if (a === Wr.BYTE && (i || t.DEFAULT_BYTE_MODE_ENCODING !== o)) {\n            var s = P.getCharacterSetECIByName(o);\n            void 0 !== s && this.appendECI(s, u);\n        }\n        this.appendModeInfo(a, u);\n        var c, f = new S;\n        if (this.appendBytes(e, a, f, o), null !== n && void 0 !== n.get(oo.QR_VERSION)) {\n            var h = Number.parseInt(n.get(oo.QR_VERSION).toString(), 10);\n            c = Fr.getVersionForNumber(h);\n            var l = this.calculateBitsNeeded(a, u, f, c);\n            if (!this.willFit(l, c, r)) throw new ho(\"Data too big for requested version\");\n        } else c = this.recommendVersion(r, a, u, f);\n        var d = new S;\n        d.appendBitArray(u);\n        var p = a === Wr.BYTE ? f.getSizeInBytes() : e.length;\n        this.appendLengthInfo(p, c, a, d), d.appendBitArray(f);\n        var g = c.getECBlocksForLevel(r), y = c.getTotalCodewords() - g.getTotalECCodewords();\n        this.terminateBits(y, d);\n        var w = this.interleaveWithECBytes(d, c.getTotalCodewords(), y, g.getNumBlocks()), _ = new co;\n        _.setECLevel(r), _.setMode(a), _.setVersion(c);\n        var v = c.getDimensionForVersion(), m = new so(v, v), A = this.chooseMaskPattern(w, r, c, m);\n        return _.setMaskPattern(A), lo.buildMatrix(w, r, c, A, m), _.setMatrix(m), _;\n    }, t.recommendVersion = function(t, e, r, n) {\n        var o = this.calculateBitsNeeded(e, r, n, Fr.getVersionForNumber(1)), i = this.chooseVersion(o, t), a = this.calculateBitsNeeded(e, r, n, i);\n        return this.chooseVersion(a, t);\n    }, t.calculateBitsNeeded = function(t, e, r, n) {\n        return e.getSize() + t.getCharacterCountBits(n) + r.getSize();\n    }, t.getAlphanumericCode = function(e) {\n        return e < t.ALPHANUMERIC_TABLE.length ? t.ALPHANUMERIC_TABLE[e] : -1;\n    }, t.chooseMode = function(e, r) {\n        if (void 0 === r && (r = null), P.SJIS.getName() === r && this.isOnlyDoubleByteKanji(e)) return Wr.KANJI;\n        for(var n = !1, o = !1, i = 0, a = e.length; i < a; ++i){\n            var u = e.charAt(i);\n            if (t.isDigit(u)) n = !0;\n            else {\n                if (-1 === this.getAlphanumericCode(u.charCodeAt(0))) return Wr.BYTE;\n                o = !0;\n            }\n        }\n        return o ? Wr.ALPHANUMERIC : n ? Wr.NUMERIC : Wr.BYTE;\n    }, t.isOnlyDoubleByteKanji = function(t) {\n        var e;\n        try {\n            e = L.encode(t, P.SJIS);\n        } catch (t) {\n            return !1;\n        }\n        var r = e.length;\n        if (r % 2 != 0) return !1;\n        for(var n = 0; n < r; n += 2){\n            var o = 255 & e[n];\n            if ((o < 129 || o > 159) && (o < 224 || o > 235)) return !1;\n        }\n        return !0;\n    }, t.chooseMaskPattern = function(t, e, r, n) {\n        for(var o = Number.MAX_SAFE_INTEGER, i = -1, a = 0; a < co.NUM_MASK_PATTERNS; a++){\n            lo.buildMatrix(t, e, r, a, n);\n            var u = this.calculateMaskPenalty(n);\n            u < o && (o = u, i = a);\n        }\n        return i;\n    }, t.chooseVersion = function(e, r) {\n        for(var n = 1; n <= 40; n++){\n            var o = Fr.getVersionForNumber(n);\n            if (t.willFit(e, o, r)) return o;\n        }\n        throw new ho(\"Data too big\");\n    }, t.willFit = function(t, e, r) {\n        return e.getTotalCodewords() - e.getECBlocksForLevel(r).getTotalECCodewords() >= (t + 7) / 8;\n    }, t.terminateBits = function(t, e) {\n        var r = 8 * t;\n        if (e.getSize() > r) throw new ho(\"data bits cannot fit in the QR Code\" + e.getSize() + \" > \" + r);\n        for(var n = 0; n < 4 && e.getSize() < r; ++n)e.appendBit(!1);\n        var o = 7 & e.getSize();\n        if (o > 0) for(n = o; n < 8; n++)e.appendBit(!1);\n        var i = t - e.getSizeInBytes();\n        for(n = 0; n < i; ++n)e.appendBits(0 == (1 & n) ? 236 : 17, 8);\n        if (e.getSize() !== r) throw new ho(\"Bits size does not equal capacity\");\n    }, t.getNumDataBytesAndNumECBytesForBlockID = function(t, e, r, n, o, i) {\n        if (n >= r) throw new ho(\"Block ID too large\");\n        var a = t % r, u = r - a, s = Math.floor(t / r), c = s + 1, f = Math.floor(e / r), h = f + 1, l = s - f, d = c - h;\n        if (l !== d) throw new ho(\"EC bytes mismatch\");\n        if (r !== u + a) throw new ho(\"RS blocks mismatch\");\n        if (t !== (f + l) * u + (h + d) * a) throw new ho(\"Total bytes mismatch\");\n        n < u ? (o[0] = f, i[0] = l) : (o[0] = h, i[0] = d);\n    }, t.interleaveWithECBytes = function(e, r, n, o) {\n        var i, a, u, s;\n        if (e.getSizeInBytes() !== n) throw new ho(\"Number of bits and data bytes does not match\");\n        for(var c = 0, f = 0, h = 0, l = new Array, d = 0; d < o; ++d){\n            var p = new Int32Array(1), g = new Int32Array(1);\n            t.getNumDataBytesAndNumECBytesForBlockID(r, n, o, d, p, g);\n            var y = p[0], w = new Uint8Array(y);\n            e.toBytes(8 * c, w, 0, y);\n            var _ = t.generateECBytes(w, g[0]);\n            l.push(new po(w, _)), f = Math.max(f, y), h = Math.max(h, _.length), c += p[0];\n        }\n        if (n !== c) throw new ho(\"Data bytes does not match offset\");\n        var v = new S;\n        for(d = 0; d < f; ++d)try {\n            for(var m = (i = void 0, go(l)), A = m.next(); !A.done; A = m.next()){\n                d < (w = A.value.getDataBytes()).length && v.appendBits(w[d], 8);\n            }\n        } catch (t) {\n            i = {\n                error: t\n            };\n        } finally{\n            try {\n                A && !A.done && (a = m.return) && a.call(m);\n            } finally{\n                if (i) throw i.error;\n            }\n        }\n        for(d = 0; d < h; ++d)try {\n            for(var E = (u = void 0, go(l)), C = E.next(); !C.done; C = E.next()){\n                d < (_ = C.value.getErrorCorrectionBytes()).length && v.appendBits(_[d], 8);\n            }\n        } catch (t) {\n            u = {\n                error: t\n            };\n        } finally{\n            try {\n                C && !C.done && (s = E.return) && s.call(E);\n            } finally{\n                if (u) throw u.error;\n            }\n        }\n        if (r !== v.getSizeInBytes()) throw new ho(\"Interleaving error: \" + r + \" and \" + v.getSizeInBytes() + \" differ.\");\n        return v;\n    }, t.generateECBytes = function(t, e) {\n        for(var r = t.length, n = new Int32Array(r + e), o = 0; o < r; o++)n[o] = 255 & t[o];\n        new io(lt.QR_CODE_FIELD_256).encode(n, e);\n        var i = new Uint8Array(e);\n        for(o = 0; o < e; o++)i[o] = n[r + o];\n        return i;\n    }, t.appendModeInfo = function(t, e) {\n        e.appendBits(t.getBits(), 4);\n    }, t.appendLengthInfo = function(t, e, r, n) {\n        var o = r.getCharacterCountBits(e);\n        if (t >= 1 << o) throw new ho(t + \" is bigger than \" + ((1 << o) - 1));\n        n.appendBits(t, o);\n    }, t.appendBytes = function(e, r, n, o) {\n        switch(r){\n            case Wr.NUMERIC:\n                t.appendNumericBytes(e, n);\n                break;\n            case Wr.ALPHANUMERIC:\n                t.appendAlphanumericBytes(e, n);\n                break;\n            case Wr.BYTE:\n                t.append8BitBytes(e, n, o);\n                break;\n            case Wr.KANJI:\n                t.appendKanjiBytes(e, n);\n                break;\n            default:\n                throw new ho(\"Invalid mode: \" + r);\n        }\n    }, t.getDigit = function(t) {\n        return t.charCodeAt(0) - 48;\n    }, t.isDigit = function(e) {\n        var r = t.getDigit(e);\n        return r >= 0 && r <= 9;\n    }, t.appendNumericBytes = function(e, r) {\n        for(var n = e.length, o = 0; o < n;){\n            var i = t.getDigit(e.charAt(o));\n            if (o + 2 < n) {\n                var a = t.getDigit(e.charAt(o + 1)), u = t.getDigit(e.charAt(o + 2));\n                r.appendBits(100 * i + 10 * a + u, 10), o += 3;\n            } else if (o + 1 < n) {\n                a = t.getDigit(e.charAt(o + 1));\n                r.appendBits(10 * i + a, 7), o += 2;\n            } else r.appendBits(i, 4), o++;\n        }\n    }, t.appendAlphanumericBytes = function(e, r) {\n        for(var n = e.length, o = 0; o < n;){\n            var i = t.getAlphanumericCode(e.charCodeAt(o));\n            if (-1 === i) throw new ho;\n            if (o + 1 < n) {\n                var a = t.getAlphanumericCode(e.charCodeAt(o + 1));\n                if (-1 === a) throw new ho;\n                r.appendBits(45 * i + a, 11), o += 2;\n            } else r.appendBits(i, 6), o++;\n        }\n    }, t.append8BitBytes = function(t, e, r) {\n        var n;\n        try {\n            n = L.encode(t, r);\n        } catch (t) {\n            throw new ho(t);\n        }\n        for(var o = 0, i = n.length; o !== i; o++){\n            var a = n[o];\n            e.appendBits(a, 8);\n        }\n    }, t.appendKanjiBytes = function(t, e) {\n        var r;\n        try {\n            r = L.encode(t, P.SJIS);\n        } catch (t) {\n            throw new ho(t);\n        }\n        for(var n = r.length, o = 0; o < n; o += 2){\n            var i = (255 & r[o]) << 8 & 4294967295 | 255 & r[o + 1], a = -1;\n            if (i >= 33088 && i <= 40956 ? a = i - 33088 : i >= 57408 && i <= 60351 && (a = i - 49472), -1 === a) throw new ho(\"Invalid byte sequence\");\n            var u = 192 * (a >> 8) + (255 & a);\n            e.appendBits(u, 13);\n        }\n    }, t.appendECI = function(t, e) {\n        e.appendBits(Wr.ECI.getBits(), 4), e.appendBits(t.getValue(), 8);\n    }, t.ALPHANUMERIC_TABLE = Int32Array.from([\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        36,\n        -1,\n        -1,\n        -1,\n        37,\n        38,\n        -1,\n        -1,\n        -1,\n        -1,\n        39,\n        40,\n        -1,\n        41,\n        42,\n        43,\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        44,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1,\n        10,\n        11,\n        12,\n        13,\n        14,\n        15,\n        16,\n        17,\n        18,\n        19,\n        20,\n        21,\n        22,\n        23,\n        24,\n        25,\n        26,\n        27,\n        28,\n        29,\n        30,\n        31,\n        32,\n        33,\n        34,\n        35,\n        -1,\n        -1,\n        -1,\n        -1,\n        -1\n    ]), t.DEFAULT_BYTE_MODE_ENCODING = P.UTF8.getName();\n}();\nvar yo = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}();\n!function(t) {\n    function e(e, r, n, o, i, a, u, s) {\n        var c = t.call(this, a, u) || this;\n        if (c.yuvData = e, c.dataWidth = r, c.dataHeight = n, c.left = o, c.top = i, o + a > r || i + u > n) throw new l(\"Crop rectangle does not fit within image data.\");\n        return s && c.reverseHorizontal(a, u), c;\n    }\n    yo(e, t), e.prototype.getRow = function(t, e) {\n        if (t < 0 || t >= this.getHeight()) throw new l(\"Requested row is outside the image: \" + t);\n        var r = this.getWidth();\n        (null == e || e.length < r) && (e = new Uint8ClampedArray(r));\n        var n = (t + this.top) * this.dataWidth + this.left;\n        return w.arraycopy(this.yuvData, n, e, 0, r), e;\n    }, e.prototype.getMatrix = function() {\n        var t = this.getWidth(), e = this.getHeight();\n        if (t === this.dataWidth && e === this.dataHeight) return this.yuvData;\n        var r = t * e, n = new Uint8ClampedArray(r), o = this.top * this.dataWidth + this.left;\n        if (t === this.dataWidth) return w.arraycopy(this.yuvData, o, n, 0, r), n;\n        for(var i = 0; i < e; i++){\n            var a = i * t;\n            w.arraycopy(this.yuvData, o, n, a, t), o += this.dataWidth;\n        }\n        return n;\n    }, e.prototype.isCropSupported = function() {\n        return !0;\n    }, e.prototype.crop = function(t, r, n, o) {\n        return new e(this.yuvData, this.dataWidth, this.dataHeight, this.left + t, this.top + r, n, o, !1);\n    }, e.prototype.renderThumbnail = function() {\n        for(var t = this.getWidth() / e.THUMBNAIL_SCALE_FACTOR, r = this.getHeight() / e.THUMBNAIL_SCALE_FACTOR, n = new Int32Array(t * r), o = this.yuvData, i = this.top * this.dataWidth + this.left, a = 0; a < r; a++){\n            for(var u = a * t, s = 0; s < t; s++){\n                var c = 255 & o[i + s * e.THUMBNAIL_SCALE_FACTOR];\n                n[u + s] = 4278190080 | 65793 * c;\n            }\n            i += this.dataWidth * e.THUMBNAIL_SCALE_FACTOR;\n        }\n        return n;\n    }, e.prototype.getThumbnailWidth = function() {\n        return this.getWidth() / e.THUMBNAIL_SCALE_FACTOR;\n    }, e.prototype.getThumbnailHeight = function() {\n        return this.getHeight() / e.THUMBNAIL_SCALE_FACTOR;\n    }, e.prototype.reverseHorizontal = function(t, e) {\n        for(var r = this.yuvData, n = 0, o = this.top * this.dataWidth + this.left; n < e; n++, o += this.dataWidth)for(var i = o + t / 2, a = o, u = o + t - 1; a < i; a++, u--){\n            var s = r[a];\n            r[a] = r[u], r[u] = s;\n        }\n    }, e.prototype.invert = function() {\n        return new Y(this);\n    }, e.THUMBNAIL_SCALE_FACTOR = 2;\n}(j);\nvar wo = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}();\n!function(t) {\n    function e(e, r, n, o, i, a, u) {\n        var s = t.call(this, r, n) || this;\n        if (s.dataWidth = o, s.dataHeight = i, s.left = a, s.top = u, 4 === e.BYTES_PER_ELEMENT) {\n            for(var c = r * n, f = new Uint8ClampedArray(c), h = 0; h < c; h++){\n                var d = e[h], p = d >> 16 & 255, g = d >> 7 & 510, y = 255 & d;\n                f[h] = (p + g + y) / 4 & 255;\n            }\n            s.luminances = f;\n        } else s.luminances = e;\n        if (void 0 === o && (s.dataWidth = r), void 0 === i && (s.dataHeight = n), void 0 === a && (s.left = 0), void 0 === u && (s.top = 0), s.left + r > s.dataWidth || s.top + n > s.dataHeight) throw new l(\"Crop rectangle does not fit within image data.\");\n        return s;\n    }\n    wo(e, t), e.prototype.getRow = function(t, e) {\n        if (t < 0 || t >= this.getHeight()) throw new l(\"Requested row is outside the image: \" + t);\n        var r = this.getWidth();\n        (null == e || e.length < r) && (e = new Uint8ClampedArray(r));\n        var n = (t + this.top) * this.dataWidth + this.left;\n        return w.arraycopy(this.luminances, n, e, 0, r), e;\n    }, e.prototype.getMatrix = function() {\n        var t = this.getWidth(), e = this.getHeight();\n        if (t === this.dataWidth && e === this.dataHeight) return this.luminances;\n        var r = t * e, n = new Uint8ClampedArray(r), o = this.top * this.dataWidth + this.left;\n        if (t === this.dataWidth) return w.arraycopy(this.luminances, o, n, 0, r), n;\n        for(var i = 0; i < e; i++){\n            var a = i * t;\n            w.arraycopy(this.luminances, o, n, a, t), o += this.dataWidth;\n        }\n        return n;\n    }, e.prototype.isCropSupported = function() {\n        return !0;\n    }, e.prototype.crop = function(t, r, n, o) {\n        return new e(this.luminances, n, o, this.dataWidth, this.dataHeight, this.left + t, this.top + r);\n    }, e.prototype.invert = function() {\n        return new Y(this);\n    };\n}(j);\nvar _o = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}();\n!function(t) {\n    function e() {\n        return null !== t && t.apply(this, arguments) || this;\n    }\n    _o(e, t), e.forName = function(t) {\n        return this.getCharacterSetECIByName(t);\n    };\n}(P);\nvar vo = function() {\n    function t(t) {\n        this.previous = t;\n    }\n    return t.prototype.getPrevious = function() {\n        return this.previous;\n    }, t;\n}(), mo = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), Ao = function(t) {\n    function e(e, r, n) {\n        var o = t.call(this, e) || this;\n        return o.value = r, o.bitCount = n, o;\n    }\n    return mo(e, t), e.prototype.appendTo = function(t, e) {\n        t.appendBits(this.value, this.bitCount);\n    }, e.prototype.add = function(t, r) {\n        return new e(this, t, r);\n    }, e.prototype.addBinaryShift = function(t, r) {\n        return console.warn(\"addBinaryShift on SimpleToken, this simply returns a copy of this token\"), new e(this, t, r);\n    }, e.prototype.toString = function() {\n        var t = this.value & (1 << this.bitCount) - 1;\n        return t |= 1 << this.bitCount, \"<\" + I.toBinaryString(t | 1 << this.bitCount).substring(1) + \">\";\n    }, e;\n}(vo), Eo = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}();\n!function(t) {\n    function e(e, r, n) {\n        var o = t.call(this, e, 0, 0) || this;\n        return o.binaryShiftStart = r, o.binaryShiftByteCount = n, o;\n    }\n    Eo(e, t), e.prototype.appendTo = function(t, e) {\n        for(var r = 0; r < this.binaryShiftByteCount; r++)(0 === r || 31 === r && this.binaryShiftByteCount <= 62) && (t.appendBits(31, 5), this.binaryShiftByteCount > 62 ? t.appendBits(this.binaryShiftByteCount - 31, 16) : 0 === r ? t.appendBits(Math.min(this.binaryShiftByteCount, 31), 5) : t.appendBits(this.binaryShiftByteCount - 31, 5)), t.appendBits(e[this.binaryShiftStart + r], 8);\n    }, e.prototype.addBinaryShift = function(t, r) {\n        return new e(this, t, r);\n    }, e.prototype.toString = function() {\n        return \"<\" + this.binaryShiftStart + \"::\" + (this.binaryShiftStart + this.binaryShiftByteCount - 1) + \">\";\n    };\n}(Ao);\nnew Ao(null, 0, 0);\nvar Co = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n!function(t) {\n    var e, r;\n    try {\n        for(var n = Co(t), o = n.next(); !o.done; o = n.next()){\n            var i = o.value;\n            C.fill(i, -1);\n        }\n    } catch (t) {\n        e = {\n            error: t\n        };\n    } finally{\n        try {\n            o && !o.done && (r = n.return) && r.call(n);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    t[0][4] = 0, t[1][4] = 0, t[1][0] = 28, t[3][4] = 0, t[2][4] = 0, t[2][0] = 15;\n}(C.createInt32Array(6, 6)), function(t) {\n    var e = F.getCharCode(\" \"), r = F.getCharCode(\".\"), n = F.getCharCode(\",\");\n    t[0][e] = 1;\n    for(var o = F.getCharCode(\"Z\"), i = F.getCharCode(\"A\"), a = i; a <= o; a++)t[0][a] = a - i + 2;\n    t[1][e] = 1;\n    var u = F.getCharCode(\"z\"), s = F.getCharCode(\"a\");\n    for(a = s; a <= u; a++)t[1][a] = a - s + 2;\n    t[2][e] = 1;\n    var c = F.getCharCode(\"9\"), f = F.getCharCode(\"0\");\n    for(a = f; a <= c; a++)t[2][a] = a - f + 2;\n    t[2][n] = 12, t[2][r] = 13;\n    for(var h = [\n        \"\\x00\",\n        \" \",\n        \"\\x01\",\n        \"\\x02\",\n        \"\\x03\",\n        \"\\x04\",\n        \"\\x05\",\n        \"\\x06\",\n        \"\\x07\",\n        \"\\b\",\n        \"\t\",\n        \"\\n\",\n        \"\\v\",\n        \"\\f\",\n        \"\\r\",\n        \"\\x1b\",\n        \"\\x1c\",\n        \"\\x1d\",\n        \"\\x1e\",\n        \"\\x1f\",\n        \"@\",\n        \"\\\\\",\n        \"^\",\n        \"_\",\n        \"`\",\n        \"|\",\n        \"~\",\n        \"\\x7f\"\n    ], l = 0; l < h.length; l++)t[3][F.getCharCode(h[l])] = l;\n    var d = [\n        \"\\x00\",\n        \"\\r\",\n        \"\\x00\",\n        \"\\x00\",\n        \"\\x00\",\n        \"\\x00\",\n        \"!\",\n        \"'\",\n        \"#\",\n        \"$\",\n        \"%\",\n        \"&\",\n        \"'\",\n        \"(\",\n        \")\",\n        \"*\",\n        \"+\",\n        \",\",\n        \"-\",\n        \".\",\n        \"/\",\n        \":\",\n        \";\",\n        \"<\",\n        \"=\",\n        \">\",\n        \"?\",\n        \"[\",\n        \"]\",\n        \"{\",\n        \"}\"\n    ];\n    for(l = 0; l < d.length; l++)F.getCharCode(d[l]) > 0 && (t[4][F.getCharCode(d[l])] = l);\n}(C.createInt32Array(5, 256));\nvar Io = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), So = function(t) {\n    function e(r) {\n        var n = t.call(this, r.width, r.height) || this;\n        return n.canvas = r, n.buffer = e.makeBufferFromCanvasImageData(r), n;\n    }\n    return Io(e, t), e.makeBufferFromCanvasImageData = function(t) {\n        var r = t.getContext(\"2d\");\n        if (!r) throw new Error(\"Couldn't get canvas context.\");\n        var n = r.getImageData(0, 0, t.width, t.height);\n        return e.toGrayscaleBuffer(n.data, t.width, t.height);\n    }, e.toGrayscaleBuffer = function(t, e, r) {\n        for(var n = new Uint8ClampedArray(e * r), o = 0, i = 0, a = t.length; o < a; o += 4, i++){\n            var u = void 0;\n            if (0 === t[o + 3]) u = 255;\n            else u = 306 * t[o] + 601 * t[o + 1] + 117 * t[o + 2] + 512 >> 10;\n            n[i] = u;\n        }\n        return n;\n    }, e.prototype.getRow = function(t, e) {\n        if (t < 0 || t >= this.getHeight()) throw new l(\"Requested row is outside the image: \" + t);\n        var r = this.getWidth(), n = t * r;\n        return null === e ? e = this.buffer.slice(n, n + r) : (e.length < r && (e = new Uint8ClampedArray(r)), e.set(this.buffer.slice(n, n + r))), e;\n    }, e.prototype.getMatrix = function() {\n        return this.buffer;\n    }, e.prototype.isCropSupported = function() {\n        return !0;\n    }, e.prototype.crop = function(e, r, n, o) {\n        return t.prototype.crop.call(this, e, r, n, o), this;\n    }, e.prototype.isRotateSupported = function() {\n        return !0;\n    }, e.prototype.rotateCounterClockwise = function() {\n        return this.rotate(-90), this;\n    }, e.prototype.rotateCounterClockwise45 = function() {\n        return this.rotate(-45), this;\n    }, e.prototype.invert = function() {\n        return new Y(this);\n    }, e.prototype.getTempCanvasElement = function() {\n        if (null === this.tempCanvasElement) {\n            var t = this.canvas.ownerDocument.createElement(\"canvas\");\n            t.width = this.canvas.width, t.height = this.canvas.height, this.tempCanvasElement = t;\n        }\n        return this.tempCanvasElement;\n    }, e.prototype.rotate = function(t) {\n        var r = this.getTempCanvasElement();\n        if (!r) throw new Error(\"Could not create a Canvas element.\");\n        var n = t * e.DEGREE_TO_RADIANS, o = this.canvas.width, i = this.canvas.height, a = Math.ceil(Math.abs(Math.cos(n)) * o + Math.abs(Math.sin(n)) * i), u = Math.ceil(Math.abs(Math.sin(n)) * o + Math.abs(Math.cos(n)) * i);\n        r.width = a, r.height = u;\n        var s = r.getContext(\"2d\");\n        if (!s) throw new Error(\"Could not create a Convas Context element.\");\n        return s.translate(a / 2, u / 2), s.rotate(n), s.drawImage(this.canvas, o / -2, i / -2), this.buffer = e.makeBufferFromCanvasImageData(r), this;\n    }, e.DEGREE_TO_RADIANS = Math.PI / 180, e;\n}(j);\nfunction Oo() {\n    return \"undefined\" != typeof navigator;\n}\nfunction To() {\n    return !!(Oo() && navigator.mediaDevices && navigator.mediaDevices.enumerateDevices);\n}\nvar bo = function() {\n    return bo = Object.assign || function(t) {\n        for(var e, r = 1, n = arguments.length; r < n; r++)for(var o in e = arguments[r])Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);\n        return t;\n    }, bo.apply(this, arguments);\n}, Ro = function(t, e, r, n) {\n    return new (r || (r = Promise))(function(o, i) {\n        function a(t) {\n            try {\n                s(n.next(t));\n            } catch (t) {\n                i(t);\n            }\n        }\n        function u(t) {\n            try {\n                s(n.throw(t));\n            } catch (t) {\n                i(t);\n            }\n        }\n        function s(t) {\n            var e;\n            t.done ? o(t.value) : (e = t.value, e instanceof r ? e : new r(function(t) {\n                t(e);\n            })).then(a, u);\n        }\n        s((n = n.apply(t, e || [])).next());\n    });\n}, No = function(t, e) {\n    var r, n, o, i, a = {\n        label: 0,\n        sent: function() {\n            if (1 & o[0]) throw o[1];\n            return o[1];\n        },\n        trys: [],\n        ops: []\n    };\n    return i = {\n        next: u(0),\n        throw: u(1),\n        return: u(2)\n    }, \"function\" == typeof Symbol && (i[Symbol.iterator] = function() {\n        return this;\n    }), i;\n    function u(i) {\n        return function(u) {\n            return function(i) {\n                if (r) throw new TypeError(\"Generator is already executing.\");\n                for(; a;)try {\n                    if (r = 1, n && (o = 2 & i[0] ? n.return : i[0] ? n.throw || ((o = n.return) && o.call(n), 0) : n.next) && !(o = o.call(n, i[1])).done) return o;\n                    switch(n = 0, o && (i = [\n                        2 & i[0],\n                        o.value\n                    ]), i[0]){\n                        case 0:\n                        case 1:\n                            o = i;\n                            break;\n                        case 4:\n                            return a.label++, {\n                                value: i[1],\n                                done: !1\n                            };\n                        case 5:\n                            a.label++, n = i[1], i = [\n                                0\n                            ];\n                            continue;\n                        case 7:\n                            i = a.ops.pop(), a.trys.pop();\n                            continue;\n                        default:\n                            if (!(o = a.trys, (o = o.length > 0 && o[o.length - 1]) || 6 !== i[0] && 2 !== i[0])) {\n                                a = 0;\n                                continue;\n                            }\n                            if (3 === i[0] && (!o || i[1] > o[0] && i[1] < o[3])) {\n                                a.label = i[1];\n                                break;\n                            }\n                            if (6 === i[0] && a.label < o[1]) {\n                                a.label = o[1], o = i;\n                                break;\n                            }\n                            if (o && a.label < o[2]) {\n                                a.label = o[2], a.ops.push(i);\n                                break;\n                            }\n                            o[2] && a.ops.pop(), a.trys.pop();\n                            continue;\n                    }\n                    i = e.call(t, a);\n                } catch (t) {\n                    i = [\n                        6,\n                        t\n                    ], n = 0;\n                } finally{\n                    r = o = 0;\n                }\n                if (5 & i[0]) throw i[1];\n                return {\n                    value: i[0] ? i[1] : void 0,\n                    done: !0\n                };\n            }([\n                i,\n                u\n            ]);\n        };\n    }\n}, Do = function(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}, Po = {\n    delayBetweenScanAttempts: 500,\n    delayBetweenScanSuccess: 500,\n    tryPlayVideoTimeout: 5e3\n}, Mo = function() {\n    function t(t, e, r) {\n        void 0 === e && (e = new Map), void 0 === r && (r = {}), this.reader = t, this.hints = e, this.options = bo(bo({}, Po), r);\n    }\n    return Object.defineProperty(t.prototype, \"possibleFormats\", {\n        set: function(t) {\n            this.hints.set(T.POSSIBLE_FORMATS, t);\n        },\n        enumerable: !1,\n        configurable: !0\n    }), t.addVideoSource = function(t, e) {\n        try {\n            t.srcObject = e;\n        } catch (r) {\n            t.src = URL.createObjectURL(e);\n        }\n    }, t.mediaStreamSetTorch = function(t, e) {\n        return Ro(this, void 0, void 0, function() {\n            return No(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        return [\n                            4,\n                            t.applyConstraints({\n                                advanced: [\n                                    {\n                                        fillLightMode: e ? \"flash\" : \"off\",\n                                        torch: !!e\n                                    }\n                                ]\n                            })\n                        ];\n                    case 1:\n                        return r.sent(), [\n                            2\n                        ];\n                }\n            });\n        });\n    }, t.mediaStreamIsTorchCompatible = function(e) {\n        var r, n, o = e.getVideoTracks();\n        try {\n            for(var i = Do(o), a = i.next(); !a.done; a = i.next()){\n                var u = a.value;\n                if (t.mediaStreamIsTorchCompatibleTrack(u)) return !0;\n            }\n        } catch (t) {\n            r = {\n                error: t\n            };\n        } finally{\n            try {\n                a && !a.done && (n = i.return) && n.call(i);\n            } finally{\n                if (r) throw r.error;\n            }\n        }\n        return !1;\n    }, t.mediaStreamIsTorchCompatibleTrack = function(t) {\n        try {\n            return \"torch\" in t.getCapabilities();\n        } catch (t) {\n            return console.error(t), console.warn(\"Your browser may be not fully compatible with WebRTC and/or ImageCapture specs. Torch will not be available.\"), !1;\n        }\n    }, t.isVideoPlaying = function(t) {\n        return t.currentTime > 0 && !t.paused && t.readyState > 2;\n    }, t.getMediaElement = function(t, e) {\n        var r = document.getElementById(t);\n        if (!r) throw new f(\"element with id '\" + t + \"' not found\");\n        if (r.nodeName.toLowerCase() !== e.toLowerCase()) throw new f(\"element with id '\" + t + \"' must be an \" + e + \" element\");\n        return r;\n    }, t.createVideoElement = function(e) {\n        if (e instanceof HTMLVideoElement) return e;\n        if (\"string\" == typeof e) return t.getMediaElement(e, \"video\");\n        if (!e && \"undefined\" != typeof document) {\n            var r = document.createElement(\"video\");\n            return r.width = 200, r.height = 200, r;\n        }\n        throw new Error(\"Couldn't get videoElement from videoSource!\");\n    }, t.prepareImageElement = function(e) {\n        if (e instanceof HTMLImageElement) return e;\n        if (\"string\" == typeof e) return t.getMediaElement(e, \"img\");\n        if (void 0 === e) {\n            var r = document.createElement(\"img\");\n            return r.width = 200, r.height = 200, r;\n        }\n        throw new Error(\"Couldn't get imageElement from imageSource!\");\n    }, t.prepareVideoElement = function(e) {\n        var r = t.createVideoElement(e);\n        return r.setAttribute(\"autoplay\", \"true\"), r.setAttribute(\"muted\", \"true\"), r.setAttribute(\"playsinline\", \"true\"), r;\n    }, t.isImageLoaded = function(t) {\n        return !!t.complete && 0 !== t.naturalWidth;\n    }, t.createBinaryBitmapFromCanvas = function(t) {\n        var e = new So(t), r = new W(e);\n        return new d(r);\n    }, t.drawImageOnCanvas = function(t, e) {\n        t.drawImage(e, 0, 0);\n    }, t.getMediaElementDimensions = function(t) {\n        if (t instanceof HTMLVideoElement) return {\n            height: t.videoHeight,\n            width: t.videoWidth\n        };\n        if (t instanceof HTMLImageElement) return {\n            height: t.naturalHeight || t.height,\n            width: t.naturalWidth || t.width\n        };\n        throw new Error(\"Couldn't find the Source's dimentions!\");\n    }, t.createCaptureCanvas = function(e) {\n        if (!e) throw new f(\"Cannot create a capture canvas without a media element.\");\n        if (\"undefined\" == typeof document) throw new Error('The page \"Document\" is undefined, make sure you\\'re running in a browser.');\n        var r = document.createElement(\"canvas\"), n = t.getMediaElementDimensions(e), o = n.width, i = n.height;\n        return r.style.width = o + \"px\", r.style.height = i + \"px\", r.width = o, r.height = i, r;\n    }, t.tryPlayVideo = function(e) {\n        return Ro(this, void 0, void 0, function() {\n            var r;\n            return No(this, function(n) {\n                switch(n.label){\n                    case 0:\n                        if (null == e ? void 0 : e.ended) return console.error(\"Trying to play video that has ended.\"), [\n                            2,\n                            !1\n                        ];\n                        if (t.isVideoPlaying(e)) return console.warn(\"Trying to play video that is already playing.\"), [\n                            2,\n                            !0\n                        ];\n                        n.label = 1;\n                    case 1:\n                        return n.trys.push([\n                            1,\n                            3,\n                            ,\n                            4\n                        ]), [\n                            4,\n                            e.play()\n                        ];\n                    case 2:\n                        return n.sent(), [\n                            2,\n                            !0\n                        ];\n                    case 3:\n                        return r = n.sent(), console.warn(\"It was not possible to play the video.\", r), [\n                            2,\n                            !1\n                        ];\n                    case 4:\n                        return [\n                            2\n                        ];\n                }\n            });\n        });\n    }, t.createCanvasFromMediaElement = function(e) {\n        var r = t.createCaptureCanvas(e), n = r.getContext(\"2d\");\n        if (!n) throw new Error(\"Couldn't find Canvas 2D Context.\");\n        return t.drawImageOnCanvas(n, e), r;\n    }, t.createBinaryBitmapFromMediaElem = function(e) {\n        var r = t.createCanvasFromMediaElement(e);\n        return t.createBinaryBitmapFromCanvas(r);\n    }, t.destroyImageElement = function(t) {\n        t.src = \"\", t.removeAttribute(\"src\"), t = void 0;\n    }, t.listVideoInputDevices = function() {\n        return Ro(this, void 0, void 0, function() {\n            var t, e, r, n, o, i, a, u, s, c, f, h;\n            return No(this, function(l) {\n                switch(l.label){\n                    case 0:\n                        if (!Oo()) throw new Error(\"Can't enumerate devices, navigator is not present.\");\n                        if (!To()) throw new Error(\"Can't enumerate devices, method not supported.\");\n                        return [\n                            4,\n                            navigator.mediaDevices.enumerateDevices()\n                        ];\n                    case 1:\n                        t = l.sent(), e = [];\n                        try {\n                            for(r = Do(t), n = r.next(); !n.done; n = r.next())o = n.value, \"videoinput\" === (i = \"video\" === o.kind ? \"videoinput\" : o.kind) && (a = o.deviceId || o.id, u = o.label || \"Video device \" + (e.length + 1), s = o.groupId, c = {\n                                deviceId: a,\n                                label: u,\n                                kind: i,\n                                groupId: s\n                            }, e.push(c));\n                        } catch (t) {\n                            f = {\n                                error: t\n                            };\n                        } finally{\n                            try {\n                                n && !n.done && (h = r.return) && h.call(r);\n                            } finally{\n                                if (f) throw f.error;\n                            }\n                        }\n                        return [\n                            2,\n                            e\n                        ];\n                }\n            });\n        });\n    }, t.findDeviceById = function(e) {\n        return Ro(this, void 0, void 0, function() {\n            var r;\n            return No(this, function(n) {\n                switch(n.label){\n                    case 0:\n                        return [\n                            4,\n                            t.listVideoInputDevices()\n                        ];\n                    case 1:\n                        return (r = n.sent()) ? [\n                            2,\n                            r.find(function(t) {\n                                return t.deviceId === e;\n                            })\n                        ] : [\n                            2\n                        ];\n                }\n            });\n        });\n    }, t.cleanVideoSource = function(t) {\n        if (t) {\n            try {\n                t.srcObject = null;\n            } catch (e) {\n                t.src = \"\";\n            }\n            t && t.removeAttribute(\"src\");\n        }\n    }, t.playVideoOnLoadAsync = function(e, r) {\n        return Ro(this, void 0, void 0, function() {\n            return No(this, function(n) {\n                switch(n.label){\n                    case 0:\n                        return [\n                            4,\n                            t.tryPlayVideo(e)\n                        ];\n                    case 1:\n                        return n.sent() ? [\n                            2,\n                            !0\n                        ] : [\n                            2,\n                            new Promise(function(n, o) {\n                                var i = setTimeout(function() {\n                                    t.isVideoPlaying(e) || (o(!1), e.removeEventListener(\"canplay\", a));\n                                }, r), a = function() {\n                                    t.tryPlayVideo(e).then(function(t) {\n                                        clearTimeout(i), e.removeEventListener(\"canplay\", a), n(t);\n                                    });\n                                };\n                                e.addEventListener(\"canplay\", a);\n                            })\n                        ];\n                }\n            });\n        });\n    }, t.attachStreamToVideo = function(e, r, n) {\n        return void 0 === n && (n = 5e3), Ro(this, void 0, void 0, function() {\n            var o;\n            return No(this, function(i) {\n                switch(i.label){\n                    case 0:\n                        return o = t.prepareVideoElement(r), t.addVideoSource(o, e), [\n                            4,\n                            t.playVideoOnLoadAsync(o, n)\n                        ];\n                    case 1:\n                        return i.sent(), [\n                            2,\n                            o\n                        ];\n                }\n            });\n        });\n    }, t._waitImageLoad = function(e) {\n        return new Promise(function(r, n) {\n            var o = setTimeout(function() {\n                t.isImageLoaded(e) || (e.removeEventListener(\"load\", i), n());\n            }, 1e4), i = function() {\n                clearTimeout(o), e.removeEventListener(\"load\", i), r();\n            };\n            e.addEventListener(\"load\", i);\n        });\n    }, t.checkCallbackFnOrThrow = function(t) {\n        if (!t) throw new f(\"`callbackFn` is a required parameter, you cannot capture results without it.\");\n    }, t.disposeMediaStream = function(t) {\n        t.getVideoTracks().forEach(function(t) {\n            return t.stop();\n        }), t = void 0;\n    }, t.prototype.decode = function(e) {\n        var r = t.createCanvasFromMediaElement(e);\n        return this.decodeFromCanvas(r);\n    }, t.prototype.decodeBitmap = function(t) {\n        return this.reader.decode(t, this.hints);\n    }, t.prototype.decodeFromCanvas = function(e) {\n        var r = t.createBinaryBitmapFromCanvas(e);\n        return this.decodeBitmap(r);\n    }, t.prototype.decodeFromImageElement = function(e) {\n        return Ro(this, void 0, void 0, function() {\n            var r;\n            return No(this, function(n) {\n                switch(n.label){\n                    case 0:\n                        if (!e) throw new f(\"An image element must be provided.\");\n                        return r = t.prepareImageElement(e), [\n                            4,\n                            this._decodeOnLoadImage(r)\n                        ];\n                    case 1:\n                        return [\n                            2,\n                            n.sent()\n                        ];\n                }\n            });\n        });\n    }, t.prototype.decodeFromImageUrl = function(e) {\n        return Ro(this, void 0, void 0, function() {\n            var r;\n            return No(this, function(n) {\n                switch(n.label){\n                    case 0:\n                        if (!e) throw new f(\"An URL must be provided.\");\n                        (r = t.prepareImageElement()).src = e, n.label = 1;\n                    case 1:\n                        return n.trys.push([\n                            1,\n                            ,\n                            3,\n                            4\n                        ]), [\n                            4,\n                            this.decodeFromImageElement(r)\n                        ];\n                    case 2:\n                        return [\n                            2,\n                            n.sent()\n                        ];\n                    case 3:\n                        return t.destroyImageElement(r), [\n                            7\n                        ];\n                    case 4:\n                        return [\n                            2\n                        ];\n                }\n            });\n        });\n    }, t.prototype.decodeFromConstraints = function(e, r, n) {\n        return Ro(this, void 0, void 0, function() {\n            var o, i;\n            return No(this, function(a) {\n                switch(a.label){\n                    case 0:\n                        return t.checkCallbackFnOrThrow(n), [\n                            4,\n                            navigator.mediaDevices.getUserMedia(e)\n                        ];\n                    case 1:\n                        o = a.sent(), a.label = 2;\n                    case 2:\n                        return a.trys.push([\n                            2,\n                            4,\n                            ,\n                            5\n                        ]), [\n                            4,\n                            this.decodeFromStream(o, r, n)\n                        ];\n                    case 3:\n                        return [\n                            2,\n                            a.sent()\n                        ];\n                    case 4:\n                        throw i = a.sent(), t.disposeMediaStream(o), i;\n                    case 5:\n                        return [\n                            2\n                        ];\n                }\n            });\n        });\n    }, t.prototype.decodeFromStream = function(e, r, n) {\n        return Ro(this, void 0, void 0, function() {\n            var o, i, a, u, s, c, f, h, l, d, p = this;\n            return No(this, function(g) {\n                switch(g.label){\n                    case 0:\n                        return t.checkCallbackFnOrThrow(n), o = this.options.tryPlayVideoTimeout, [\n                            4,\n                            t.attachStreamToVideo(e, r, o)\n                        ];\n                    case 1:\n                        return i = g.sent(), a = function() {\n                            var t, r;\n                            try {\n                                for(var n = Do(e.getVideoTracks()), o = n.next(); !o.done; o = n.next()){\n                                    o.value.stop();\n                                }\n                            } catch (e) {\n                                t = {\n                                    error: e\n                                };\n                            } finally{\n                                try {\n                                    o && !o.done && (r = n.return) && r.call(n);\n                                } finally{\n                                    if (t) throw t.error;\n                                }\n                            }\n                            e = void 0;\n                        }, u = function() {\n                            a(), t.cleanVideoSource(i);\n                        }, s = this.scan(i, n, u), c = e.getVideoTracks(), f = bo(bo({}, s), {\n                            stop: function() {\n                                s.stop();\n                            },\n                            streamVideoConstraintsApply: function(t, e) {\n                                return Ro(this, void 0, void 0, function() {\n                                    var r, n, o, i, a, u;\n                                    return No(this, function(s) {\n                                        switch(s.label){\n                                            case 0:\n                                                r = e ? c.filter(e) : c, s.label = 1;\n                                            case 1:\n                                                s.trys.push([\n                                                    1,\n                                                    6,\n                                                    7,\n                                                    8\n                                                ]), n = Do(r), o = n.next(), s.label = 2;\n                                            case 2:\n                                                return o.done ? [\n                                                    3,\n                                                    5\n                                                ] : [\n                                                    4,\n                                                    o.value.applyConstraints(t)\n                                                ];\n                                            case 3:\n                                                s.sent(), s.label = 4;\n                                            case 4:\n                                                return o = n.next(), [\n                                                    3,\n                                                    2\n                                                ];\n                                            case 5:\n                                                return [\n                                                    3,\n                                                    8\n                                                ];\n                                            case 6:\n                                                return i = s.sent(), a = {\n                                                    error: i\n                                                }, [\n                                                    3,\n                                                    8\n                                                ];\n                                            case 7:\n                                                try {\n                                                    o && !o.done && (u = n.return) && u.call(n);\n                                                } finally{\n                                                    if (a) throw a.error;\n                                                }\n                                                return [\n                                                    7\n                                                ];\n                                            case 8:\n                                                return [\n                                                    2\n                                                ];\n                                        }\n                                    });\n                                });\n                            },\n                            streamVideoConstraintsGet: function(t) {\n                                return c.find(t).getConstraints();\n                            },\n                            streamVideoSettingsGet: function(t) {\n                                return c.find(t).getSettings();\n                            },\n                            streamVideoCapabilitiesGet: function(t) {\n                                return c.find(t).getCapabilities();\n                            }\n                        }), t.mediaStreamIsTorchCompatible(e) && (h = null == c ? void 0 : c.find(function(e) {\n                            return t.mediaStreamIsTorchCompatibleTrack(e);\n                        }), l = function(e) {\n                            return Ro(p, void 0, void 0, function() {\n                                return No(this, function(r) {\n                                    switch(r.label){\n                                        case 0:\n                                            return [\n                                                4,\n                                                t.mediaStreamSetTorch(h, e)\n                                            ];\n                                        case 1:\n                                            return r.sent(), [\n                                                2\n                                            ];\n                                    }\n                                });\n                            });\n                        }, f.switchTorch = l, d = function() {\n                            s.stop(), l(!1);\n                        }, f.stop = d), [\n                            2,\n                            f\n                        ];\n                }\n            });\n        });\n    }, t.prototype.decodeFromVideoDevice = function(e, r, n) {\n        return Ro(this, void 0, void 0, function() {\n            var o;\n            return No(this, function(i) {\n                switch(i.label){\n                    case 0:\n                        return t.checkCallbackFnOrThrow(n), o = {\n                            video: e ? {\n                                deviceId: {\n                                    exact: e\n                                }\n                            } : {\n                                facingMode: \"environment\"\n                            }\n                        }, [\n                            4,\n                            this.decodeFromConstraints(o, r, n)\n                        ];\n                    case 1:\n                        return [\n                            2,\n                            i.sent()\n                        ];\n                }\n            });\n        });\n    }, t.prototype.decodeFromVideoElement = function(e, r) {\n        return Ro(this, void 0, void 0, function() {\n            var n, o;\n            return No(this, function(i) {\n                switch(i.label){\n                    case 0:\n                        if (t.checkCallbackFnOrThrow(r), !e) throw new f(\"A video element must be provided.\");\n                        return n = t.prepareVideoElement(e), o = this.options.tryPlayVideoTimeout, [\n                            4,\n                            t.playVideoOnLoadAsync(n, o)\n                        ];\n                    case 1:\n                        return i.sent(), [\n                            2,\n                            this.scan(n, r)\n                        ];\n                }\n            });\n        });\n    }, t.prototype.decodeFromVideoUrl = function(e, r) {\n        return Ro(this, void 0, void 0, function() {\n            var n, o, i;\n            return No(this, function(a) {\n                switch(a.label){\n                    case 0:\n                        if (t.checkCallbackFnOrThrow(r), !e) throw new f(\"An URL must be provided.\");\n                        return (n = t.prepareVideoElement()).src = e, o = function() {\n                            t.cleanVideoSource(n);\n                        }, i = this.options.tryPlayVideoTimeout, [\n                            4,\n                            t.playVideoOnLoadAsync(n, i)\n                        ];\n                    case 1:\n                        return a.sent(), [\n                            2,\n                            this.scan(n, r, o)\n                        ];\n                }\n            });\n        });\n    }, t.prototype.decodeOnceFromConstraints = function(t, e) {\n        return Ro(this, void 0, void 0, function() {\n            var r;\n            return No(this, function(n) {\n                switch(n.label){\n                    case 0:\n                        return [\n                            4,\n                            navigator.mediaDevices.getUserMedia(t)\n                        ];\n                    case 1:\n                        return r = n.sent(), [\n                            4,\n                            this.decodeOnceFromStream(r, e)\n                        ];\n                    case 2:\n                        return [\n                            2,\n                            n.sent()\n                        ];\n                }\n            });\n        });\n    }, t.prototype.decodeOnceFromStream = function(e, r) {\n        return Ro(this, void 0, void 0, function() {\n            var n, o;\n            return No(this, function(i) {\n                switch(i.label){\n                    case 0:\n                        return n = Boolean(r), [\n                            4,\n                            t.attachStreamToVideo(e, r)\n                        ];\n                    case 1:\n                        o = i.sent(), i.label = 2;\n                    case 2:\n                        return i.trys.push([\n                            2,\n                            ,\n                            4,\n                            5\n                        ]), [\n                            4,\n                            this.scanOneResult(o)\n                        ];\n                    case 3:\n                        return [\n                            2,\n                            i.sent()\n                        ];\n                    case 4:\n                        return n || t.cleanVideoSource(o), [\n                            7\n                        ];\n                    case 5:\n                        return [\n                            2\n                        ];\n                }\n            });\n        });\n    }, t.prototype.decodeOnceFromVideoDevice = function(t, e) {\n        return Ro(this, void 0, void 0, function() {\n            var r;\n            return No(this, function(n) {\n                switch(n.label){\n                    case 0:\n                        return r = {\n                            video: t ? {\n                                deviceId: {\n                                    exact: t\n                                }\n                            } : {\n                                facingMode: \"environment\"\n                            }\n                        }, [\n                            4,\n                            this.decodeOnceFromConstraints(r, e)\n                        ];\n                    case 1:\n                        return [\n                            2,\n                            n.sent()\n                        ];\n                }\n            });\n        });\n    }, t.prototype.decodeOnceFromVideoElement = function(e) {\n        return Ro(this, void 0, void 0, function() {\n            var r, n;\n            return No(this, function(o) {\n                switch(o.label){\n                    case 0:\n                        if (!e) throw new f(\"A video element must be provided.\");\n                        return r = t.prepareVideoElement(e), n = this.options.tryPlayVideoTimeout, [\n                            4,\n                            t.playVideoOnLoadAsync(r, n)\n                        ];\n                    case 1:\n                        return o.sent(), [\n                            4,\n                            this.scanOneResult(r)\n                        ];\n                    case 2:\n                        return [\n                            2,\n                            o.sent()\n                        ];\n                }\n            });\n        });\n    }, t.prototype.decodeOnceFromVideoUrl = function(e) {\n        return Ro(this, void 0, void 0, function() {\n            var r, n;\n            return No(this, function(o) {\n                switch(o.label){\n                    case 0:\n                        if (!e) throw new f(\"An URL must be provided.\");\n                        (r = t.prepareVideoElement()).src = e, n = this.decodeOnceFromVideoElement(r), o.label = 1;\n                    case 1:\n                        return o.trys.push([\n                            1,\n                            ,\n                            3,\n                            4\n                        ]), [\n                            4,\n                            n\n                        ];\n                    case 2:\n                        return [\n                            2,\n                            o.sent()\n                        ];\n                    case 3:\n                        return t.cleanVideoSource(r), [\n                            7\n                        ];\n                    case 4:\n                        return [\n                            2\n                        ];\n                }\n            });\n        });\n    }, t.prototype.scanOneResult = function(t, e, r, n) {\n        var o = this;\n        return void 0 === e && (e = !0), void 0 === r && (r = !0), void 0 === n && (n = !0), new Promise(function(i, a) {\n            o.scan(t, function(t, o, u) {\n                if (t) return i(t), void u.stop();\n                if (o) {\n                    if (o instanceof U && e) return;\n                    if (o instanceof g && r) return;\n                    if (o instanceof R && n) return;\n                    u.stop(), a(o);\n                }\n            });\n        });\n    }, t.prototype.scan = function(e, r, n) {\n        var o = this;\n        t.checkCallbackFnOrThrow(r);\n        var i = t.createCaptureCanvas(e), a = i.getContext(\"2d\");\n        if (!a) throw new Error(\"Couldn't create canvas for visual element scan.\");\n        var u, s = function() {\n            a = void 0, i = void 0;\n        }, c = !1, f = {\n            stop: function() {\n                c = !0, clearTimeout(u), s(), n && n();\n            }\n        }, h = function() {\n            if (!c) try {\n                t.drawImageOnCanvas(a, e);\n                var l = o.decodeFromCanvas(i);\n                r(l, void 0, f), u = setTimeout(h, o.options.delayBetweenScanSuccess);\n            } catch (t) {\n                if (r(void 0, t, f), t instanceof g || t instanceof R || t instanceof U) return void (u = setTimeout(h, o.options.delayBetweenScanAttempts));\n                s(), n && n(t);\n            }\n        };\n        return h(), f;\n    }, t.prototype._decodeOnLoadImage = function(e) {\n        return Ro(this, void 0, void 0, function() {\n            return No(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        return t.isImageLoaded(e) ? [\n                            3,\n                            2\n                        ] : [\n                            4,\n                            t._waitImageLoad(e)\n                        ];\n                    case 1:\n                        r.sent(), r.label = 2;\n                    case 2:\n                        return [\n                            2,\n                            this.decode(e)\n                        ];\n                }\n            });\n        });\n    }, t;\n}(), Bo = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}();\n!function(t) {\n    function e(e, r) {\n        return t.call(this, new Mt, e, r) || this;\n    }\n    Bo(e, t);\n}(Mo);\nvar Lo = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}();\n!function(t) {\n    function e(e, r) {\n        return t.call(this, new fr(e), e, r) || this;\n    }\n    Lo(e, t);\n}(Mo);\nvar Fo = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}();\n!function(t) {\n    function e(e, r) {\n        return t.call(this, new Or, e, r) || this;\n    }\n    Fo(e, t);\n}(Mo);\nvar ko = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}();\n!function(t) {\n    function e(e, r) {\n        var n = this, o = new $n;\n        return o.setHints(e), (n = t.call(this, o, e, r) || this).reader = o, n;\n    }\n    ko(e, t), Object.defineProperty(e.prototype, \"possibleFormats\", {\n        set: function(t) {\n            this.hints.set(T.POSSIBLE_FORMATS, t), this.reader.setHints(this.hints);\n        },\n        enumerable: !1,\n        configurable: !0\n    }), e.prototype.decodeBitmap = function(t) {\n        return this.reader.decodeWithState(t);\n    }, e.prototype.setHints = function(t) {\n        this.hints = t, this.reader.setHints(this.hints);\n    };\n}(Mo);\nvar xo = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}();\n!function(t) {\n    function e(e, r) {\n        return t.call(this, new Kn, e, r) || this;\n    }\n    xo(e, t);\n}(Mo);\nvar Vo = function() {\n    var t = function(e, r) {\n        return t = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(t, e) {\n            t.__proto__ = e;\n        } || function(t, e) {\n            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);\n        }, t(e, r);\n    };\n    return function(e, r) {\n        function n() {\n            this.constructor = e;\n        }\n        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);\n    };\n}(), Uo = function(t) {\n    function e(e, r) {\n        return t.call(this, new an, e, r) || this;\n    }\n    return Vo(e, t), e;\n}(Mo), Ho = function(t, e, r) {\n    var n = typeof t === r;\n    return n || console.warn('[ReactQrReader]: Expected \"'.concat(e, '\" to be a of type \"').concat(r, '\".')), n;\n}, Go = function(t) {\n    var n = t.scanDelay, o = t.constraints, i = t.onResult, a = t.videoId, u = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        var t = new Uo(null, {\n            delayBetweenScanAttempts: n\n        });\n        if (!function() {\n            var t = \"undefined\" != typeof navigator && !!navigator.mediaDevices;\n            return t || console.warn('[ReactQrReader]: MediaDevices API has no support for your browser. You can fix this by running \"npm i webrtc-adapter\"'), t;\n        }() && Ho(i, \"onResult\", \"function\")) {\n            i(null, new Error('MediaDevices API has no support for your browser. You can fix this by running \"npm i webrtc-adapter\"'), t);\n        }\n        return Ho(o, \"constraints\", \"object\") && t.decodeFromConstraints({\n            video: o\n        }, a, function(e, r) {\n            Ho(i, \"onResult\", \"function\") && i(e, r, t);\n        }).then(function(t) {\n            return u.current = t;\n        }).catch(function(e) {\n            Ho(i, \"onResult\", \"function\") && i(null, e, t);\n        }), function() {\n            var t;\n            null === (t = u.current) || void 0 === t || t.stop();\n        };\n    }, []);\n}, Xo = function() {\n    return Xo = Object.assign || function(t) {\n        for(var e, r = 1, n = arguments.length; r < n; r++)for(var o in e = arguments[r])Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);\n        return t;\n    }, Xo.apply(this, arguments);\n}, Wo = {\n    container: {\n        width: \"100%\",\n        paddingTop: \"100%\",\n        overflow: \"hidden\",\n        position: \"relative\"\n    },\n    video: {\n        top: 0,\n        left: 0,\n        width: \"100%\",\n        height: \"100%\",\n        display: \"block\",\n        overflow: \"hidden\",\n        position: \"absolute\",\n        transform: void 0\n    }\n}, jo = function(e) {\n    var r = e.videoContainerStyle, n = e.containerStyle, o = e.videoStyle, i = e.constraints, a = e.ViewFinder, u = e.scanDelay, s = e.className, c = e.onResult, f = e.videoId;\n    return Go({\n        constraints: i,\n        scanDelay: u,\n        onResult: c,\n        videoId: f\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"section\", {\n        className: s,\n        style: n\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: Xo(Xo({}, Wo.container), r)\n    }, !!a && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(a, null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"video\", {\n        muted: !0,\n        id: f,\n        style: Xo(Xo(Xo({}, Wo.video), o), {\n            transform: \"user\" === (null == i ? void 0 : i.facingMode) && \"scaleX(-1)\"\n        })\n    })));\n};\njo.displayName = \"QrReader\", jo.defaultProps = {\n    constraints: {\n        facingMode: \"user\"\n    },\n    videoId: \"video\",\n    scanDelay: 500\n};\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/react-qr-reader@3.0.0-beta-1_react-dom@18.2.0_react@18.2.0/node_modules/react-qr-reader/dist/esm/index.js\n");

/***/ })

};
;